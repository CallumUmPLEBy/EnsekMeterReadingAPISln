{"version":3,"file":"7421.836e671ae31234e9253b.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-sql/language.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/dynamic-labels/language.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/metric-math/language.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/guards.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/utils.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/hooks.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/Dimensions/FilterItem.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/Dimensions/Dimensions.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/Forms.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/aws_url.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/CloudWatchLink.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-logs/syntax.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/query/getStatsGroups.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/templateVariableUtils.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/Search.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/Account.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/styles.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/LogGroups/LogGroupsSelector.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/LogGroups/SelectedLogGroups.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/LogGroups/LogGroupsField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/LogsQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/LogsQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/migrations/metricQueryMigrations.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/migrations/useMigratedMetricsQuery.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/monarch/LinkedToken.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/monarch/linkedTokenBuilder.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/monarch/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/dynamic-labels/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/dynamic-labels/definition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/monarch/commands.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/monarch/register.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/DynamicLabelsField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-sql/definition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLCodeEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetricsQueryEditor/Alias.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetricsQueryEditor/MetricsQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/defaultQueries.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryHeader.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/expressions.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-sql/SQLGenerator.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/utils.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLBuilderSelectRow.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLFilter.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLGroupBy.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLOrderByGroup.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLBuilderEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/metric-math/definition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MathExpressionQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/standardStatistics.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetricStatEditor/MetricStatEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/annotationSupport.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/AnnotationQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-logs/CloudWatchLogsLanguageProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/monarch/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-sql/completion/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-sql/completion/statementPosition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-sql/completion/suggestionKind.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-sql/completion/tokenUtils.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-sql/completion/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/metric-math/completion/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/metric-math/completion/statementPosition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/metric-math/completion/suggestionKind.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/metric-math/completion/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/memoizedDebounce.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/query-runner/CloudWatchRequest.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/query-runner/CloudWatchAnnotationQueryRunner.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/datalinks.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/logsRetry.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/rxjs/increasingInterval.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/query-runner/CloudWatchLogsQueryRunner.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/ThrottlingErrorMessage.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/query-runner/CloudWatchMetricsQueryRunner.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/resources/ResourcesAPI.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/migrations/variableQueryMigrations.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/MultiFilterItem.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/MultiFilter.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/VariableQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/VariableTextField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/variables.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/XrayLinkConfig.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/ConfigEditor.tsx","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/TemplateTag/TemplateTag.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/inlineArrayTransformer/inlineArrayTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/stripIndentTransformer/stripIndentTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/trimResultTransformer/trimResultTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/commaLists/commaLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/commaListsAnd/commaListsAnd.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/commaListsOr/commaListsOr.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/splitStringTransformer/splitStringTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/removeNonPrintingValuesTransformer/removeNonPrintingValuesTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/html/html.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/replaceSubstitutionTransformer/replaceSubstitutionTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/safeHtml/safeHtml.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/replaceResultTransformer/replaceResultTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLine/oneLine.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineTrim/oneLineTrim.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineCommaLists/oneLineCommaLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineCommaListsOr/oneLineCommaListsOr.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineCommaListsAnd/oneLineCommaListsAnd.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/inlineLists/inlineLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineInlineLists/oneLineInlineLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/stripIndent/stripIndent.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/stripIndents/stripIndents.js","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/LogsCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetaInspector.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/tracking.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/module.tsx","webpack://grafana/./.yarn/__virtual__/react-use-virtual-720cbd4f86/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useCustomCompareEffect.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-720cbd4f86/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/misc/isDeepEqual.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-720cbd4f86/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useDeepCompareEffect.js","webpack://grafana/../../opt/drone/yarncache/@grafana-aws-sdk-npm-0.0.40-ca126f7392-23d20f8da2.zip/node_modules/@grafana/aws-sdk/dist/index.production.js","webpack://grafana/../../opt/drone/yarncache/@grafana-aws-sdk-npm-0.0.40-ca126f7392-23d20f8da2.zip/node_modules/@grafana/aws-sdk/index.js","webpack://grafana/../../opt/drone/yarncache/fast-deep-equal-npm-3.1.3-790edcfcf5-e21a9d8d84.zip/node_modules/fast-deep-equal/react.js","webpack://grafana/../../opt/drone/yarncache/jsurl-npm-0.1.5-9e17f93783-50b614908d.zip/node_modules/jsurl/index.js","webpack://grafana/../../opt/drone/yarncache/jsurl-npm-0.1.5-9e17f93783-50b614908d.zip/node_modules/jsurl/lib/jsurl.js"],"sourcesContent":["import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\ninterface CloudWatchLanguage extends monacoType.languages.IMonarchLanguage {\n  keywords: string[];\n  operators: string[];\n  builtinFunctions: string[];\n}\n\nexport const SELECT = 'SELECT';\nexport const FROM = 'FROM';\nexport const WHERE = 'WHERE';\nexport const GROUP = 'GROUP';\nexport const ORDER = 'ORDER';\nexport const BY = 'BY';\nexport const DESC = 'DESC';\nexport const ASC = 'ASC';\nexport const LIMIT = 'LIMIT';\nexport const WITH = 'WITH';\nexport const SCHEMA = 'SCHEMA';\n\nexport const KEYWORDS = [SELECT, FROM, WHERE, GROUP, ORDER, BY, DESC, ASC, LIMIT, WITH, SCHEMA];\nexport const STATISTICS = ['AVG', 'COUNT', 'MAX', 'MIN', 'SUM'];\n\nexport const AND = 'AND';\nexport const LOGICAL_OPERATORS = [AND];\n\nexport const EQUALS = '=';\nexport const NOT_EQUALS = '!=';\nexport const COMPARISON_OPERATORS = [EQUALS, NOT_EQUALS];\n\nexport const language: CloudWatchLanguage = {\n  defaultToken: '',\n  tokenPostfix: '.sql',\n  ignoreCase: true,\n  brackets: [\n    { open: '[', close: ']', token: 'delimiter.square' },\n    { open: '(', close: ')', token: 'delimiter.parenthesis' },\n  ],\n  keywords: KEYWORDS,\n  operators: LOGICAL_OPERATORS,\n  builtinFunctions: STATISTICS,\n  tokenizer: {\n    root: [\n      [/\\$[a-zA-Z0-9-_]+/, 'variable'],\n      { include: '@comments' },\n      { include: '@whitespace' },\n      { include: '@numbers' },\n      { include: '@strings' },\n      { include: '@complexIdentifiers' },\n      [/[;,.]/, 'delimiter'],\n      [/[()]/, '@brackets'],\n      [\n        /[\\w@#$]+/,\n        {\n          cases: {\n            '@keywords': 'keyword',\n            '@operators': 'operator',\n            '@builtinFunctions': 'predefined',\n            '@default': 'identifier',\n          },\n        },\n      ],\n      [/[=!%&+\\-*/|~^]/, 'operator'], // TODO: strip these options\n    ],\n    whitespace: [[/\\s+/, 'white']],\n    comments: [[/--+.*/, 'comment']],\n    comment: [\n      [/[^*/]+/, 'comment'],\n      [/./, 'comment'],\n    ],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    strings: [\n      [/N'/, { token: 'string', next: '@string' }],\n      [/'/, { token: 'string', next: '@string' }],\n      [/\"/, { token: 'type', next: '@string_double' }],\n    ],\n    string: [\n      [/[^']+/, 'string'],\n      [/''/, 'string'],\n      [/'/, { token: 'string', next: '@pop' }],\n    ],\n    string_double: [\n      [/[^\\\\\"]+/, 'type'],\n      [/\"/, 'type', '@pop'],\n    ],\n    complexIdentifiers: [\n      [/\\[/, { token: 'identifier.quote', next: '@bracketedIdentifier' }],\n      [/\"/, { token: 'identifier.quote', next: '@quotedIdentifier' }],\n    ],\n    bracketedIdentifier: [\n      [/[^\\]]+/, 'identifier'],\n      [/]]/, 'identifier'],\n      [/]/, { token: 'identifier.quote', next: '@pop' }],\n    ],\n    quotedIdentifier: [\n      [/[^\"]+/, 'identifier'],\n      [/\"\"/, 'identifier'],\n      [/\"/, { token: 'identifier.quote', next: '@pop' }],\n    ],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {\n  comments: {\n    lineComment: '--',\n    blockComment: ['/*', '*/'],\n  },\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n};\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport { config } from '@grafana/runtime';\n\n// Dynamic labels: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html\nexport const DYNAMIC_LABEL_PATTERNS = [\n  '${DATAPOINT_COUNT}',\n  '${FIRST}',\n  '${FIRST_LAST_RANGE}',\n  '${FIRST_LAST_TIME_RANGE}',\n  '${FIRST_TIME}',\n  '${FIRST_TIME_RELATIVE}',\n  '${LABEL}',\n  '${LAST}',\n  '${LAST_TIME}',\n  '${LAST_TIME_RELATIVE}',\n  '${MAX}',\n  '${MAX_TIME}',\n  '${MAX_TIME_RELATIVE}',\n  '${MIN}',\n  '${MIN_MAX_RANGE}',\n  '${MIN_MAX_TIME_RANGE}',\n  '${MIN_TIME}',\n  '${MIN_TIME_RELATIVE}',\n  \"${PROP('AccountId')}\",\n  \"${PROP('MetricName')}\",\n  \"${PROP('Namespace')}\",\n  \"${PROP('Period')}\",\n  \"${PROP('Region')}\",\n  \"${PROP('Stat')}\",\n  '${SUM}',\n  ...(config.featureToggles.cloudWatchCrossAccountQuerying ? [\"${PROP('AccountLabel')}\"] : []),\n];\n\nexport const language: monacoType.languages.IMonarchLanguage = {\n  id: 'dynamicLabels',\n  ignoreCase: false,\n  tokenizer: {\n    root: [\n      { include: '@whitespace' },\n      { include: '@builtInFunctions' },\n      { include: '@string' },\n      [/\\$\\{PROP\\('Dim.[a-zA-Z0-9-_]?.*'\\)\\}+/, 'predefined'], //custom handling for dimension patterns\n    ],\n    builtInFunctions: [[DYNAMIC_LABEL_PATTERNS.map(escapeRegExp).join('|'), 'predefined']],\n    whitespace: [[/\\s+/, 'white']],\n    string: [],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {};\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\n// Metric Math: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html\nexport const METRIC_MATH_FNS = [\n  'ABS',\n  'ANOMALY_DETECTION_BAND',\n  'AVG',\n  'CEIL',\n  'DATAPOINT_COUNT',\n  'DIFF',\n  'DIFF_TIME',\n  'FILL',\n  'FIRST',\n  'LAST',\n  'FLOOR',\n  'IF',\n  'INSIGHT_RULE_METRIC',\n  'LOG',\n  'LOG10',\n  'MAX',\n  'METRIC_COUNT',\n  'METRICS',\n  'MIN',\n  'MINUTE',\n  'HOUR',\n  'DAY',\n  'DATE',\n  'MONTH',\n  'YEAR',\n  'EPOCH',\n  'PERIOD',\n  'RATE',\n  'REMOVE_EMPTY',\n  'RUNNING_SUM',\n  'SEARCH',\n  'SERVICE_QUOTA',\n  'SLICE',\n  'SORT',\n  'STDDEV',\n  'SUM',\n  'TIME_SERIES',\n];\n\nexport const METRIC_MATH_STATISTIC_KEYWORD_STRINGS = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount']; // second arguments to SEARCH function\n\nexport const METRIC_MATH_KEYWORDS = ['REPEAT', 'LINEAR', 'ASC', 'DSC']; // standalone magic arguments to functions\n\nexport const METRIC_MATH_OPERATORS = [\n  '+',\n  '-',\n  '*',\n  '/',\n  '^',\n  '==',\n  '!=',\n  '<=',\n  '>=',\n  '<',\n  '>',\n  'AND',\n  '&&',\n  'OR',\n  '||',\n];\n\nexport const METRIC_MATH_PERIODS = [10, 60, 300, 900, 3000, 21600, 86400];\n\nexport const language: monacoType.languages.IMonarchLanguage = {\n  id: 'metricMath',\n  ignoreCase: false,\n  brackets: [\n    { open: '[', close: ']', token: 'delimiter.square' },\n    { open: '(', close: ')', token: 'delimiter.parenthesis' },\n    { open: '{', close: '}', token: 'delimiter.curly' },\n  ],\n  tokenizer: {\n    root: [{ include: '@nonNestableStates' }, { include: '@strings' }],\n    nonNestableStates: [\n      { include: '@variables' },\n      { include: '@macros' },\n      { include: '@whitespace' },\n      { include: '@numbers' },\n      { include: '@assignment' },\n      { include: '@keywords' },\n      { include: '@operators' },\n      { include: '@builtInFunctions' },\n      [/[;,.]/, 'delimiter'],\n      [/[(){}\\[\\]]/, '@brackets'], // [], (), {} are all brackets\n    ],\n    keywords: [[METRIC_MATH_KEYWORDS.map(escapeRegExp).join('|'), 'keyword']],\n    operators: [[METRIC_MATH_OPERATORS.map(escapeRegExp).join('|'), 'operator']],\n    builtInFunctions: [[METRIC_MATH_FNS.map(escapeRegExp).join('|'), 'predefined']],\n    variables: [\n      [/\\$[a-zA-Z0-9-_]+/, 'variable'], // $ followed by any letter/number we assume could be grafana template variable\n    ],\n    macros: [[/\\$__[a-zA-Z0-9-_]+/, 'type']], // example: $__period_auto\n    whitespace: [[/\\s+/, 'white']],\n    assignment: [[/=/, 'tag']],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    // states that start other states (aka nested states):\n    strings: [\n      [/'/, { token: 'string', next: '@string' }],\n      [/\"/, { token: 'type', next: '@string_double' }],\n    ],\n    string: [\n      [/{/, { token: 'delimiter.curly', next: '@nestedCurly' }], // escape out of string and into nestedCurly\n      [/\\(/, { token: 'delimiter.parenthesis', next: '@nestedParens' }], // escape out of string and into nestedCurly\n      [/\"/, { token: 'type', next: '@string_double' }], // jump into double string\n      [/'/, { token: 'string', next: '@pop' }], // stop being a string\n      { include: '@nonNestableStates' },\n      [/[^']/, 'string'], // anything that is not a quote, is marked as string\n    ],\n    string_double: [\n      [/[^\"]/, 'type'], // mark anything not a quote as a \"type\" (different type of string for visual difference)\n      [/\"/, { token: 'type', next: '@pop' }], // mark also as a type and stop being in the double string state\n    ],\n    nestedCurly: [\n      [/}/, { token: 'delimiter.curly', next: '@pop' }], // escape out of string and into braces\n      [/'/, { token: 'string', next: '@string' }], // go to string if see start of string\n      [/\"/, { token: 'type', next: '@string_double' }], // go to string_double if see start of double string\n    ],\n    nestedParens: [\n      [/\\)/, { token: 'delimiter.parenthesis', next: '@pop' }], // escape out of string and into braces\n      [/'/, { token: 'string', next: '@string' }], // go to string if see start of string\n      [/\"/, { token: 'type', next: '@string_double' }], // go to string_double if see start of double string\n    ],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n};\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n","import { AnnotationQuery } from '@grafana/data';\n\nimport { CloudWatchAnnotationQuery, CloudWatchLogsQuery, CloudWatchMetricsQuery, CloudWatchQuery } from './types';\n\nexport const isCloudWatchLogsQuery = (cloudwatchQuery: CloudWatchQuery): cloudwatchQuery is CloudWatchLogsQuery =>\n  cloudwatchQuery.queryMode === 'Logs';\n\nexport const isCloudWatchMetricsQuery = (cloudwatchQuery: CloudWatchQuery): cloudwatchQuery is CloudWatchMetricsQuery =>\n  cloudwatchQuery.queryMode === 'Metrics' || !cloudwatchQuery.hasOwnProperty('queryMode'); // in early versions of this plugin, queryMode wasn't defined in a CloudWatchMetricsQuery\n\nexport const isCloudWatchAnnotationQuery = (\n  cloudwatchQuery: CloudWatchQuery\n): cloudwatchQuery is CloudWatchAnnotationQuery => cloudwatchQuery.queryMode === 'Annotations';\n\nexport const isCloudWatchAnnotation = (query: unknown): query is AnnotationQuery<CloudWatchAnnotationQuery> =>\n  (query as AnnotationQuery<CloudWatchAnnotationQuery>).target?.queryMode === 'Annotations';\n","import { SelectableValue } from '@grafana/data';\n\nimport { CloudWatchMetricsQuery, MetricQueryType, MetricEditorMode } from '../types';\n\nimport { CloudWatchDatasource } from './../datasource';\n\nexport const toOption = (value: string) => ({ label: value, value });\n\nexport const appendTemplateVariables = (datasource: CloudWatchDatasource, values: SelectableValue[]) => [\n  ...values,\n  { label: 'Template Variables', options: datasource.getVariables().map(toOption) },\n];\n\nexport const filterMetricsQuery = (query: CloudWatchMetricsQuery): boolean => {\n  const { region, metricQueryType, metricEditorMode, expression, metricName, namespace, sqlExpression, statistic } =\n    query;\n  if (!region) {\n    return false;\n  }\n  if (metricQueryType === MetricQueryType.Search && metricEditorMode === MetricEditorMode.Builder) {\n    return !!namespace && !!metricName && !!statistic;\n  } else if (metricQueryType === MetricQueryType.Search && metricEditorMode === MetricEditorMode.Code) {\n    return !!expression;\n  } else if (metricQueryType === MetricQueryType.Query) {\n    // still TBD how to validate the visual query builder for SQL\n    return !!sqlExpression;\n  }\n\n  return false;\n};\n","import { useEffect, useState } from 'react';\nimport { useAsyncFn, useDeepCompareEffect } from 'react-use';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { CloudWatchDatasource } from './datasource';\nimport { ResourcesAPI } from './resources/ResourcesAPI';\nimport { GetMetricsRequest, GetDimensionKeysRequest } from './resources/types';\nimport { appendTemplateVariables } from './utils/utils';\n\nexport const useRegions = (datasource: CloudWatchDatasource): [Array<SelectableValue<string>>, boolean] => {\n  const [regionsIsLoading, setRegionsIsLoading] = useState<boolean>(false);\n  const [regions, setRegions] = useState<Array<SelectableValue<string>>>([{ label: 'default', value: 'default' }]);\n\n  useEffect(() => {\n    setRegionsIsLoading(true);\n\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      options: datasource.getVariables().map(toOption),\n    };\n\n    datasource.resources\n      .getRegions()\n      .then((regions: Array<SelectableValue<string>>) => setRegions([...regions, variableOptionGroup]))\n      .finally(() => setRegionsIsLoading(false));\n  }, [datasource]);\n\n  return [regions, regionsIsLoading];\n};\n\nexport const useNamespaces = (datasource: CloudWatchDatasource) => {\n  const [namespaces, setNamespaces] = useState<Array<SelectableValue<string>>>([]);\n  useEffect(() => {\n    datasource.resources.getNamespaces().then((namespaces) => {\n      setNamespaces(appendTemplateVariables(datasource, namespaces));\n    });\n  }, [datasource]);\n\n  return namespaces;\n};\n\nexport const useMetrics = (datasource: CloudWatchDatasource, { region, namespace, accountId }: GetMetricsRequest) => {\n  const [metrics, setMetrics] = useState<Array<SelectableValue<string>>>([]);\n\n  // need to ensure dependency array below recieves the interpolated value so that the effect is triggered when a variable is changed\n  if (region) {\n    region = datasource.templateSrv.replace(region, {});\n  }\n  if (namespace) {\n    namespace = datasource.templateSrv.replace(namespace, {});\n  }\n\n  if (accountId) {\n    accountId = datasource.templateSrv.replace(accountId, {});\n  }\n  useEffect(() => {\n    datasource.resources.getMetrics({ namespace, region, accountId }).then((result: Array<SelectableValue<string>>) => {\n      setMetrics(appendTemplateVariables(datasource, result));\n    });\n  }, [datasource, region, namespace, accountId]);\n\n  return metrics;\n};\n\nexport const useDimensionKeys = (\n  datasource: CloudWatchDatasource,\n  { region, namespace, metricName, dimensionFilters, accountId }: GetDimensionKeysRequest\n) => {\n  const [dimensionKeys, setDimensionKeys] = useState<Array<SelectableValue<string>>>([]);\n\n  // need to ensure dependency array below revieves the interpolated value so that the effect is triggered when a variable is changed\n  if (region) {\n    region = datasource.templateSrv.replace(region, {});\n  }\n  if (namespace) {\n    namespace = datasource.templateSrv.replace(namespace, {});\n  }\n\n  if (metricName) {\n    metricName = datasource.templateSrv.replace(metricName, {});\n  }\n\n  if (accountId) {\n    accountId = datasource.templateSrv.replace(accountId, {});\n  }\n\n  if (dimensionFilters) {\n    dimensionFilters = datasource.resources.convertDimensionFormat(dimensionFilters, {});\n  }\n\n  // doing deep comparison to avoid making new api calls to list metrics unless dimension filter object props changes\n  useDeepCompareEffect(() => {\n    datasource.resources\n      .getDimensionKeys({ namespace, region, metricName, accountId, dimensionFilters })\n      .then((result: Array<SelectableValue<string>>) => {\n        setDimensionKeys(appendTemplateVariables(datasource, result));\n      });\n  }, [datasource, namespace, region, metricName, accountId, dimensionFilters]);\n\n  return dimensionKeys;\n};\n\nexport const useIsMonitoringAccount = (resources: ResourcesAPI, region: string) => {\n  const [isMonitoringAccount, setIsMonitoringAccount] = useState(false);\n  // we call this before the use effect to ensure dependency array below\n  // receives the interpolated value so that the effect is triggered when a variable is changed\n  if (region) {\n    region = resources.templateSrv.replace(region, {});\n  }\n  useEffect(() => {\n    if (config.featureToggles.cloudWatchCrossAccountQuerying) {\n      resources.isMonitoringAccount(region).then((result) => setIsMonitoringAccount(result));\n    }\n  }, [region, resources]);\n\n  return isMonitoringAccount;\n};\n\nexport const useAccountOptions = (\n  resources: Pick<ResourcesAPI, 'getAccounts' | 'templateSrv' | 'getVariables'> | undefined,\n  region: string\n) => {\n  // we call this before the use effect to ensure dependency array below\n  // receives the interpolated value so that the effect is triggered when a variable is changed\n  if (region) {\n    region = resources?.templateSrv.replace(region, {}) ?? '';\n  }\n\n  const fetchAccountOptions = async () => {\n    if (!config.featureToggles.cloudWatchCrossAccountQuerying) {\n      return Promise.resolve([]);\n    }\n    const accounts = (await resources?.getAccounts({ region })) ?? [];\n    if (accounts.length === 0) {\n      return [];\n    }\n\n    const options: Array<SelectableValue<string>> = accounts.map((a) => ({\n      label: a.label,\n      value: a.id,\n      description: a.id,\n    }));\n\n    const variableOptions = resources?.getVariables().map(toOption) || [];\n\n    const variableOptionGroup: SelectableValue<string> = {\n      label: 'Template Variables',\n      options: variableOptions,\n    };\n\n    return [...options, variableOptionGroup];\n  };\n\n  const [state, doFetch] = useAsyncFn(fetchAccountOptions, [resources, region]);\n\n  useEffect(() => {\n    doFetch();\n  }, [resources, region, doFetch]);\n\n  return state;\n};\n","import { css, cx } from '@emotion/css';\nimport React, { FunctionComponent, useMemo } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { GrafanaTheme2, SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, InputGroup } from '@grafana/experimental';\nimport { Select, stylesFactory, useTheme2 } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { Dimensions, MetricStat } from '../../types';\nimport { appendTemplateVariables } from '../../utils/utils';\n\nimport { DimensionFilterCondition } from './Dimensions';\n\nexport interface Props {\n  metricStat: MetricStat;\n  datasource: CloudWatchDatasource;\n  filter: DimensionFilterCondition;\n  dimensionKeys: Array<SelectableValue<string>>;\n  disableExpressions: boolean;\n  onChange: (value: DimensionFilterCondition) => void;\n  onDelete: () => void;\n}\n\nconst wildcardOption = { value: '*', label: '*' };\n\nconst excludeCurrentKey = (dimensions: Dimensions, currentKey: string | undefined) =>\n  Object.entries(dimensions ?? {}).reduce<Dimensions>((acc, [key, value]) => {\n    if (key !== currentKey) {\n      return { ...acc, [key]: value };\n    }\n    return acc;\n  }, {});\n\nexport const FilterItem: FunctionComponent<Props> = ({\n  filter,\n  metricStat: { region, namespace, metricName, dimensions, accountId },\n  datasource,\n  dimensionKeys,\n  disableExpressions,\n  onChange,\n  onDelete,\n}) => {\n  const dimensionsExcludingCurrentKey = useMemo(\n    () => excludeCurrentKey(dimensions ?? {}, filter.key),\n    [dimensions, filter]\n  );\n\n  const loadDimensionValues = async () => {\n    if (!filter.key) {\n      return [];\n    }\n\n    return datasource.resources\n      .getDimensionValues({\n        dimensionKey: filter.key,\n        dimensionFilters: dimensionsExcludingCurrentKey,\n        region,\n        namespace,\n        metricName,\n        accountId,\n      })\n      .then((result: Array<SelectableValue<string>>) => {\n        if (result.length && !disableExpressions && !result.some((o) => o.value === wildcardOption.value)) {\n          result.unshift(wildcardOption);\n        }\n        return appendTemplateVariables(datasource, result);\n      });\n  };\n\n  const [state, loadOptions] = useAsyncFn(loadDimensionValues, [\n    filter.key,\n    dimensions,\n    region,\n    namespace,\n    metricName,\n    accountId,\n  ]);\n  const theme = useTheme2();\n  const styles = getOperatorStyles(theme);\n\n  return (\n    <div data-testid=\"cloudwatch-dimensions-filter-item\">\n      <InputGroup>\n        <Select\n          aria-label=\"Dimensions filter key\"\n          inputId=\"cloudwatch-dimensions-filter-item-key\"\n          width=\"auto\"\n          value={filter.key ? toOption(filter.key) : null}\n          allowCustomValue\n          options={dimensionKeys}\n          onChange={(change) => {\n            if (change.label) {\n              onChange({ key: change.label, value: undefined });\n            }\n          }}\n        />\n\n        <span className={cx(styles.root)}>=</span>\n\n        <Select\n          aria-label=\"Dimensions filter value\"\n          inputId=\"cloudwatch-dimensions-filter-item-value\"\n          onOpenMenu={loadOptions}\n          width=\"auto\"\n          value={filter.value ? toOption(filter.value) : null}\n          allowCustomValue\n          isLoading={state.loading}\n          options={state.value}\n          onChange={(change) => {\n            if (change.value) {\n              onChange({ ...filter, value: change.value });\n            }\n          }}\n        />\n        <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} type=\"button\" />\n      </InputGroup>\n    </div>\n  );\n};\n\nconst getOperatorStyles = stylesFactory((theme: GrafanaTheme2) => ({\n  root: css({\n    padding: theme.spacing(0, 1),\n    alignSelf: 'center',\n  }),\n}));\n","import { isEqual } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorList } from '@grafana/experimental';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { Dimensions as DimensionsType, MetricStat } from '../../types';\n\nimport { FilterItem } from './FilterItem';\n\nexport interface Props {\n  metricStat: MetricStat;\n  onChange: (dimensions: DimensionsType) => void;\n  datasource: CloudWatchDatasource;\n  dimensionKeys: Array<SelectableValue<string>>;\n  disableExpressions: boolean;\n}\n\nexport interface DimensionFilterCondition {\n  key?: string;\n  operator?: string;\n  value?: string;\n}\n\nconst dimensionsToFilterConditions = (dimensions: DimensionsType | undefined) =>\n  Object.entries(dimensions ?? {}).reduce<DimensionFilterCondition[]>((acc, [key, value]) => {\n    if (!value) {\n      return acc;\n    }\n\n    // Previously, we only appended to the `acc`umulated dimensions if the value was a string.\n    // However, Cloudwatch can present dimensions with single-value arrays, e.g.\n    //   k: FunctionName\n    //   v: ['MyLambdaFunction']\n    // in which case we grab the single-value from the Array and use that as the value.\n    let v = '';\n    if (typeof value === 'string') {\n      v = value;\n    } else if (Array.isArray(value) && typeof value[0] === 'string') {\n      v = value[0];\n    }\n\n    if (!v) {\n      return acc;\n    }\n\n    const filter = {\n      key: key,\n      value: v,\n      operator: '=',\n    };\n    return [...acc, filter];\n  }, []);\n\nconst filterConditionsToDimensions = (filters: DimensionFilterCondition[]) => {\n  return filters.reduce<DimensionsType>((acc, { key, value }) => {\n    if (key && value) {\n      return { ...acc, [key]: value };\n    }\n    return acc;\n  }, {});\n};\n\nexport const Dimensions = ({ metricStat, datasource, dimensionKeys, disableExpressions, onChange }: Props) => {\n  const dimensionFilters = useMemo(() => dimensionsToFilterConditions(metricStat.dimensions), [metricStat.dimensions]);\n  const [items, setItems] = useState<DimensionFilterCondition[]>(dimensionFilters);\n  const onDimensionsChange = (newItems: Array<Partial<DimensionFilterCondition>>) => {\n    setItems(newItems);\n\n    // The onChange event should only be triggered in the case there is a complete dimension object.\n    // So when a new key is added that does not yet have a value, it should not trigger an onChange event.\n    const newDimensions = filterConditionsToDimensions(newItems);\n    if (!isEqual(newDimensions, metricStat.dimensions)) {\n      onChange(newDimensions);\n    }\n  };\n\n  return (\n    <EditorList\n      items={items}\n      onChange={onDimensionsChange}\n      renderItem={makeRenderFilter(datasource, metricStat, dimensionKeys, disableExpressions)}\n    />\n  );\n};\n\nfunction makeRenderFilter(\n  datasource: CloudWatchDatasource,\n  metricStat: MetricStat,\n  dimensionKeys: Array<SelectableValue<string>>,\n  disableExpressions: boolean\n) {\n  function renderFilter(\n    item: DimensionFilterCondition,\n    onChange: (item: DimensionFilterCondition) => void,\n    onDelete: () => void\n  ) {\n    return (\n      <FilterItem\n        filter={item}\n        onChange={(item) => onChange(item)}\n        datasource={datasource}\n        metricStat={metricStat}\n        disableExpressions={disableExpressions}\n        dimensionKeys={dimensionKeys}\n        onDelete={onDelete}\n      />\n    );\n  }\n\n  return renderFilter;\n}\n","import React, { InputHTMLAttributes, FunctionComponent } from 'react';\n\nimport { InlineFormLabel } from '@grafana/ui';\n\nexport interface Props extends InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  tooltip?: string;\n  children?: React.ReactNode;\n}\n\nexport const QueryField: FunctionComponent<Partial<Props>> = ({ label, tooltip, children }) => (\n  <>\n    <InlineFormLabel width={8} className=\"query-keyword\" tooltip={tooltip}>\n      {label}\n    </InlineFormLabel>\n    {children}\n  </>\n);\n\nexport const QueryInlineField: FunctionComponent<Props> = ({ ...props }) => {\n  return (\n    <div className={'gf-form-inline'}>\n      <QueryField {...props} />\n      <div className=\"gf-form gf-form--grow\">\n        <div className=\"gf-form-label gf-form-label--grow\" />\n      </div>\n    </div>\n  );\n};\n","const JSURL = require('jsurl');\n\nexport interface AwsUrl {\n  end: string;\n  start: string;\n  timeType?: 'ABSOLUTE' | 'RELATIVE';\n  tz?: 'local' | 'UTC';\n  unit?: string;\n  editorString: string;\n  isLiveTail: boolean;\n  source: string[];\n}\n\nexport function encodeUrl(obj: AwsUrl, region: string): string {\n  return `https://${region}.console.aws.amazon.com/cloudwatch/home?region=${region}#logs-insights:queryDetail=${JSURL.stringify(\n    obj\n  )}`;\n}\n","import React, { useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { PanelData } from '@grafana/data';\nimport { Icon } from '@grafana/ui';\n\nimport { AwsUrl, encodeUrl } from '../aws_url';\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchLogsQuery } from '../types';\n\ninterface Props {\n  query: CloudWatchLogsQuery;\n  panelData?: PanelData;\n  datasource: CloudWatchDatasource;\n}\n\nexport function CloudWatchLink({ panelData, query, datasource }: Props) {\n  const [href, setHref] = useState('');\n  const prevPanelData = usePrevious<PanelData | undefined>(panelData);\n\n  useEffect(() => {\n    if (prevPanelData !== panelData && panelData?.request?.range) {\n      const arns = (query.logGroups ?? [])\n        .filter((group) => group?.arn)\n        .map((group) => (group.arn ?? '').replace(/:\\*$/, '')); // remove `:*` from end of arn\n      const logGroupNames = query.logGroupNames;\n      let sources = arns?.length ? arns : logGroupNames;\n\n      const range = panelData?.request?.range;\n      const start = range.from.toISOString();\n      const end = range.to.toISOString();\n\n      const urlProps: AwsUrl = {\n        end,\n        start,\n        timeType: 'ABSOLUTE',\n        tz: 'UTC',\n        editorString: query.expression ?? '',\n        isLiveTail: false,\n        source: sources ?? [],\n      };\n\n      setHref(encodeUrl(urlProps, datasource.resources.getActualRegion(query.region)));\n    }\n  }, [panelData, prevPanelData, datasource, query]);\n\n  return (\n    <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n      <Icon name=\"share-alt\" /> CloudWatch Logs Insights\n    </a>\n  );\n}\n","import { Grammar } from 'prismjs';\n\nimport { CompletionItem } from '@grafana/ui';\n\nexport const QUERY_COMMANDS: CompletionItem[] = [\n  {\n    label: 'fields',\n    documentation: 'Retrieves the specified fields from log events',\n  },\n  { label: 'display', documentation: 'Specifies which fields to display in the query results' },\n  {\n    label: 'filter',\n    documentation: 'Filters the results of a query based on one or more conditions',\n  },\n  {\n    label: 'stats',\n    documentation: 'Calculates aggregate statistics based on the values of log fields',\n  },\n  { label: 'sort', documentation: 'Sorts the retrieved log events' },\n  { label: 'limit', documentation: 'Specifies the number of log events returned by the query' },\n  {\n    label: 'parse',\n    documentation:\n      'Extracts data from a log field, creating one or more ephemeral fields that you can process further in the query',\n  },\n];\n\nexport const COMPARISON_OPERATORS = ['=', '!=', '<', '<=', '>', '>='];\nexport const ARITHMETIC_OPERATORS = ['+', '-', '*', '/', '^', '%'];\n\nexport const NUMERIC_OPERATORS = [\n  {\n    label: 'abs',\n    detail: 'abs(a)',\n    documentation: 'Absolute value.',\n  },\n  {\n    label: 'ceil',\n    detail: 'ceil(a)',\n    documentation: 'Round to ceiling (the smallest integer that is greater than the value of a).',\n  },\n  {\n    label: 'floor',\n    detail: 'floor(a)',\n    documentation: 'Round to floor (the largest integer that is smaller than the value of a).',\n  },\n  {\n    label: 'greatest',\n    detail: 'greatest(a,b, ... z)',\n    documentation: 'Returns the largest value.',\n  },\n  {\n    label: 'least',\n    detail: 'least(a, b, ... z)',\n    documentation: 'Returns the smallest value.',\n  },\n  {\n    label: 'log',\n    detail: 'log(a)',\n    documentation: 'Natural logarithm.',\n  },\n  {\n    label: 'sqrt',\n    detail: 'sqrt(a)',\n    documentation: 'Square root.',\n  },\n];\n\nexport const GENERAL_FUNCTIONS = [\n  {\n    label: 'ispresent',\n    detail: 'ispresent(fieldname)',\n    documentation: 'Returns true if the field exists.',\n  },\n  {\n    label: 'coalesce',\n    detail: 'coalesce(fieldname1, fieldname2, ... fieldnamex)',\n    documentation: 'Returns the first non-null value from the list.',\n  },\n];\n\nexport const STRING_FUNCTIONS = [\n  {\n    label: 'isempty',\n    detail: 'isempty(fieldname)',\n    documentation: 'Returns true if the field is missing or is an empty string.',\n  },\n  {\n    label: 'isblank',\n    detail: 'isblank(fieldname)',\n    documentation: 'Returns true if the field is missing, an empty string, or contains only white space.',\n  },\n  {\n    label: 'concat',\n    detail: 'concat(string1, string2, ... stringz)',\n    documentation: 'Concatenates the strings.',\n  },\n  {\n    label: 'ltrim',\n    detail: 'ltrim(string) or ltrim(string1, string2)',\n    documentation:\n      'Remove white space from the left of the string. If the function has a second string argument, it removes the characters of string2 from the left of string1.',\n  },\n  {\n    label: 'rtrim',\n    detail: 'rtrim(string) or rtrim(string1, string2)',\n    documentation:\n      'Remove white space from the right of the string. If the function has a second string argument, it removes the characters of string2 from the right of string1.',\n  },\n  {\n    label: 'trim',\n    detail: 'trim(string) or trim(string1, string2)',\n    documentation:\n      'Remove white space from both ends of the string. If the function has a second string argument, it removes the characters of string2 from both sides of string1.',\n  },\n  {\n    label: 'strlen',\n    detail: 'strlen(string)',\n    documentation: 'Returns the length of the string in Unicode code points.',\n  },\n  {\n    label: 'toupper',\n    detail: 'toupper(string)',\n    documentation: 'Converts the string to uppercase.',\n  },\n  {\n    label: 'tolower',\n    detail: 'tolower(string)',\n    documentation: 'Converts the string to lowercase.',\n  },\n  {\n    label: 'substr',\n    detail: 'substr(string1, x), or substr(string1, x, y)',\n    documentation:\n      'Returns a substring from the index specified by the number argument to the end of the string. If the function has a second number argument, it contains the length of the substring to be retrieved.',\n  },\n  {\n    label: 'replace',\n    detail: 'replace(string1, string2, string3)',\n    documentation: 'Replaces all instances of string2 in string1 with string3.',\n  },\n  {\n    label: 'strcontains',\n    detail: 'strcontains(string1, string2)',\n    documentation: 'Returns 1 if string1 contains string2 and 0 otherwise.',\n  },\n];\n\nexport const DATETIME_FUNCTIONS = [\n  {\n    label: 'bin',\n    detail: 'bin(period)',\n    documentation: 'Rounds the value of @timestamp to the given period and then truncates.',\n  },\n  {\n    label: 'datefloor',\n    detail: 'datefloor(a, period)',\n    documentation: 'Truncates the timestamp to the given period.',\n  },\n  {\n    label: 'dateceil',\n    detail: 'dateceil(a, period)',\n    documentation: 'Rounds up the timestamp to the given period and then truncates.',\n  },\n  {\n    label: 'fromMillis',\n    detail: 'fromMillis(fieldname)',\n    documentation:\n      'Interprets the input field as the number of milliseconds since the Unix epoch and converts it to a timestamp.',\n  },\n  {\n    label: 'toMillis',\n    detail: 'toMillis(fieldname)',\n    documentation:\n      'Converts the timestamp found in the named field into a number representing the milliseconds since the Unix epoch.',\n  },\n];\n\nexport const IP_FUNCTIONS = [\n  {\n    label: 'isValidIp',\n    detail: 'isValidIp(fieldname)',\n    documentation: 'Returns true if the field is a valid v4 or v6 IP address.',\n  },\n  {\n    label: 'isValidIpV4',\n    detail: 'isValidIpV4(fieldname)',\n    documentation: 'Returns true if the field is a valid v4 IP address.',\n  },\n  {\n    label: 'isValidIpV6',\n    detail: 'isValidIpV6(fieldname)',\n    documentation: 'Returns true if the field is a valid v6 IP address.',\n  },\n  {\n    label: 'isIpInSubnet',\n    detail: 'isIpInSubnet(fieldname, string)',\n    documentation: 'Returns true if the field is a valid v4 or v6 IP address within the specified v4 or v6 subnet.',\n  },\n  {\n    label: 'isIpv4InSubnet',\n    detail: 'isIpv4InSubnet(fieldname, string)',\n    documentation: 'Returns true if the field is a valid v4 IP address within the specified v4 subnet.',\n  },\n  {\n    label: 'isIpv6InSubnet',\n    detail: 'isIpv6InSubnet(fieldname, string)',\n    documentation: 'Returns true if the field is a valid v6 IP address within the specified v6 subnet.',\n  },\n];\n\nexport const BOOLEAN_FUNCTIONS = [\n  {\n    label: 'ispresent',\n    detail: 'ispresent(fieldname)',\n    documentation: 'Returns true if the field exists.',\n  },\n  {\n    label: 'isempty',\n    detail: 'isempty(fieldname)',\n    documentation: 'Returns true if the field is missing or is an empty string.',\n  },\n  {\n    label: 'isblank',\n    detail: 'isblank(fieldname)',\n    documentation: 'Returns true if the field is missing, an empty string, or contains only white space.',\n  },\n  {\n    label: 'strcontains',\n    detail: 'strcontains(string1, string2)',\n    documentation: 'Returns 1 if string1 contains string2 and 0 otherwise.',\n  },\n  ...IP_FUNCTIONS,\n];\n\nexport const AGGREGATION_FUNCTIONS_STATS = [\n  {\n    label: 'avg',\n    detail: 'avg(NumericFieldname)',\n    documentation: 'The average of the values in the specified field.',\n  },\n  {\n    label: 'count',\n    detail: 'count(fieldname) or count(*)',\n    documentation: 'Counts the log records.',\n  },\n  {\n    label: 'count_distinct',\n    detail: 'count_distinct(fieldname)',\n    documentation: 'Returns the number of unique values for the field.',\n  },\n  {\n    label: 'max',\n    detail: 'max(fieldname)',\n    documentation: 'The maximum of the values for this log field in the queried logs.',\n  },\n  {\n    label: 'min',\n    detail: 'min(fieldname)',\n    documentation: 'The minimum of the values for this log field in the queried logs.',\n  },\n  {\n    label: 'pct',\n    detail: 'pct(fieldname, value)',\n    documentation: 'A percentile indicates the relative standing of a value in a datas.',\n  },\n  {\n    label: 'stddev',\n    detail: 'stddev(NumericFieldname)',\n    documentation: 'The standard deviation of the values in the specified field.',\n  },\n  {\n    label: 'sum',\n    detail: 'sum(NumericFieldname)',\n    documentation: 'The sum of the values in the specified field.',\n  },\n];\n\nexport const NON_AGGREGATION_FUNCS_STATS = [\n  {\n    label: 'earliest',\n    detail: 'earliest(fieldname)',\n    documentation:\n      'Returns the value of fieldName from the log event that has the earliest time stamp in the queried logs.',\n  },\n  {\n    label: 'latest',\n    detail: 'latest(fieldname)',\n    documentation:\n      'Returns the value of fieldName from the log event that has the latest time stamp in the queried logs.',\n  },\n  {\n    label: 'sortsFirst',\n    detail: 'sortsFirst(fieldname)',\n    documentation: 'Returns the value of fieldName that sorts first in the queried logs.',\n  },\n  {\n    label: 'sortsLast',\n    detail: 'sortsLast(fieldname)',\n    documentation: 'Returns the value of fieldName that sorts last in the queried logs.',\n  },\n];\n\nexport const STATS_FUNCS = [...AGGREGATION_FUNCTIONS_STATS, ...NON_AGGREGATION_FUNCS_STATS];\n\nexport const KEYWORDS = ['as', 'like', 'by', 'in', 'desc', 'asc'];\nexport const FIELD_AND_FILTER_FUNCTIONS = [\n  ...NUMERIC_OPERATORS,\n  ...GENERAL_FUNCTIONS,\n  ...STRING_FUNCTIONS,\n  ...DATETIME_FUNCTIONS,\n  ...IP_FUNCTIONS,\n];\n\nexport const FUNCTIONS = [...FIELD_AND_FILTER_FUNCTIONS, ...STATS_FUNCS];\n\nconst tokenizer: Grammar = {\n  comment: {\n    pattern: /^#.*/,\n    greedy: true,\n  },\n  backticks: {\n    pattern: /`.*?`/,\n    alias: 'string',\n    greedy: true,\n  },\n  quote: {\n    pattern: /\".*?\"/,\n    alias: 'string',\n    greedy: true,\n  },\n  regex: {\n    pattern: /\\/.*?\\/(?=\\||\\s*$|,)/,\n    greedy: true,\n  },\n  'query-command': {\n    pattern: new RegExp(`\\\\b(?:${QUERY_COMMANDS.map((command) => command.label).join('|')})\\\\b`, 'i'),\n    alias: 'function',\n  },\n  function: {\n    pattern: new RegExp(`\\\\b(?:${FUNCTIONS.map((f) => f.label).join('|')})\\\\b`, 'i'),\n  },\n  keyword: {\n    pattern: new RegExp(`(\\\\s+)(${KEYWORDS.join('|')})(?=\\\\s+)`, 'i'),\n    lookbehind: true,\n  },\n  // 'log-group-name': {\n  //   pattern: /[\\.\\-_/#A-Za-z0-9]+/,\n  // },\n  'field-name': {\n    pattern: /(@?[_a-zA-Z]+[_.0-9a-zA-Z]*)|(`((\\\\`)|([^`]))*?`)/,\n    greedy: true,\n  },\n  number: /\\b-?\\d+((\\.\\d*)?([eE][+-]?\\d+)?)?\\b/,\n  'command-separator': {\n    pattern: /\\|/,\n    alias: 'punctuation',\n  },\n  'comparison-operator': {\n    pattern: /([<>]=?)|(!?=)/,\n  },\n  punctuation: /[{}()`,.]/,\n  whitespace: /\\s+/,\n};\n\nexport default tokenizer;\n","const byRE = /\\s+by\\s+/im;\n\n/**\n * groups look like this: (@a.foo)( as )(bar),\n * group 1 is the field, group 2 is \" as \" and group 3 is the alias\n * this regex will not advance past any non-identifier or whitespace characters, e.g. |\n */\nconst groupsRE = /([\\w$@().]+)(?:(\\s+as\\s+)([\\w$]+))?\\s*,?\\s*/iy;\n\nexport function getStatsGroups(query: string): string[] {\n  let groups = [];\n\n  // find \" by \"\n  let b;\n  if ((b = query.match(byRE))) {\n    // continue incremental scanning from there for groups & aliases\n    groupsRE.lastIndex = b.index! + b[0].length;\n\n    let g;\n    while ((g = groupsRE.exec(query))) {\n      groups.push(g[2] ? g[3] : g[1]);\n      groupsRE.lastIndex = g.index + g[0].length;\n    }\n  }\n\n  return groups;\n}\n","import { VariableOption, UserProps, OrgProps, DashboardProps, ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n\n/**\n * @remarks\n * Takes a string array of variables and non-variables and returns a string array with the raw values of the variable(s)\n * A few examples:\n * single-valued variable + non-variable item. ['$singleValuedVariable', 'log-group'] => ['value', 'log-group']\n * multi-valued variable + non-variable item. ['$multiValuedVariable', 'log-group'] => ['value1', 'value2', 'log-group']\n * @param templateSrv - The template service\n * @param strings - The array of strings to interpolate. May contain variables and non-variables.\n * @pararm scopedVars - The scoped variables to use when interpolating the variables.\n * @param key - Allows you to specify whether the variable MetricFindValue.text or MetricFindValue.value should be used when interpolating the variable. Optional, defaults to 'value'.\n **/\nexport const interpolateStringArrayUsingSingleOrMultiValuedVariable = (\n  templateSrv: TemplateSrv,\n  strings: string[],\n  scopedVars: ScopedVars,\n  key?: 'value' | 'text'\n) => {\n  key = key ?? 'value';\n  const format = key === 'value' ? 'pipe' : 'text';\n  let result: string[] = [];\n  for (const string of strings) {\n    const variableName = templateSrv.getVariableName(string);\n    const valueVar = templateSrv.getVariables().find(({ name }) => name === variableName);\n\n    if (valueVar && 'current' in valueVar && isVariableOption(valueVar.current)) {\n      const rawValue = valueVar.current[key];\n      if (Array.isArray(rawValue)) {\n        const separator = format === 'text' ? ' + ' : '|';\n        result.push(...templateSrv.replace(string, scopedVars, format).split(separator));\n      } else if (typeof rawValue === 'string') {\n        result.push(templateSrv.replace(string, scopedVars, format));\n      }\n    } else {\n      // if it's not a variable, just add the raw value\n      result.push(string);\n    }\n  }\n\n  return result;\n};\n\nexport const isTemplateVariable = (templateSrv: TemplateSrv, string: string) => {\n  const variableName = templateSrv.getVariableName(string);\n  return templateSrv.getVariables().some(({ name }) => name === variableName);\n};\n\nconst isVariableOption = (\n  current: VariableOption | { value: UserProps } | { value: OrgProps } | { value: DashboardProps }\n): current is VariableOption => {\n  return current.hasOwnProperty('value') && current.hasOwnProperty('text');\n};\n","import { debounce } from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nimport { Icon, Input } from '@grafana/ui';\n\n// TODO: consider moving search into grafana/ui, this is mostly the same as that in azure monitor\nconst Search = ({ searchFn, searchPhrase }: { searchPhrase: string; searchFn: (searchPhrase: string) => void }) => {\n  const [searchFilter, setSearchFilter] = useState(searchPhrase);\n\n  const debouncedSearch = useMemo(() => debounce(searchFn, 600), [searchFn]);\n\n  useEffect(() => {\n    return () => {\n      // Stop the invocation of the debounced function after unmounting\n      debouncedSearch?.cancel();\n    };\n  }, [debouncedSearch]);\n\n  return (\n    <Input\n      aria-label=\"log group search\"\n      prefix={<Icon name=\"search\" />}\n      value={searchFilter}\n      onChange={(event) => {\n        const searchPhrase = event.currentTarget.value;\n        setSearchFilter(searchPhrase);\n        debouncedSearch(searchPhrase);\n      }}\n      placeholder=\"search by log group name prefix\"\n    />\n  );\n};\n\nexport default Search;\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nexport interface Props {\n  onChange: (accountId?: string) => void;\n  accountOptions: Array<SelectableValue<string>>;\n  accountId?: string;\n}\n\nexport const ALL_ACCOUNTS_OPTION = {\n  label: 'All',\n  value: 'all',\n  description: 'Target all linked accounts',\n};\n\nexport function Account({ accountId, onChange, accountOptions }: Props) {\n  const selectedAccountExistsInOptions = useMemo(\n    () =>\n      accountOptions.find((a) => {\n        if (a.options) {\n          const matchingTemplateVar = a.options.find((tempVar: SelectableValue<string>) => {\n            return tempVar.value === accountId;\n          });\n          return matchingTemplateVar;\n        }\n        return a.value === accountId;\n      }),\n    [accountOptions, accountId]\n  );\n\n  if (accountOptions.length === 0) {\n    return null;\n  }\n\n  return (\n    <EditorField\n      label=\"Account\"\n      width={26}\n      tooltip=\"A CloudWatch monitoring account views data from source accounts so you can centralize monitoring and troubleshooting activities across multiple accounts. Go to the CloudWatch settings page in the AWS console for more details.\"\n    >\n      <Select\n        aria-label=\"Account Selection\"\n        value={selectedAccountExistsInOptions ? accountId : ALL_ACCOUNTS_OPTION.value}\n        options={[ALL_ACCOUNTS_OPTION, ...accountOptions]}\n        onChange={({ value }) => {\n          onChange(value);\n        }}\n      />\n    </EditorField>\n  );\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    width: '100%',\n    tableLayout: 'fixed',\n  }),\n\n  selectedLogGroupsContainer: css({\n    marginLeft: theme.spacing(0.5),\n    marginBottom: theme.spacing(0.5),\n    display: 'flex',\n    flexFlow: 'wrap',\n    gap: theme.spacing(1),\n    button: {\n      margin: 'unset',\n    },\n  }),\n\n  limitLabel: css({\n    color: theme.colors.text.secondary,\n    textAlign: 'center',\n    maxWidth: 'none',\n    svg: {\n      marginRight: theme.spacing(0.5),\n    },\n  }),\n\n  logGroupCountLabel: css({\n    color: theme.colors.text.secondary,\n    maxWidth: 'none',\n  }),\n\n  tableScroller: css({\n    maxHeight: '40vh',\n    overflow: 'auto',\n  }),\n\n  row: css({\n    borderBottom: `1px solid ${theme.colors.border.weak}`,\n\n    '&:last-of-type': {\n      borderBottomColor: theme.colors.border.medium,\n    },\n  }),\n\n  cell: css({\n    padding: theme.spacing(1, 1, 1, 0),\n    width: '25%',\n    '&:first-of-type': {\n      width: '80%',\n      padding: theme.spacing(1, 1, 1, 2),\n    },\n  }),\n\n  nestedEntry: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n\n  logGroupSearchResults: css({\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    width: '90%',\n    verticalAlign: 'middle',\n  }),\n\n  modal: css({\n    width: theme.breakpoints.values.lg,\n  }),\n\n  selectAccountId: css({\n    maxWidth: '100px',\n  }),\n\n  logGroupSelectionArea: css({\n    display: 'flex',\n  }),\n\n  searchField: css({\n    width: '100%',\n    marginRight: theme.spacing(1),\n  }),\n\n  resultLimit: css({\n    margin: '4px 0',\n    fontStyle: 'italic',\n  }),\n\n  removeButton: css({\n    verticalAlign: 'middle',\n    marginLeft: theme.spacing(0.5),\n  }),\n\n  addBtn: css({\n    marginRight: '10px',\n  }),\n});\n\nexport default getStyles;\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, Space } from '@grafana/experimental';\nimport { Button, Checkbox, Icon, Label, LoadingPlaceholder, Modal, Select, useStyles2 } from '@grafana/ui';\n\nimport Search from '../../Search';\nimport { DescribeLogGroupsRequest, ResourceResponse, LogGroupResponse } from '../../resources/types';\nimport { LogGroup } from '../../types';\nimport { Account, ALL_ACCOUNTS_OPTION } from '../Account';\nimport getStyles from '../styles';\n\ntype CrossAccountLogsQueryProps = {\n  selectedLogGroups?: LogGroup[];\n  accountOptions?: Array<SelectableValue<string>>;\n  fetchLogGroups: (params: Partial<DescribeLogGroupsRequest>) => Promise<Array<ResourceResponse<LogGroupResponse>>>;\n  variables?: string[];\n  onChange: (selectedLogGroups: LogGroup[]) => void;\n  onBeforeOpen?: () => void;\n};\n\nexport const LogGroupsSelector = ({\n  accountOptions = [],\n  variables = [],\n  fetchLogGroups,\n  onChange,\n  onBeforeOpen,\n  ...props\n}: CrossAccountLogsQueryProps) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectableLogGroups, setSelectableLogGroups] = useState<LogGroup[]>([]);\n  const [selectedLogGroups, setSelectedLogGroups] = useState(props.selectedLogGroups ?? []);\n  const [searchPhrase, setSearchPhrase] = useState('');\n  const [searchAccountId, setSearchAccountId] = useState(ALL_ACCOUNTS_OPTION.value);\n  const [isLoading, setIsLoading] = useState(false);\n  const styles = useStyles2(getStyles);\n  const selectedLogGroupsCounter = useMemo(\n    () => selectedLogGroups.filter((lg) => !lg.name?.startsWith('$')).length,\n    [selectedLogGroups]\n  );\n  const variableOptions = useMemo(() => variables.map((v) => ({ label: v, value: v })), [variables]);\n  const selectedVariable = useMemo(\n    () => selectedLogGroups.find((lg) => lg.name?.startsWith('$'))?.name,\n    [selectedLogGroups]\n  );\n  const currentVariableOption = {\n    label: selectedVariable,\n    value: selectedVariable,\n  };\n\n  useEffect(() => {\n    setSelectedLogGroups(props.selectedLogGroups ?? []);\n  }, [props.selectedLogGroups]);\n\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n    if (isModalOpen) {\n    } else {\n      setSelectedLogGroups(selectedLogGroups);\n      searchFn(searchPhrase, searchAccountId);\n    }\n  };\n\n  const accountNameById = useMemo(() => {\n    const idsToNames: Record<string, string> = {};\n    accountOptions.forEach((a) => {\n      if (a.value && a.label) {\n        idsToNames[a.value] = a.label;\n      }\n    });\n    return idsToNames;\n  }, [accountOptions]);\n\n  const searchFn = async (searchTerm?: string, accountId?: string) => {\n    setIsLoading(true);\n    try {\n      const possibleLogGroups = await fetchLogGroups({\n        logGroupPattern: searchTerm,\n        accountId: accountId,\n      });\n      setSelectableLogGroups(\n        possibleLogGroups.map((lg) => ({\n          arn: lg.value.arn,\n          name: lg.value.name,\n          accountId: lg.accountId,\n          accountLabel: lg.accountId ? accountNameById[lg.accountId] : undefined,\n        }))\n      );\n    } catch (err) {\n      setSelectableLogGroups([]);\n    }\n    setIsLoading(false);\n  };\n\n  const handleSelectCheckbox = (row: LogGroup, isChecked: boolean) => {\n    if (isChecked) {\n      setSelectedLogGroups([...selectedLogGroups, row]);\n    } else {\n      setSelectedLogGroups(selectedLogGroups.filter((lg) => lg.arn !== row.arn));\n    }\n  };\n\n  const handleApply = () => {\n    onChange(selectedLogGroups);\n    toggleModal();\n  };\n\n  const handleCancel = () => {\n    setSelectedLogGroups(selectedLogGroups);\n    toggleModal();\n  };\n\n  return (\n    <>\n      <Modal className={styles.modal} title=\"Select Log Groups\" isOpen={isModalOpen} onDismiss={toggleModal}>\n        <div className={styles.logGroupSelectionArea}>\n          <div className={styles.searchField}>\n            <EditorField label=\"Log group name prefix\">\n              <Search\n                searchFn={(phrase) => {\n                  searchFn(phrase, searchAccountId);\n                  setSearchPhrase(phrase);\n                }}\n                searchPhrase={searchPhrase}\n              />\n            </EditorField>\n          </div>\n\n          <Account\n            onChange={(accountId?: string) => {\n              searchFn(searchPhrase, accountId);\n              setSearchAccountId(accountId || ALL_ACCOUNTS_OPTION.value);\n            }}\n            accountOptions={accountOptions}\n            accountId={searchAccountId}\n          />\n        </div>\n        <Space layout=\"block\" v={2} />\n        <div>\n          {!isLoading && selectableLogGroups.length >= 25 && (\n            <>\n              <Label className={styles.limitLabel}>\n                <Icon name=\"info-circle\"></Icon>\n                Only the first 50 results can be shown. If you do not see an expected log group, try narrowing down your\n                search.\n              </Label>\n              <Space layout=\"block\" v={1} />\n            </>\n          )}\n          <div className={styles.tableScroller}>\n            <table className={styles.table}>\n              <thead>\n                <tr className={styles.row}>\n                  <td className={styles.cell}>Log Group</td>\n                  {accountOptions.length > 0 && <td className={styles.cell}>Account label</td>}\n                  <td className={styles.cell}>Account ID</td>\n                </tr>\n              </thead>\n              <tbody>\n                {isLoading && (\n                  <tr className={styles.row}>\n                    <td className={styles.cell}>\n                      <LoadingPlaceholder text={'Loading...'} />\n                    </td>\n                  </tr>\n                )}\n                {!isLoading && selectableLogGroups.length === 0 && (\n                  <tr className={styles.row}>\n                    <td className={styles.cell}>No log groups found</td>\n                  </tr>\n                )}\n                {!isLoading &&\n                  selectableLogGroups.map((row) => (\n                    <tr className={styles.row} key={`${row.arn}`}>\n                      <td className={styles.cell}>\n                        <div className={styles.nestedEntry}>\n                          <Checkbox\n                            id={row.arn}\n                            onChange={(ev) => handleSelectCheckbox(row, ev.currentTarget.checked)}\n                            value={!!(row.arn && selectedLogGroups.some((lg) => lg.arn === row.arn))}\n                          />\n                          <Space layout=\"inline\" h={2} />\n                          <label className={styles.logGroupSearchResults} htmlFor={row.arn} title={row.name}>\n                            {row.name}\n                          </label>\n                        </div>\n                      </td>\n                      {accountOptions.length > 0 && <td className={styles.cell}>{row.accountLabel}</td>}\n                      <td className={styles.cell}>{row.accountId}</td>\n                    </tr>\n                  ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n        <Space layout=\"block\" v={2} />\n        <Label className={styles.logGroupCountLabel}>\n          {selectedLogGroupsCounter} log group{selectedLogGroupsCounter !== 1 && 's'} selected\n        </Label>\n        <Space layout=\"block\" v={1} />\n        <EditorField\n          label=\"Template variable\"\n          width={26}\n          tooltip=\"Optionally you can specify a single or multi-valued template variable. Select a variable separately or in conjunction with log groups.\"\n        >\n          <Select\n            isClearable\n            aria-label=\"Template variable\"\n            value={currentVariableOption}\n            allowCustomValue\n            options={variableOptions}\n            onChange={(option) => {\n              const newValues = selectedLogGroups.filter((lg) => !lg.name?.startsWith('$'));\n              if (option?.label) {\n                newValues.push({ name: option.label, arn: option.label });\n              }\n              setSelectedLogGroups(newValues);\n            }}\n          />\n        </EditorField>\n        <Space layout=\"block\" v={2} />\n        <div>\n          <Button onClick={handleApply} type=\"button\" className={styles.addBtn}>\n            Add log groups\n          </Button>\n          <Button onClick={handleCancel} variant=\"secondary\" type=\"button\">\n            Cancel\n          </Button>\n        </div>\n      </Modal>\n\n      <div>\n        <Button\n          variant=\"secondary\"\n          onClick={() => {\n            try {\n              onBeforeOpen?.();\n              toggleModal();\n            } catch (err) {}\n          }}\n          type=\"button\"\n        >\n          Select Log Groups\n        </Button>\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { Button, ConfirmModal, useStyles2 } from '@grafana/ui';\n\nimport { LogGroup } from '../../types';\nimport getStyles from '../styles';\n\ntype CrossAccountLogsQueryProps = {\n  selectedLogGroups?: LogGroup[];\n  onChange: (selectedLogGroups: LogGroup[]) => void;\n  maxNoOfVisibleLogGroups?: number;\n};\n\nconst MAX_NO_OF_VISIBLE_LOG_GROUPS = 6;\n\nexport const SelectedLogGroups = ({\n  selectedLogGroups = [],\n  onChange,\n  maxNoOfVisibleLogGroups = MAX_NO_OF_VISIBLE_LOG_GROUPS,\n}: CrossAccountLogsQueryProps) => {\n  const styles = useStyles2(getStyles);\n  const [showConfirm, setShowConfirm] = useState(false);\n  const [visibleSelectecLogGroups, setVisibleSelectecLogGroups] = useState(\n    selectedLogGroups.slice(0, MAX_NO_OF_VISIBLE_LOG_GROUPS)\n  );\n\n  useEffect(() => {\n    setVisibleSelectecLogGroups(selectedLogGroups.slice(0, maxNoOfVisibleLogGroups));\n  }, [selectedLogGroups, maxNoOfVisibleLogGroups]);\n\n  return (\n    <>\n      <div className={styles.selectedLogGroupsContainer}>\n        {visibleSelectecLogGroups.map((lg) => (\n          <Button\n            key={lg.arn}\n            size=\"sm\"\n            variant=\"secondary\"\n            icon=\"times\"\n            className={styles.removeButton}\n            onClick={() => {\n              onChange(selectedLogGroups.filter((slg) => slg.arn !== lg.arn));\n            }}\n          >\n            {`${lg.name}${lg.accountLabel ? `(${lg.accountLabel})` : ''}`}\n          </Button>\n        ))}\n        {visibleSelectecLogGroups.length !== selectedLogGroups.length && (\n          <Button\n            size=\"sm\"\n            variant=\"secondary\"\n            icon=\"plus\"\n            fill=\"outline\"\n            className={styles.removeButton}\n            onClick={() => setVisibleSelectecLogGroups(selectedLogGroups)}\n          >\n            Show all\n          </Button>\n        )}\n        {selectedLogGroups.length > 0 && (\n          <Button\n            size=\"sm\"\n            variant=\"secondary\"\n            icon=\"times\"\n            fill=\"outline\"\n            className={styles.removeButton}\n            onClick={() => setShowConfirm(true)}\n          >\n            Clear selection\n          </Button>\n        )}\n      </div>\n      <ConfirmModal\n        isOpen={showConfirm}\n        title=\"Clear Log Group Selection\"\n        body=\"Are you sure you want to clear all log groups?\"\n        confirmText=\"Yes\"\n        dismissText=\"No\"\n        icon=\"exclamation-triangle\"\n        onConfirm={() => {\n          setShowConfirm(false);\n          onChange([]);\n        }}\n        onDismiss={() => setShowConfirm(false)}\n      />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { useAccountOptions } from '../../hooks';\nimport { DescribeLogGroupsRequest } from '../../resources/types';\nimport { LogGroup } from '../../types';\nimport { isTemplateVariable } from '../../utils/templateVariableUtils';\n\nimport { LogGroupsSelector } from './LogGroupsSelector';\nimport { SelectedLogGroups } from './SelectedLogGroups';\n\ntype Props = {\n  datasource?: CloudWatchDatasource;\n  onChange: (logGroups: LogGroup[]) => void;\n  legacyLogGroupNames?: string[];\n  logGroups?: LogGroup[];\n  region: string;\n  maxNoOfVisibleLogGroups?: number;\n  onBeforeOpen?: () => void;\n};\n\nconst rowGap = css`\n  gap: 3px;\n`;\n\nexport const LogGroupsField = ({\n  datasource,\n  onChange,\n  legacyLogGroupNames,\n  logGroups,\n  region,\n  maxNoOfVisibleLogGroups,\n  onBeforeOpen,\n}: Props) => {\n  const accountState = useAccountOptions(datasource?.resources, region);\n  const [loadingLogGroupsStarted, setLoadingLogGroupsStarted] = useState(false);\n\n  useEffect(() => {\n    // If log group names are stored in the query model, make a new DescribeLogGroups request for each log group to load the arn. Then update the query model.\n    if (datasource && !loadingLogGroupsStarted && !logGroups?.length && legacyLogGroupNames?.length) {\n      setLoadingLogGroupsStarted(true);\n\n      // there's no need to migrate variables, they will be taken care of in the logs query runner\n      const variables = legacyLogGroupNames.filter((lgn) => isTemplateVariable(datasource.resources.templateSrv, lgn));\n      const legacyLogGroupNameValues = legacyLogGroupNames.filter(\n        (lgn) => !isTemplateVariable(datasource.resources.templateSrv, lgn)\n      );\n\n      Promise.all(\n        legacyLogGroupNameValues.map((lg) =>\n          datasource.resources.getLogGroups({ region: region, logGroupNamePrefix: lg })\n        )\n      )\n        .then((results) => {\n          const logGroups = results.flatMap((r) =>\n            r.map((lg) => ({\n              arn: lg.value.arn,\n              name: lg.value.name,\n              accountId: lg.accountId,\n            }))\n          );\n\n          onChange([...logGroups, ...variables.map((v) => ({ name: v, arn: v }))]);\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    }\n  }, [datasource, legacyLogGroupNames, logGroups, onChange, region, loadingLogGroupsStarted]);\n\n  return (\n    <div className={`gf-form gf-form--grow flex-grow-1 ${rowGap}`}>\n      <LogGroupsSelector\n        fetchLogGroups={async (params: Partial<DescribeLogGroupsRequest>) =>\n          datasource?.resources.getLogGroups({ region: region, ...params }) ?? []\n        }\n        onChange={onChange}\n        accountOptions={accountState.value}\n        selectedLogGroups={logGroups}\n        onBeforeOpen={onBeforeOpen}\n        variables={datasource?.getVariables()}\n      />\n      <SelectedLogGroups\n        selectedLogGroups={logGroups ?? []}\n        onChange={onChange}\n        maxNoOfVisibleLogGroups={maxNoOfVisibleLogGroups}\n      ></SelectedLogGroups>\n    </div>\n  );\n};\n","import { LanguageMap, languages as prismLanguages } from 'prismjs';\nimport React, { ReactNode } from 'react';\nimport { Node, Plugin } from 'slate';\nimport { Editor } from 'slate-react';\n\nimport { AbsoluteTimeRange, QueryEditorProps } from '@grafana/data';\nimport {\n  BracesPlugin,\n  QueryField,\n  SlatePrism,\n  Themeable2,\n  TypeaheadInput,\n  TypeaheadOutput,\n  withTheme2,\n} from '@grafana/ui';\nimport { ExploreId } from 'app/types';\n\n// Utils & Services\n// dom also includes Element polyfills\nimport { CloudWatchDatasource } from '../datasource';\nimport syntax from '../language/cloudwatch-logs/syntax';\nimport { CloudWatchJsonData, CloudWatchLogsQuery, CloudWatchQuery } from '../types';\nimport { getStatsGroups } from '../utils/query/getStatsGroups';\n\nimport { LogGroupsField } from './LogGroups/LogGroupsField';\n\nexport interface CloudWatchLogsQueryFieldProps\n  extends QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>,\n    Themeable2 {\n  absoluteRange: AbsoluteTimeRange;\n  onLabelsRefresh?: () => void;\n  ExtraFieldElement?: ReactNode;\n  exploreId: ExploreId;\n  query: CloudWatchLogsQuery;\n}\nconst plugins: Array<Plugin<Editor>> = [\n  BracesPlugin(),\n  SlatePrism(\n    {\n      onlyIn: (node: Node) => node.object === 'block' && node.type === 'code_block',\n      getSyntax: (node: Node) => 'cloudwatch',\n    },\n    { ...(prismLanguages as LanguageMap), cloudwatch: syntax }\n  ),\n];\nexport const CloudWatchLogsQueryField = (props: CloudWatchLogsQueryFieldProps) => {\n  const { query, datasource, onChange, ExtraFieldElement, data } = props;\n\n  const showError = data?.error?.refId === query.refId;\n  const cleanText = datasource.languageProvider.cleanText;\n\n  const onChangeQuery = (value: string) => {\n    // Send text change to parent\n    const nextQuery = {\n      ...query,\n      expression: value,\n      statsGroups: getStatsGroups(value),\n    };\n    onChange(nextQuery);\n  };\n\n  const onTypeahead = async (typeahead: TypeaheadInput): Promise<TypeaheadOutput> => {\n    const { datasource, query } = props;\n    const { logGroups } = query;\n\n    if (!datasource.languageProvider) {\n      return { suggestions: [] };\n    }\n\n    const { history, absoluteRange } = props;\n    const { prefix, text, value, wrapperClasses, labelKey, editor } = typeahead;\n\n    return await datasource.languageProvider.provideCompletionItems(\n      { text, value, prefix, wrapperClasses, labelKey, editor },\n      {\n        history,\n        absoluteRange,\n        logGroups: logGroups,\n        region: query.region,\n      }\n    );\n  };\n\n  return (\n    <>\n      <LogGroupsField\n        region={query.region}\n        datasource={datasource}\n        legacyLogGroupNames={query.logGroupNames}\n        logGroups={query.logGroups}\n        onChange={(logGroups) => {\n          onChange({ ...query, logGroups, logGroupNames: undefined });\n        }}\n      />\n      <div className=\"gf-form-inline gf-form-inline--nowrap flex-grow-1\">\n        <div className=\"gf-form gf-form--grow flex-shrink-1\">\n          <QueryField\n            additionalPlugins={plugins}\n            query={query.expression ?? ''}\n            onChange={onChangeQuery}\n            onTypeahead={onTypeahead}\n            cleanText={cleanText}\n            placeholder=\"Enter a CloudWatch Logs Insights query (run with Shift+Enter)\"\n            portalOrigin=\"cloudwatch\"\n            // By default QueryField calls onChange if onBlur is not defined, this will trigger a rerender\n            // And slate will claim the focus, making it impossible to leave the field.\n            onBlur={() => {}}\n          />\n        </div>\n        {ExtraFieldElement}\n      </div>\n      {showError ? (\n        <div className=\"query-row-break\">\n          <div className=\"prom-query-field-info text-error\">{data?.error?.message}</div>\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport default withTheme2(CloudWatchLogsQueryField);\n","// Libraries\nimport { css } from '@emotion/css';\nimport React, { memo } from 'react';\n\nimport { AbsoluteTimeRange, QueryEditorProps } from '@grafana/data';\nimport { InlineFormLabel } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchJsonData, CloudWatchLogsQuery, CloudWatchQuery } from '../types';\n\nimport { CloudWatchLink } from './CloudWatchLink';\nimport CloudWatchLogsQueryField from './LogsQueryField';\n\ntype Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData> & {\n  query: CloudWatchLogsQuery;\n};\n\nconst labelClass = css`\n  margin-left: 3px;\n  flex-grow: 0;\n`;\n\nexport const CloudWatchLogsQueryEditor = memo(function CloudWatchLogsQueryEditor(props: Props) {\n  const { query, data, datasource, exploreId } = props;\n\n  let absolute: AbsoluteTimeRange;\n  if (data?.request?.range?.from) {\n    const { range } = data.request;\n    absolute = {\n      from: range.from.valueOf(),\n      to: range.to.valueOf(),\n    };\n  } else {\n    absolute = {\n      from: Date.now() - 10000,\n      to: Date.now(),\n    };\n  }\n\n  return (\n    <CloudWatchLogsQueryField\n      {...props}\n      exploreId={exploreId}\n      history={[]}\n      absoluteRange={absolute}\n      ExtraFieldElement={\n        <InlineFormLabel className={`gf-form-label--btn ${labelClass}`} width=\"auto\" tooltip=\"Link to Graph in AWS\">\n          <CloudWatchLink query={query as CloudWatchLogsQuery} panelData={data} datasource={datasource} />\n        </InlineFormLabel>\n      }\n    />\n  );\n});\n\nexport default CloudWatchLogsQueryEditor;\n","import deepEqual from 'fast-deep-equal';\n\nimport { config } from '@grafana/runtime';\n\nimport { CloudWatchMetricsQuery } from '../types';\n\n// Call this function to migrate queries from within the plugin.\nexport function migrateMetricQuery(query: CloudWatchMetricsQuery): CloudWatchMetricsQuery {\n  //add metric query migrations here\n  const migratedQuery = migrateAliasPatterns(query);\n  return deepEqual(migratedQuery, query) ? query : migratedQuery;\n}\n\nconst aliasPatterns: Record<string, string> = {\n  metric: `PROP('MetricName')`,\n  namespace: `PROP('Namespace')`,\n  period: `PROP('Period')`,\n  region: `PROP('Region')`,\n  stat: `PROP('Stat')`,\n  label: `LABEL`,\n};\n\nexport function migrateAliasPatterns(query: CloudWatchMetricsQuery): CloudWatchMetricsQuery {\n  if (config.featureToggles.cloudWatchDynamicLabels && !query.hasOwnProperty('label')) {\n    const newQuery = { ...query };\n    if (!query.hasOwnProperty('label')) {\n      const regex = /{{\\s*(.+?)\\s*}}/g;\n      newQuery.label =\n        query.alias?.replace(regex, (_, value) => {\n          if (aliasPatterns.hasOwnProperty(value)) {\n            return `\\${${aliasPatterns[value]}}`;\n          }\n\n          return `\\${PROP('Dim.${value}')}`;\n        }) ?? '';\n    }\n    return newQuery;\n  }\n  return query;\n}\n","import { useEffect, useMemo } from 'react';\n\nimport { CloudWatchMetricsQuery } from '../types';\n\nimport { migrateMetricQuery } from './metricQueryMigrations';\n\n/**\n * Returns queries with migrations, and calls onChange function to notify if it changes\n */\nconst useMigratedMetricsQuery = (\n  query: CloudWatchMetricsQuery,\n  onChangeQuery: (newQuery: CloudWatchMetricsQuery) => void\n) => {\n  const migratedQUery = useMemo(() => migrateMetricQuery(query), [query]);\n\n  useEffect(() => {\n    if (migratedQUery !== query) {\n      onChangeQuery(migratedQUery);\n    }\n  }, [migratedQUery, query, onChangeQuery]);\n\n  return migratedQUery;\n};\n\nexport default useMigratedMetricsQuery;\n","import { monacoTypes } from '@grafana/ui';\n\nimport { TokenTypes } from './types';\n\nexport class LinkedToken {\n  constructor(\n    public type: string,\n    public value: string,\n    public range: monacoTypes.IRange,\n    public previous: LinkedToken | null,\n    public next: LinkedToken | null,\n    public tokenTypes: TokenTypes\n  ) {}\n\n  isKeyword(): boolean {\n    return this.type === this.tokenTypes.Keyword;\n  }\n\n  isWhiteSpace(): boolean {\n    return this.type === this.tokenTypes.Whitespace;\n  }\n\n  isParenthesis(): boolean {\n    return this.type === this.tokenTypes.Parenthesis;\n  }\n\n  isIdentifier(): boolean {\n    return this.type === this.tokenTypes.Identifier;\n  }\n\n  isString(): boolean {\n    return this.type === this.tokenTypes.String;\n  }\n\n  isDoubleQuotedString(): boolean {\n    return this.type === this.tokenTypes.Type;\n  }\n\n  isVariable(): boolean {\n    return this.type === this.tokenTypes.Variable;\n  }\n\n  isFunction(): boolean {\n    return this.type === this.tokenTypes.Function;\n  }\n\n  isNumber(): boolean {\n    return this.type === this.tokenTypes.Number;\n  }\n\n  is(type: string, value?: string | number | boolean): boolean {\n    const isType = this.type === type;\n    return value !== undefined ? isType && this.value === value : isType;\n  }\n\n  endsWith(value: string | number | boolean): boolean {\n    return this.value === value || this.value[this.value.length - 1] === value;\n  }\n\n  getPreviousNonWhiteSpaceToken(): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      if (!curr.isWhiteSpace()) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getPreviousOfType(type: string, value?: string): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getPreviousUntil(type: string, ignoreTypes: string[], value?: string): LinkedToken[] | null {\n    let tokens: LinkedToken[] = [];\n    let curr = this.previous;\n    while (curr != null) {\n      if (ignoreTypes.some((t) => t === curr?.type)) {\n        curr = curr.previous;\n        continue;\n      }\n\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return tokens;\n      }\n      if (!curr.isWhiteSpace()) {\n        tokens.push(curr);\n      }\n      curr = curr.previous;\n    }\n\n    return tokens;\n  }\n\n  getNextUntil(type: string, ignoreTypes: string[], value?: string): LinkedToken[] | null {\n    let tokens: LinkedToken[] = [];\n    let curr = this.next;\n    while (curr != null) {\n      if (ignoreTypes.some((t) => t === curr?.type)) {\n        curr = curr.next;\n        continue;\n      }\n\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return tokens;\n      }\n      if (!curr.isWhiteSpace()) {\n        tokens.push(curr);\n      }\n      curr = curr.next;\n    }\n\n    return tokens;\n  }\n\n  getPreviousKeyword(): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      if (curr.isKeyword()) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getNextNonWhiteSpaceToken(): LinkedToken | null {\n    let curr = this.next;\n    while (curr != null) {\n      if (!curr.isWhiteSpace()) {\n        return curr;\n      }\n      curr = curr.next;\n    }\n    return null;\n  }\n\n  getNextOfType(type: string, value?: string): LinkedToken | null {\n    let curr = this.next;\n    while (curr != null) {\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return curr;\n      }\n      curr = curr.next;\n    }\n    return null;\n  }\n}\n","import type { monacoTypes } from '@grafana/ui';\n\nimport { LinkedToken } from './LinkedToken';\nimport { LanguageDefinition } from './register';\nimport { Monaco, TokenTypes } from './types';\n\nexport function linkedTokenBuilder(\n  monaco: Monaco,\n  language: LanguageDefinition,\n  model: monacoTypes.editor.ITextModel,\n  position: monacoTypes.IPosition,\n  tokenTypes: TokenTypes\n) {\n  let current: LinkedToken | null = null;\n  let previous: LinkedToken | null = null;\n  const tokensPerLine = monaco.editor.tokenize(model.getValue() ?? '', language.id);\n\n  for (let lineIndex = 0; lineIndex < tokensPerLine.length; lineIndex++) {\n    const tokens = tokensPerLine[lineIndex];\n    // In case position is first column in new line, add empty whitespace token so that links are not broken\n    if (!tokens.length && previous) {\n      const token: monacoTypes.Token = {\n        offset: 0,\n        type: tokenTypes.Whitespace,\n        language: language.id,\n        _tokenBrand: undefined,\n      };\n      tokens.push(token);\n    }\n\n    for (let columnIndex = 0; columnIndex < tokens.length; columnIndex++) {\n      const token = tokens[columnIndex];\n      let endColumn =\n        tokens.length > columnIndex + 1 ? tokens[columnIndex + 1].offset + 1 : model.getLineLength(lineIndex + 1) + 1;\n\n      const range: monacoTypes.IRange = {\n        startLineNumber: lineIndex + 1,\n        startColumn: token.offset === 0 ? 0 : token.offset + 1,\n        endLineNumber: lineIndex + 1,\n        endColumn,\n      };\n\n      const value = model.getValueInRange(range);\n      const newToken: LinkedToken = new LinkedToken(token.type, value, range, previous, null, tokenTypes);\n\n      if (monaco.Range.containsPosition(range, position)) {\n        current = newToken;\n      }\n\n      if (previous) {\n        previous.next = newToken;\n      }\n      previous = newToken;\n    }\n  }\n\n  return current;\n}\n","import { monacoTypes } from '@grafana/ui';\n\nimport { LanguageDefinition } from './register';\n\nexport interface TokenTypes {\n  Parenthesis: string;\n  Whitespace: string;\n  Keyword: string;\n  Delimiter: string;\n  Operator: string;\n  Identifier: string;\n  Type: string;\n  Function: string;\n  Number: string;\n  String: string;\n  Variable: string;\n}\n\nexport enum StatementPosition {\n  Unknown,\n  // sql\n  SelectKeyword,\n  AfterSelectKeyword,\n  AfterSelectFuncFirstArgument,\n  AfterFromKeyword,\n  SchemaFuncFirstArgument,\n  SchemaFuncExtraArgument,\n  FromKeyword,\n  AfterFrom,\n  WhereKey,\n  WhereComparisonOperator,\n  WhereValue,\n  AfterWhereValue,\n  AfterGroupByKeywords,\n  AfterGroupBy,\n  AfterOrderByKeywords,\n  AfterOrderByFunction,\n  AfterOrderByDirection,\n  // metric math\n  PredefinedFunction,\n  SearchFuncSecondArg,\n  SearchFuncThirdArg,\n  PredefinedFuncSecondArg,\n  AfterFunction,\n  WithinString,\n}\n\nexport enum SuggestionKind {\n  SelectKeyword,\n  FunctionsWithArguments,\n  Metrics,\n  FromKeyword,\n  SchemaKeyword,\n  Namespaces,\n  LabelKeys,\n  WhereKeyword,\n  GroupByKeywords,\n  OrderByKeywords,\n  FunctionsWithoutArguments,\n  LimitKeyword,\n  SortOrderDirectionKeyword,\n  ComparisonOperators,\n  LabelValues,\n  LogicalOperators,\n\n  // metricmath,\n  KeywordArguments,\n  Operators,\n  Statistic,\n  Period,\n}\n\nexport enum CompletionItemPriority {\n  High = 'a',\n  MediumHigh = 'd',\n  Medium = 'g',\n  MediumLow = 'k',\n  Low = 'q',\n}\n\nexport interface Editor {\n  tokenize: (value: string, languageId: string) => monacoTypes.Token[][];\n}\n\nexport interface Range {\n  containsPosition: (range: monacoTypes.IRange, position: monacoTypes.IPosition) => boolean;\n  fromPositions: (start: monacoTypes.IPosition, end?: monacoTypes.IPosition) => monacoTypes.Range;\n}\n\nexport interface Languages {\n  CompletionItemInsertTextRule: {\n    InsertAsSnippet: 4;\n  };\n  CompletionItemKind: {\n    Function: 1;\n  };\n}\nexport interface Monaco {\n  editor: Editor;\n  Range: Range;\n  languages: Languages;\n}\n\nexport interface Completeable {\n  getCompletionProvider(\n    monaco: Monaco,\n    languageDefinition: LanguageDefinition\n  ): monacoTypes.languages.CompletionItemProvider;\n}\n","import type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { linkedTokenBuilder } from '../monarch/linkedTokenBuilder';\nimport { LanguageDefinition } from '../monarch/register';\nimport { Completeable, CompletionItemPriority, TokenTypes } from '../monarch/types';\n\nimport { DYNAMIC_LABEL_PATTERNS } from './language';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class DynamicLabelsCompletionItemProvider implements Completeable {\n  tokenTypes: TokenTypes;\n\n  constructor() {\n    this.tokenTypes = {\n      Parenthesis: 'delimiter.parenthesis.cloudwatch-dynamicLabels',\n      Whitespace: 'white.cloudwatch-dynamicLabels',\n      Keyword: 'keyword.cloudwatch-dynamicLabels',\n      Delimiter: 'delimiter.cloudwatch-dynamicLabels',\n      Operator: 'operator.cloudwatch-dynamicLabels',\n      Identifier: 'identifier.cloudwatch-dynamicLabels',\n      Type: 'type.cloudwatch-dynamicLabels',\n      Function: 'predefined.cloudwatch-dynamicLabels',\n      Number: 'number.cloudwatch-dynamicLabels',\n      String: 'string.cloudwatch-dynamicLabels',\n      Variable: 'variable.cloudwatch-dynamicLabels',\n    };\n  }\n\n  // called by registerLanguage and passed to monaco with registerCompletionItemProvider\n  // returns an object that implements https://microsoft.github.io/monaco-editor/api/interfaces/monaco.languages.CompletionItemProvider.html\n  getCompletionProvider(monaco: Monaco, languageDefinition: LanguageDefinition) {\n    return {\n      triggerCharacters: [' ', '$', ',', '(', \"'\"], // one of these characters indicates that it is time to look for a suggestion\n      provideCompletionItems: async (model: monacoTypes.editor.ITextModel, position: monacoTypes.IPosition) => {\n        const currentToken = linkedTokenBuilder(monaco, languageDefinition, model, position, this.tokenTypes);\n        const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n        const range =\n          invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n        const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n          const item: CompletionItem = {\n            label: value,\n            insertText: value,\n            kind: monaco.languages.CompletionItemKind.Field,\n            range,\n            sortText: CompletionItemPriority.Medium,\n            ...rest,\n          };\n          return item;\n        };\n        let suggestions: CompletionItem[] = [];\n        const next = currentToken?.next;\n        if (!currentToken?.isFunction() && (!next || next.isWhiteSpace())) {\n          suggestions = DYNAMIC_LABEL_PATTERNS.map((val) => toCompletionItem(val));\n          // always insert suggestion for dimension value and allow user to complete pattern by providing the dimension name\n          suggestions.push(\n            toCompletionItem(\"${PROP('Dim.')}\", {\n              sortText: CompletionItemPriority.High,\n              insertText: `\\${PROP('Dim.$0')} `,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            })\n          );\n        }\n\n        return {\n          suggestions,\n        };\n      },\n    };\n  }\n}\n","import { LanguageDefinition } from '../monarch/register';\n\nconst cloudWatchDynamicLabelsLanguageDefinition: LanguageDefinition = {\n  id: 'cloudwatch-dynamicLabels',\n  extensions: [],\n  aliases: [],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default cloudWatchDynamicLabelsLanguageDefinition;\n","export const TRIGGER_SUGGEST = {\n  id: 'editor.action.triggerSuggest',\n  title: '',\n};\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport { Monaco } from '@grafana/ui';\n\nimport { Completeable } from './types';\n\nexport type LanguageDefinition = {\n  id: string;\n  extensions: string[];\n  aliases: string[];\n  mimetypes: string[];\n  loader: () => Promise<{\n    language: monacoType.languages.IMonarchLanguage;\n    conf: monacoType.languages.LanguageConfiguration;\n  }>;\n};\n\nexport const registerLanguage = (\n  monaco: Monaco,\n  language: LanguageDefinition,\n  completionItemProvider: Completeable\n) => {\n  const { id, loader } = language;\n\n  const languages = monaco.languages.getLanguages();\n  if (languages.find((l) => l.id === id)) {\n    return;\n  }\n\n  monaco.languages.register({ id });\n  loader().then((monarch) => {\n    monaco.languages.setMonarchTokensProvider(id, monarch.language);\n    monaco.languages.setLanguageConfiguration(id, monarch.conf);\n    monaco.languages.registerCompletionItemProvider(id, completionItemProvider.getCompletionProvider(monaco, language));\n  });\n};\n","import { css, cx } from '@emotion/css';\nimport type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\nimport React, { useCallback, useRef } from 'react';\n\nimport { CodeEditor, getInputStyles, Monaco, useTheme2 } from '@grafana/ui';\n\nimport { DynamicLabelsCompletionItemProvider } from '../language/dynamic-labels/CompletionItemProvider';\nimport language from '../language/dynamic-labels/definition';\nimport { TRIGGER_SUGGEST } from '../language/monarch/commands';\nimport { registerLanguage } from '../language/monarch/register';\n\nconst dynamicLabelsCompletionItemProvider = new DynamicLabelsCompletionItemProvider();\n\nexport interface Props {\n  onChange: (query: string) => void;\n  label: string;\n  width: number;\n}\n\nexport function DynamicLabelsField({ label, width, onChange }: Props) {\n  const theme = useTheme2();\n  const styles = getInputStyles({ theme, width });\n  const containerRef = useRef<HTMLDivElement>(null);\n  const onEditorMount = useCallback(\n    (editor: monacoType.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n      editor.onDidFocusEditorText(() => editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {}));\n      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n        const text = editor.getValue();\n        onChange(text);\n      });\n\n      const containerDiv = containerRef.current;\n      containerDiv !== null && editor.layout({ width: containerDiv.clientWidth, height: containerDiv.clientHeight });\n    },\n    [onChange]\n  );\n\n  return (\n    <div ref={containerRef} className={cx(styles.wrapper)}>\n      <CodeEditor\n        containerStyles={css`\n          border: 1px solid ${theme.colors.action.disabledBackground};\n          &:hover {\n            border-color: ${theme.components.input.borderColor};\n          }\n        `}\n        monacoOptions={{\n          // without this setting, the auto-resize functionality causes an infinite loop, don't remove it!\n          scrollBeyondLastLine: false,\n\n          // These additional options are style focused and are a subset of those in the query editor in Prometheus\n          fontSize: 14,\n          lineNumbers: 'off',\n          renderLineHighlight: 'none',\n          overviewRulerLanes: 0,\n          scrollbar: {\n            vertical: 'hidden',\n            horizontal: 'hidden',\n          },\n          suggestFontSize: 12,\n          padding: {\n            top: 6,\n          },\n        }}\n        language={language.id}\n        value={label}\n        onBlur={(value) => {\n          if (value !== label) {\n            onChange(value);\n          }\n        }}\n        onBeforeEditorMount={(monaco: Monaco) =>\n          registerLanguage(monaco, language, dynamicLabelsCompletionItemProvider)\n        }\n        onEditorDidMount={onEditorMount}\n      />\n    </div>\n  );\n}\n","import { LanguageDefinition } from '../monarch/register';\n\nconst cloudWatchSqlLanguageDefinition: LanguageDefinition = {\n  id: 'cloudwatch-sql',\n  extensions: ['.cloudwatchSql'],\n  aliases: ['CloudWatch', 'cloudwatch', 'CloudWatchSQL'],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default cloudWatchSqlLanguageDefinition;\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\nimport React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport { CodeEditor, Monaco } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport language from '../language/cloudwatch-sql/definition';\nimport { TRIGGER_SUGGEST } from '../language/monarch/commands';\nimport { registerLanguage } from '../language/monarch/register';\n\nexport interface Props {\n  region: string;\n  sql: string;\n  onChange: (sql: string) => void;\n  datasource: CloudWatchDatasource;\n}\n\nexport const SQLCodeEditor: FunctionComponent<Props> = ({ region, sql, onChange, datasource }) => {\n  useEffect(() => {\n    datasource.sqlCompletionItemProvider.setRegion(region);\n  }, [region, datasource]);\n\n  const onEditorMount = useCallback(\n    (editor: monacoType.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n      editor.onDidFocusEditorText(() => editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {}));\n      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n        const text = editor.getValue();\n        onChange(text);\n      });\n    },\n    [onChange]\n  );\n\n  return (\n    <CodeEditor\n      height={'150px'}\n      language={language.id}\n      value={sql}\n      onBlur={(value) => {\n        if (value !== sql) {\n          onChange(value);\n        }\n      }}\n      showMiniMap={false}\n      showLineNumbers={true}\n      onBeforeEditorMount={(monaco: Monaco) => registerLanguage(monaco, language, datasource.sqlCompletionItemProvider)}\n      onEditorDidMount={onEditorMount}\n    />\n  );\n};\n","import { debounce } from 'lodash';\nimport React, { FunctionComponent, useState } from 'react';\n\nimport { Input } from '@grafana/ui';\n\nexport interface Props {\n  onChange: (alias: any) => void;\n  value: string;\n  id?: string;\n}\n\nexport const Alias: FunctionComponent<Props> = ({ value = '', onChange, id }) => {\n  const [alias, setAlias] = useState(value);\n\n  const propagateOnChange = debounce(onChange, 1500);\n\n  onChange = (e: any) => {\n    setAlias(e.target.value);\n    propagateOnChange(e.target.value);\n  };\n\n  return <Input id={id} type=\"text\" value={alias} onChange={onChange} aria-label=\"Optional alias\" />;\n};\n","import React, { ChangeEvent, useCallback, useEffect, useState } from 'react';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow, InlineSelect, Space } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { ConfirmModal, Input, RadioButtonGroup } from '@grafana/ui';\n\nimport { MathExpressionQueryField, MetricStatEditor, SQLBuilderEditor } from '../';\nimport { CloudWatchDatasource } from '../../datasource';\nimport useMigratedMetricsQuery from '../../migrations/useMigratedMetricsQuery';\nimport {\n  CloudWatchJsonData,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n  MetricEditorMode,\n  MetricQueryType,\n  MetricStat,\n} from '../../types';\nimport { DynamicLabelsField } from '../DynamicLabelsField';\nimport { SQLCodeEditor } from '../SQLCodeEditor';\n\nimport { Alias } from './Alias';\n\nexport interface Props extends QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData> {\n  query: CloudWatchMetricsQuery;\n  extraHeaderElementLeft?: React.Dispatch<JSX.Element | undefined>;\n  extraHeaderElementRight?: React.Dispatch<JSX.Element | undefined>;\n}\n\nconst metricEditorModes: Array<SelectableValue<MetricQueryType>> = [\n  { label: 'Metric Search', value: MetricQueryType.Search },\n  { label: 'Metric Query', value: MetricQueryType.Query },\n];\nconst editorModes = [\n  { label: 'Builder', value: MetricEditorMode.Builder },\n  { label: 'Code', value: MetricEditorMode.Code },\n];\n\nexport const MetricsQueryEditor = (props: Props) => {\n  const { query, datasource, extraHeaderElementLeft, extraHeaderElementRight, onChange } = props;\n  const [showConfirm, setShowConfirm] = useState(false);\n  const [sqlCodeEditorIsDirty, setSQLCodeEditorIsDirty] = useState(false);\n  const migratedQuery = useMigratedMetricsQuery(query, props.onChange);\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: MetricEditorMode) => {\n      if (\n        sqlCodeEditorIsDirty &&\n        query.metricQueryType === MetricQueryType.Query &&\n        query.metricEditorMode === MetricEditorMode.Code\n      ) {\n        setShowConfirm(true);\n        return;\n      }\n      onChange({ ...query, metricEditorMode: newMetricEditorMode });\n    },\n    [setShowConfirm, onChange, sqlCodeEditorIsDirty, query]\n  );\n\n  useEffect(() => {\n    extraHeaderElementLeft?.(\n      <InlineSelect\n        aria-label=\"Metric editor mode\"\n        value={metricEditorModes.find((m) => m.value === query.metricQueryType)}\n        options={metricEditorModes}\n        onChange={({ value }) => {\n          onChange({ ...query, metricQueryType: value });\n        }}\n      />\n    );\n\n    extraHeaderElementRight?.(\n      <>\n        <RadioButtonGroup\n          options={editorModes}\n          size=\"sm\"\n          value={query.metricEditorMode}\n          onChange={onEditorModeChange}\n        />\n        <ConfirmModal\n          isOpen={showConfirm}\n          title=\"Are you sure?\"\n          body=\"You will lose manual changes done to the query if you go back to the visual builder.\"\n          confirmText=\"Yes, I am sure.\"\n          dismissText=\"No, continue editing the query manually.\"\n          icon=\"exclamation-triangle\"\n          onConfirm={() => {\n            setShowConfirm(false);\n            onChange({ ...query, metricEditorMode: MetricEditorMode.Builder });\n          }}\n          onDismiss={() => setShowConfirm(false)}\n        />\n      </>\n    );\n\n    return () => {\n      extraHeaderElementLeft?.(undefined);\n      extraHeaderElementRight?.(undefined);\n    };\n  }, [\n    query,\n    sqlCodeEditorIsDirty,\n    datasource,\n    onChange,\n    extraHeaderElementLeft,\n    extraHeaderElementRight,\n    showConfirm,\n    onEditorModeChange,\n  ]);\n\n  return (\n    <>\n      <Space v={0.5} />\n\n      {query.metricQueryType === MetricQueryType.Search && (\n        <>\n          {query.metricEditorMode === MetricEditorMode.Builder && (\n            <MetricStatEditor\n              {...props}\n              refId={query.refId}\n              metricStat={query}\n              onChange={(metricStat: MetricStat) => props.onChange({ ...query, ...metricStat })}\n            ></MetricStatEditor>\n          )}\n          {query.metricEditorMode === MetricEditorMode.Code && (\n            <MathExpressionQueryField\n              expression={query.expression ?? ''}\n              onChange={(expression) => props.onChange({ ...query, expression })}\n              datasource={datasource}\n            ></MathExpressionQueryField>\n          )}\n        </>\n      )}\n      {query.metricQueryType === MetricQueryType.Query && (\n        <>\n          {query.metricEditorMode === MetricEditorMode.Code && (\n            <SQLCodeEditor\n              region={query.region}\n              sql={query.sqlExpression ?? ''}\n              onChange={(sqlExpression) => {\n                if (!sqlCodeEditorIsDirty) {\n                  setSQLCodeEditorIsDirty(true);\n                }\n                props.onChange({ ...migratedQuery, sqlExpression });\n              }}\n              datasource={datasource}\n            />\n          )}\n\n          {query.metricEditorMode === MetricEditorMode.Builder && (\n            <>\n              <SQLBuilderEditor query={query} onChange={props.onChange} datasource={datasource}></SQLBuilderEditor>\n            </>\n          )}\n        </>\n      )}\n      <Space v={0.5} />\n      <EditorRow>\n        <EditorField\n          label=\"ID\"\n          width={26}\n          optional\n          tooltip=\"ID can be used to reference other queries in math expressions. The ID can include numbers, letters, and underscore, and must start with a lowercase letter.\"\n          invalid={!!query.id && !/^$|^[a-z][a-zA-Z0-9_]*$/.test(query.id)}\n        >\n          <Input\n            id={`${query.refId}-cloudwatch-metric-query-editor-id`}\n            onChange={(event: ChangeEvent<HTMLInputElement>) => onChange({ ...migratedQuery, id: event.target.value })}\n            type=\"text\"\n            value={query.id}\n          />\n        </EditorField>\n\n        <EditorField label=\"Period\" width={26} tooltip=\"Minimum interval between points in seconds.\">\n          <Input\n            id={`${query.refId}-cloudwatch-metric-query-editor-period`}\n            value={query.period || ''}\n            placeholder=\"auto\"\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              onChange({ ...migratedQuery, period: event.target.value })\n            }\n          />\n        </EditorField>\n\n        {config.featureToggles.cloudWatchDynamicLabels ? (\n          <EditorField\n            label=\"Label\"\n            width={26}\n            optional\n            tooltip=\"Change time series legend name using Dynamic labels. See documentation for details.\"\n          >\n            <DynamicLabelsField\n              width={52}\n              label={migratedQuery.label ?? ''}\n              onChange={(label) => props.onChange({ ...query, label })}\n            ></DynamicLabelsField>\n          </EditorField>\n        ) : (\n          <EditorField\n            label=\"Alias\"\n            width={26}\n            optional\n            tooltip=\"Change time series legend name using this field. See documentation for replacement variable formats.\"\n          >\n            <Alias\n              id={`${query.refId}-cloudwatch-metric-query-editor-alias`}\n              value={migratedQuery.alias ?? ''}\n              onChange={(value: string) => onChange({ ...migratedQuery, alias: value })}\n            />\n          </EditorField>\n        )}\n      </EditorRow>\n    </>\n  );\n};\n","import {\n  CloudWatchLogsQuery,\n  CloudWatchMetricsQuery,\n  LogGroup,\n  MetricEditorMode,\n  MetricQueryType,\n  VariableQuery,\n  VariableQueryType,\n} from './types';\n\nexport const DEFAULT_METRICS_QUERY: Omit<CloudWatchMetricsQuery, 'refId'> = {\n  queryMode: 'Metrics',\n  namespace: '',\n  metricName: '',\n  expression: '',\n  dimensions: {},\n  region: 'default',\n  id: '',\n  statistic: 'Average',\n  period: '',\n  metricQueryType: MetricQueryType.Search,\n  metricEditorMode: MetricEditorMode.Builder,\n  sqlExpression: '',\n  matchExact: true,\n};\n\nexport const DEFAULT_LOGS_QUERY_STRING = 'fields @timestamp, @message |\\n sort @timestamp desc |\\n limit 20';\n\nexport const getDefaultLogsQuery = (\n  defaultLogGroups?: LogGroup[],\n  legacyDefaultLogGroups?: string[]\n): Omit<CloudWatchLogsQuery, 'refId' | 'queryMode'> => ({\n  id: '',\n  region: 'default',\n  // in case legacy default log groups have been defined in the ConfigEditor, they will be migrated in the LogGroupsField component or the next time the ConfigEditor is opened.\n  // the migration requires async backend calls, so we don't want to do it here as it would block the UI.\n  logGroupNames: legacyDefaultLogGroups,\n  logGroups: defaultLogGroups ?? [],\n});\n\nexport const DEFAULT_VARIABLE_QUERY: Partial<VariableQuery> = {\n  queryType: VariableQueryType.Regions,\n  region: 'default',\n};\n","import React from 'react';\n\nimport { CoreApp, LoadingState, QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { EditorHeader, InlineSelect, FlexItem } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Badge, Button } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { DEFAULT_LOGS_QUERY_STRING } from '../defaultQueries';\nimport { isCloudWatchLogsQuery, isCloudWatchMetricsQuery } from '../guards';\nimport { useIsMonitoringAccount, useRegions } from '../hooks';\nimport { CloudWatchJsonData, CloudWatchQuery, CloudWatchQueryMode, MetricQueryType } from '../types';\n\nexport interface Props extends QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData> {\n  extraHeaderElementLeft?: JSX.Element;\n  extraHeaderElementRight?: JSX.Element;\n  dataIsStale: boolean;\n}\n\nconst apiModes: Array<SelectableValue<CloudWatchQueryMode>> = [\n  { label: 'CloudWatch Metrics', value: 'Metrics' },\n  { label: 'CloudWatch Logs', value: 'Logs' },\n];\n\nconst QueryHeader: React.FC<Props> = ({\n  query,\n  onChange,\n  datasource,\n  extraHeaderElementLeft,\n  extraHeaderElementRight,\n  dataIsStale,\n  data,\n  onRunQuery,\n}) => {\n  const { queryMode, region } = query;\n  const isMonitoringAccount = useIsMonitoringAccount(datasource.resources, query.region);\n  const [regions, regionIsLoading] = useRegions(datasource);\n  const emptyLogsExpression = isCloudWatchLogsQuery(query) ? !query.expression : false;\n\n  const onQueryModeChange = ({ value }: SelectableValue<CloudWatchQueryMode>) => {\n    if (value && value !== queryMode) {\n      // reset expression to a default string when the query mode changes\n      let expression = '';\n      if (value === 'Logs') {\n        expression = DEFAULT_LOGS_QUERY_STRING;\n      }\n      onChange({\n        ...datasource.getDefaultQuery(CoreApp.Unknown),\n        ...query,\n        expression,\n        queryMode: value,\n      });\n    }\n  };\n  const onRegionChange = async (region: string) => {\n    if (config.featureToggles.cloudWatchCrossAccountQuerying && isCloudWatchMetricsQuery(query)) {\n      const isMonitoringAccount = await datasource.resources.isMonitoringAccount(region);\n      onChange({ ...query, region, accountId: isMonitoringAccount ? query.accountId : undefined });\n    } else {\n      onChange({ ...query, region });\n    }\n  };\n\n  const shouldDisplayMonitoringBadge =\n    config.featureToggles.cloudWatchCrossAccountQuerying &&\n    isMonitoringAccount &&\n    (query.queryMode === 'Logs' ||\n      (isCloudWatchMetricsQuery(query) && query.metricQueryType === MetricQueryType.Search));\n\n  return (\n    <>\n      <EditorHeader>\n        <InlineSelect\n          label=\"Region\"\n          value={region}\n          placeholder=\"Select region\"\n          allowCustomValue\n          onChange={({ value: region }) => region && onRegionChange(region)}\n          options={regions}\n          isLoading={regionIsLoading}\n        />\n\n        <InlineSelect\n          aria-label=\"Query mode\"\n          value={queryMode}\n          options={apiModes}\n          onChange={onQueryModeChange}\n          inputId={`cloudwatch-query-mode-${query.refId}`}\n          id={`cloudwatch-query-mode-${query.refId}`}\n        />\n\n        {extraHeaderElementLeft}\n\n        <FlexItem grow={1} />\n\n        {shouldDisplayMonitoringBadge && (\n          <>\n            <Badge\n              text=\"Monitoring account\"\n              color=\"blue\"\n              tooltip=\"AWS monitoring accounts view data from source accounts so you can centralize monitoring and troubleshoot activites\"\n            ></Badge>\n          </>\n        )}\n\n        <Button\n          variant={dataIsStale ? 'primary' : 'secondary'}\n          size=\"sm\"\n          onClick={onRunQuery}\n          icon={data?.state === LoadingState.Loading ? 'fa fa-spinner' : undefined}\n          disabled={data?.state === LoadingState.Loading || emptyLogsExpression}\n        >\n          Run queries\n        </Button>\n\n        {extraHeaderElementRight}\n      </EditorHeader>\n    </>\n  );\n};\n\nexport default QueryHeader;\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { isCloudWatchLogsQuery, isCloudWatchMetricsQuery } from '../guards';\nimport { CloudWatchJsonData, CloudWatchQuery } from '../types';\n\nimport LogsQueryEditor from './LogsQueryEditor';\nimport { MetricsQueryEditor } from './MetricsQueryEditor/MetricsQueryEditor';\nimport QueryHeader from './QueryHeader';\n\nexport type Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>;\n\nexport const QueryEditor = (props: Props) => {\n  const { query, onChange, data } = props;\n  const [dataIsStale, setDataIsStale] = useState(false);\n  const [extraHeaderElementLeft, setExtraHeaderElementLeft] = useState<JSX.Element>();\n  const [extraHeaderElementRight, setExtraHeaderElementRight] = useState<JSX.Element>();\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onChangeInternal = useCallback(\n    (query: CloudWatchQuery) => {\n      setDataIsStale(true);\n      onChange(query);\n    },\n    [onChange]\n  );\n\n  return (\n    <>\n      <QueryHeader\n        {...props}\n        extraHeaderElementLeft={extraHeaderElementLeft}\n        extraHeaderElementRight={extraHeaderElementRight}\n        dataIsStale={dataIsStale}\n      />\n\n      {isCloudWatchMetricsQuery(query) && (\n        <MetricsQueryEditor\n          {...props}\n          query={query}\n          onRunQuery={() => {}}\n          onChange={onChangeInternal}\n          extraHeaderElementLeft={setExtraHeaderElementLeft}\n          extraHeaderElementRight={setExtraHeaderElementRight}\n        />\n      )}\n      {isCloudWatchLogsQuery(query) && <LogsQueryEditor {...props} query={query} onChange={onChangeInternal} />}\n    </>\n  );\n};\n","export enum QueryEditorPropertyType {\n  String = 'string',\n}\n\nexport interface QueryEditorProperty {\n  type: QueryEditorPropertyType;\n  name?: string;\n}\n\nexport type QueryEditorOperatorType = string | boolean | number;\ntype QueryEditorOperatorValueType = QueryEditorOperatorType | QueryEditorOperatorType[];\n\nexport interface QueryEditorOperator<T extends QueryEditorOperatorValueType> {\n  name?: string;\n  value?: T;\n}\n\nexport interface QueryEditorOperatorExpression {\n  type: QueryEditorExpressionType.Operator;\n  property: QueryEditorProperty;\n  operator: QueryEditorOperator<QueryEditorOperatorValueType>;\n}\n\nexport interface QueryEditorArrayExpression {\n  type: QueryEditorExpressionType.And | QueryEditorExpressionType.Or;\n  expressions: QueryEditorExpression[] | QueryEditorArrayExpression[];\n}\n\nexport interface QueryEditorPropertyExpression {\n  type: QueryEditorExpressionType.Property;\n  property: QueryEditorProperty;\n}\n\nexport enum QueryEditorExpressionType {\n  Property = 'property',\n  Operator = 'operator',\n  Or = 'or',\n  And = 'and',\n  GroupBy = 'groupBy',\n  Function = 'function',\n  FunctionParameter = 'functionParameter',\n}\n\nexport type QueryEditorExpression =\n  | QueryEditorArrayExpression\n  | QueryEditorPropertyExpression\n  | QueryEditorGroupByExpression\n  | QueryEditorFunctionExpression\n  | QueryEditorFunctionParameterExpression\n  | QueryEditorOperatorExpression;\n\nexport interface QueryEditorGroupByExpression {\n  type: QueryEditorExpressionType.GroupBy;\n  property: QueryEditorProperty;\n}\n\nexport interface QueryEditorFunctionExpression {\n  type: QueryEditorExpressionType.Function;\n  name?: string;\n  parameters?: QueryEditorFunctionParameterExpression[];\n}\n\nexport interface QueryEditorFunctionParameterExpression {\n  type: QueryEditorExpressionType.FunctionParameter;\n  name?: string;\n}\n","import { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport {\n  QueryEditorArrayExpression,\n  QueryEditorExpression,\n  QueryEditorExpressionType,\n  QueryEditorFunctionExpression,\n  QueryEditorOperatorExpression,\n  QueryEditorPropertyExpression,\n} from '../../expressions';\nimport { SQLExpression } from '../../types';\n\nexport default class SQLGenerator {\n  constructor(private templateSrv: TemplateSrv = getTemplateSrv()) {}\n\n  expressionToSqlQuery({\n    select,\n    from,\n    where,\n    groupBy,\n    orderBy,\n    orderByDirection,\n    limit,\n  }: SQLExpression): string | undefined {\n    if (!from || !select?.name || !select?.parameters?.length) {\n      return undefined;\n    }\n\n    let parts: string[] = [];\n    this.appendSelect(select, parts);\n    this.appendFrom(from, parts);\n    this.appendWhere(where, parts, true, where?.expressions?.length ?? 0);\n    this.appendGroupBy(groupBy, parts);\n    this.appendOrderBy(orderBy, orderByDirection, parts);\n    this.appendLimit(limit, parts);\n\n    return parts.join(' ');\n  }\n\n  private appendSelect(select: QueryEditorFunctionExpression | undefined, parts: string[]) {\n    parts.push('SELECT');\n    this.appendFunction(select, parts);\n  }\n\n  private appendFrom(from: QueryEditorPropertyExpression | QueryEditorFunctionExpression | undefined, parts: string[]) {\n    parts.push('FROM');\n    from?.type === QueryEditorExpressionType.Function\n      ? this.appendFunction(from, parts)\n      : parts.push(this.formatValue(from?.property?.name ?? ''));\n  }\n\n  private appendWhere(\n    filter: QueryEditorExpression | undefined,\n    parts: string[],\n    isTopLevelExpression: boolean,\n    topLevelExpressionsCount: number\n  ) {\n    if (!filter) {\n      return;\n    }\n\n    const hasChildExpressions = 'expressions' in filter && filter.expressions.length > 0;\n    if (isTopLevelExpression && hasChildExpressions) {\n      parts.push('WHERE');\n    }\n\n    if (filter.type === QueryEditorExpressionType.And) {\n      const andParts: string[] = [];\n      filter.expressions.map((exp) => this.appendWhere(exp, andParts, false, topLevelExpressionsCount));\n      if (andParts.length === 0) {\n        return;\n      }\n      const andCombined = andParts.join(' AND ');\n      const wrapInParentheses = !isTopLevelExpression && topLevelExpressionsCount > 1 && andParts.length > 1;\n      return parts.push(wrapInParentheses ? `(${andCombined})` : andCombined);\n    }\n\n    if (filter.type === QueryEditorExpressionType.Or) {\n      const orParts: string[] = [];\n      filter.expressions.map((exp) => this.appendWhere(exp, orParts, false, topLevelExpressionsCount));\n      if (orParts.length === 0) {\n        return;\n      }\n      const orCombined = orParts.join(' OR ');\n      const wrapInParentheses = !isTopLevelExpression && topLevelExpressionsCount > 1 && orParts.length > 1;\n      parts.push(wrapInParentheses ? `(${orCombined})` : orCombined);\n      return;\n    }\n\n    if (filter.type === QueryEditorExpressionType.Operator) {\n      return this.appendOperator(filter, parts);\n    }\n  }\n\n  private appendGroupBy(groupBy: QueryEditorArrayExpression | undefined, parts: string[]) {\n    const groupByParts: string[] = [];\n    for (const expression of groupBy?.expressions ?? []) {\n      if (expression?.type !== QueryEditorExpressionType.GroupBy || !expression.property.name) {\n        continue;\n      }\n      groupByParts.push(this.formatValue(expression.property.name));\n    }\n\n    if (groupByParts.length > 0) {\n      parts.push(`GROUP BY ${groupByParts.join(', ')}`);\n    }\n  }\n\n  private appendOrderBy(\n    orderBy: QueryEditorFunctionExpression | undefined,\n    orderByDirection: string | undefined,\n    parts: string[]\n  ) {\n    if (orderBy) {\n      parts.push('ORDER BY');\n      this.appendFunction(orderBy, parts);\n      parts.push(orderByDirection ?? 'ASC');\n    }\n  }\n\n  private appendLimit(limit: number | undefined, parts: string[]) {\n    limit && parts.push(`LIMIT ${limit}`);\n  }\n\n  private appendOperator(expression: QueryEditorOperatorExpression, parts: string[], prefix?: string) {\n    const { property, operator } = expression;\n\n    if (!property.name || !operator.name || !operator.value) {\n      return;\n    }\n\n    parts.push(`${this.formatValue(property.name)} ${operator.name} '${operator.value}'`);\n  }\n\n  private appendFunction(select: QueryEditorFunctionExpression | undefined, parts: string[]) {\n    if (!select?.name) {\n      return;\n    }\n\n    const params = (select.parameters ?? [])\n      .map((p) => p.name && this.formatValue(p.name))\n      .filter(Boolean)\n      .join(', ');\n\n    parts.push(`${select.name}(${params})`);\n  }\n\n  private formatValue(label: string): string {\n    const specialCharacters = /[/\\s\\.-]/; // slash, space, dot or dash\n\n    const interpolated = this.templateSrv.replace(label, {}, 'raw');\n    if (specialCharacters.test(interpolated)) {\n      return `\"${label}\"`;\n    }\n\n    return label;\n  }\n}\n","import { SelectableValue } from '@grafana/data';\n\nimport {\n  QueryEditorExpressionType,\n  QueryEditorPropertyType,\n  QueryEditorFunctionParameterExpression,\n  QueryEditorArrayExpression,\n  QueryEditorOperatorExpression,\n  QueryEditorGroupByExpression,\n} from '../../expressions';\nimport { SCHEMA } from '../../language/cloudwatch-sql/language';\nimport { SQLExpression, CloudWatchMetricsQuery, Dimensions } from '../../types';\n\nexport function getMetricNameFromExpression(selectExpression: SQLExpression['select']): string | undefined {\n  return selectExpression?.parameters?.[0].name;\n}\n\nexport function getNamespaceFromExpression(fromExpression: SQLExpression['from']): string | undefined {\n  // It's just a simple `FROM \"AWS/EC2\"` expression\n  if (fromExpression?.type === QueryEditorExpressionType.Property) {\n    return fromExpression.property.name; // PR TODO: do we need to test the type here? It can only be string?\n  }\n\n  // It's a more complicated `FROM SCHEMA(\"AWS/EC2\", ...)` expression\n  if (fromExpression?.type === QueryEditorExpressionType.Function) {\n    // TODO: do we need to test the name of the function?\n    return fromExpression.parameters?.[0].name;\n  }\n\n  return undefined;\n}\n\nexport function getSchemaLabelKeys(fromExpression: SQLExpression['from']): string[] | undefined {\n  // Schema label keys are second to n arguments in the from expression function\n  if (fromExpression?.type === QueryEditorExpressionType.Function && fromExpression?.parameters?.length) {\n    if (fromExpression?.parameters?.length <= 1) {\n      return [];\n    }\n\n    // ignore the first arg (the namespace)\n    const paramExpressions = fromExpression?.parameters.slice(1);\n    return paramExpressions.reduce<string[]>((acc, curr) => (curr.name ? [...acc, curr.name] : acc), []);\n  }\n\n  return undefined;\n}\n\nexport function isUsingWithSchema(fromExpression: SQLExpression['from']): boolean {\n  return fromExpression?.type === QueryEditorExpressionType.Function && fromExpression.name === SCHEMA;\n}\n\n/** Given a partial operator expression, return a non-partial if it's valid, or undefined */\nexport function sanitizeOperator(\n  expression: Partial<QueryEditorOperatorExpression>\n): QueryEditorOperatorExpression | undefined {\n  const key = expression.property?.name;\n  const value = expression.operator?.value;\n  const operator = expression.operator?.name;\n\n  if (key && value && operator) {\n    return {\n      type: QueryEditorExpressionType.Operator,\n      property: {\n        type: QueryEditorPropertyType.String,\n        name: key,\n      },\n      operator: {\n        value,\n        name: operator,\n      },\n    };\n  }\n\n  return undefined;\n}\n\n/**\n * Given an array of Expressions, flattens them to the leaf Operator expressions.\n * Note, this loses context of any nested ANDs or ORs, so will not be useful once we support nested conditions */\nfunction flattenOperatorExpressions(\n  expressions: QueryEditorArrayExpression['expressions']\n): QueryEditorOperatorExpression[] {\n  return expressions.flatMap((expression) => {\n    if (expression.type === QueryEditorExpressionType.Operator) {\n      return expression;\n    }\n\n    if (expression.type === QueryEditorExpressionType.And || expression.type === QueryEditorExpressionType.Or) {\n      return flattenOperatorExpressions(expression.expressions);\n    }\n\n    // Expressions that we don't expect to find in the WHERE filter will be ignored\n    return [];\n  });\n}\n\n/** Returns a flattened list of WHERE filters, losing all context of nested filters or AND vs OR. Not suitable\n * if the UI supports nested conditions\n */\nexport function getFlattenedFilters(sql: SQLExpression): QueryEditorOperatorExpression[] {\n  const where = sql.where;\n  return flattenOperatorExpressions(where?.expressions ?? []);\n}\n\n/**\n * Given an array of Expressions, flattens them to the leaf Operator expressions.\n * Note, this loses context of any nested ANDs or ORs, so will not be useful once we support nested conditions */\nfunction flattenGroupByExpressions(\n  expressions: QueryEditorArrayExpression['expressions']\n): QueryEditorGroupByExpression[] {\n  return expressions.flatMap((expression) => {\n    if (expression.type === QueryEditorExpressionType.GroupBy) {\n      return expression;\n    }\n\n    // Expressions that we don't expect to find in the GROUP BY will be ignored\n    return [];\n  });\n}\n\n/** Returns a flattened list of GROUP BY expressions, losing all context of nested filters or AND vs OR.\n */\nexport function getFlattenedGroupBys(sql: SQLExpression): QueryEditorGroupByExpression[] {\n  const groupBy = sql.groupBy;\n  return flattenGroupByExpressions(groupBy?.expressions ?? []);\n}\n\n/** Converts a string array to a Dimensions object with null values  **/\nexport function stringArrayToDimensions(arr: string[]): Dimensions {\n  return arr.reduce((acc, curr) => {\n    if (curr) {\n      return { ...acc, [curr]: null };\n    }\n    return acc;\n  }, {});\n}\n\nexport function setSql(query: CloudWatchMetricsQuery, sql: SQLExpression): CloudWatchMetricsQuery {\n  return {\n    ...query,\n    sql: {\n      ...(query.sql ?? {}),\n      ...sql,\n    },\n  };\n}\n\nexport function setNamespace(query: CloudWatchMetricsQuery, namespace: string | undefined): CloudWatchMetricsQuery {\n  const sql = query.sql ?? {};\n  //updating `namespace` props for CloudWatchMetricsQuery\n  query.namespace = namespace ? namespace : '';\n\n  if (namespace === undefined) {\n    return setSql(query, {\n      from: undefined,\n    });\n  }\n\n  // It's just a simple `FROM \"AWS/EC2\"` expression\n  if (!sql.from || sql.from.type === QueryEditorExpressionType.Property) {\n    return setSql(query, {\n      from: {\n        type: QueryEditorExpressionType.Property,\n        property: {\n          type: QueryEditorPropertyType.String,\n          name: namespace,\n        },\n      },\n    });\n  }\n\n  // It's a more complicated `FROM SCHEMA(\"AWS/EC2\", ...)` expression\n  if (sql.from.type === QueryEditorExpressionType.Function) {\n    const namespaceParam: QueryEditorFunctionParameterExpression = {\n      type: QueryEditorExpressionType.FunctionParameter,\n      name: namespace,\n    };\n\n    const labelKeys = (sql.from.parameters ?? []).slice(1);\n\n    return setSql(query, {\n      from: {\n        type: QueryEditorExpressionType.Function,\n        name: SCHEMA,\n        parameters: [namespaceParam, ...labelKeys],\n      },\n    });\n  }\n\n  // TODO: do the with schema bit\n  return query;\n}\n\nexport function setSchemaLabels(\n  query: CloudWatchMetricsQuery,\n  schemaLabels: Array<SelectableValue<string>> | SelectableValue<string>\n): CloudWatchMetricsQuery {\n  const sql = query.sql ?? {};\n  schemaLabels = Array.isArray(schemaLabels) ? schemaLabels.map((l) => l.value) : [schemaLabels.value];\n\n  // schema labels are the second parameter in the schema function. `... FROM SCHEMA(\"AWS/EC2\", label1, label2 ...)`\n  if (sql.from?.type === QueryEditorExpressionType.Function && sql.from.parameters?.length) {\n    const parameters: QueryEditorFunctionParameterExpression[] = (schemaLabels ?? []).map((label: string) => ({\n      type: QueryEditorExpressionType.FunctionParameter,\n      name: label,\n    }));\n    const namespaceParam = (sql.from.parameters ?? [])[0];\n\n    return setSql(query, {\n      from: {\n        type: QueryEditorExpressionType.Function,\n        name: SCHEMA,\n        parameters: [namespaceParam, ...parameters],\n      },\n    });\n  }\n\n  return query;\n}\n\nexport function setMetricName(query: CloudWatchMetricsQuery, metricName: string): CloudWatchMetricsQuery {\n  const param: QueryEditorFunctionParameterExpression = {\n    type: QueryEditorExpressionType.FunctionParameter,\n    name: metricName,\n  };\n\n  return setSql(query, {\n    select: {\n      type: QueryEditorExpressionType.Function,\n      ...(query.sql?.select ?? {}),\n      parameters: [param],\n    },\n  });\n}\n\nexport function removeMetricName(query: CloudWatchMetricsQuery): CloudWatchMetricsQuery {\n  const queryWithNoParams = { ...query };\n  delete queryWithNoParams.sql?.select?.parameters;\n\n  return queryWithNoParams;\n}\n\nexport function setAggregation(query: CloudWatchMetricsQuery, aggregation: string): CloudWatchMetricsQuery {\n  return setSql(query, {\n    select: {\n      type: QueryEditorExpressionType.Function,\n      ...(query.sql?.select ?? {}),\n      name: aggregation,\n    },\n  });\n}\n\nexport function setOrderBy(query: CloudWatchMetricsQuery, aggregation: string): CloudWatchMetricsQuery {\n  return setSql(query, {\n    orderBy: {\n      type: QueryEditorExpressionType.Function,\n      name: aggregation,\n    },\n  });\n}\n\nexport function setWithSchema(query: CloudWatchMetricsQuery, withSchema: boolean): CloudWatchMetricsQuery {\n  const namespace = getNamespaceFromExpression((query.sql ?? {}).from);\n\n  if (withSchema) {\n    const namespaceParam: QueryEditorFunctionParameterExpression = {\n      type: QueryEditorExpressionType.FunctionParameter,\n      name: namespace,\n    };\n\n    return setSql(query, {\n      from: {\n        type: QueryEditorExpressionType.Function,\n        name: SCHEMA,\n        parameters: [namespaceParam],\n      },\n    });\n  }\n\n  return setSql(query, {\n    from: {\n      type: QueryEditorExpressionType.Property,\n      property: {\n        type: QueryEditorPropertyType.String,\n        name: namespace,\n      },\n    },\n  });\n}\n\n/** Sets the left hand side (InstanceId) in an OperatorExpression\n * Accepts a partial expression to use in an editor\n */\nexport function setOperatorExpressionProperty(\n  expression: Partial<QueryEditorOperatorExpression>,\n  property: string\n): QueryEditorOperatorExpression {\n  return {\n    type: QueryEditorExpressionType.Operator,\n    property: {\n      type: QueryEditorPropertyType.String,\n      name: property,\n    },\n    operator: expression.operator ?? {},\n  };\n}\n\n/** Sets the operator (\"==\") in an OperatorExpression\n * Accepts a partial expression to use in an editor\n */\nexport function setOperatorExpressionName(\n  expression: Partial<QueryEditorOperatorExpression>,\n  name: string\n): QueryEditorOperatorExpression {\n  return {\n    type: QueryEditorExpressionType.Operator,\n    property: expression.property ?? {\n      type: QueryEditorPropertyType.String,\n    },\n    operator: {\n      ...expression.operator,\n      name,\n    },\n  };\n}\n\n/** Sets the right hand side (\"i-abc123445\") in an OperatorExpression\n * Accepts a partial expression to use in an editor\n */\nexport function setOperatorExpressionValue(\n  expression: Partial<QueryEditorOperatorExpression>,\n  value: string\n): QueryEditorOperatorExpression {\n  return {\n    type: QueryEditorExpressionType.Operator,\n    property: expression.property ?? {\n      type: QueryEditorPropertyType.String,\n    },\n    operator: {\n      ...expression.operator,\n      value,\n    },\n  };\n}\n\n/** Creates a GroupByExpression for a specified field\n */\nexport function setGroupByField(field: string): QueryEditorGroupByExpression {\n  return {\n    type: QueryEditorExpressionType.GroupBy,\n    property: {\n      type: QueryEditorPropertyType.String,\n      name: field,\n    },\n  };\n}\n","import React, { useEffect, useMemo } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorSwitch } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { useDimensionKeys, useMetrics, useNamespaces } from '../../hooks';\nimport { STATISTICS } from '../../language/cloudwatch-sql/language';\nimport { CloudWatchMetricsQuery } from '../../types';\nimport { appendTemplateVariables } from '../../utils/utils';\n\nimport {\n  getMetricNameFromExpression,\n  getNamespaceFromExpression,\n  getSchemaLabelKeys as getSchemaLabels,\n  isUsingWithSchema,\n  removeMetricName,\n  setAggregation,\n  setMetricName,\n  setNamespace,\n  setSchemaLabels,\n  setWithSchema,\n  stringArrayToDimensions,\n} from './utils';\n\ninterface SQLBuilderSelectRowProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst AGGREGATIONS = STATISTICS.map(toOption);\n\nconst SQLBuilderSelectRow: React.FC<SQLBuilderSelectRowProps> = ({ datasource, query, onQueryChange }) => {\n  const sql = query.sql ?? {};\n\n  const aggregation = sql.select?.name;\n  useEffect(() => {\n    if (!aggregation) {\n      onQueryChange(setAggregation(query, STATISTICS[0]));\n    }\n  }, [aggregation, onQueryChange, query]);\n\n  const metricName = getMetricNameFromExpression(sql.select);\n  const namespace = getNamespaceFromExpression(sql.from);\n  const schemaLabels = getSchemaLabels(sql.from);\n  const withSchemaEnabled = isUsingWithSchema(sql.from);\n\n  const namespaceOptions = useNamespaces(datasource);\n  const metricOptions = useMetrics(datasource, { region: query.region, namespace });\n  const existingFilters = useMemo(() => stringArrayToDimensions(schemaLabels ?? []), [schemaLabels]);\n  const unusedDimensionKeys = useDimensionKeys(datasource, {\n    region: query.region,\n    namespace,\n    metricName,\n    dimensionFilters: existingFilters,\n  });\n  const dimensionKeys = useMemo(\n    () => (schemaLabels?.length ? [...unusedDimensionKeys, ...schemaLabels.map(toOption)] : unusedDimensionKeys),\n    [unusedDimensionKeys, schemaLabels]\n  );\n\n  const onNamespaceChange = async (query: CloudWatchMetricsQuery) => {\n    const validatedQuery = await validateMetricName(query);\n    onQueryChange(validatedQuery);\n  };\n\n  const validateMetricName = async (query: CloudWatchMetricsQuery) => {\n    let { region, sql, namespace } = query;\n    await datasource.resources.getMetrics({ namespace, region }).then((result: Array<SelectableValue<string>>) => {\n      if (!result.some((metric) => metric.value === metricName)) {\n        sql = removeMetricName(query).sql;\n      }\n    });\n    return { ...query, sql };\n  };\n\n  return (\n    <>\n      <EditorFieldGroup>\n        <EditorField label=\"Namespace\" width={16}>\n          <Select\n            aria-label=\"Namespace\"\n            value={namespace ? toOption(namespace) : null}\n            inputId={`${query.refId}-cloudwatch-sql-namespace`}\n            options={namespaceOptions}\n            allowCustomValue\n            onChange={({ value }) => value && onNamespaceChange(setNamespace(query, value))}\n          />\n        </EditorField>\n\n        <EditorField label=\"With schema\">\n          <EditorSwitch\n            id={`${query.refId}-cloudwatch-sql-withSchema`}\n            value={withSchemaEnabled}\n            onChange={(ev) =>\n              ev.target instanceof HTMLInputElement && onQueryChange(setWithSchema(query, ev.target.checked))\n            }\n          />\n        </EditorField>\n\n        {withSchemaEnabled && (\n          <EditorField label=\"Schema labels\" disabled={!namespace}>\n            <Select\n              id={`${query.refId}-cloudwatch-sql-schema-label-keys`}\n              width=\"auto\"\n              isMulti={true}\n              value={schemaLabels ? schemaLabels.map(toOption) : null}\n              options={dimensionKeys}\n              allowCustomValue\n              onChange={(item) => item && onQueryChange(setSchemaLabels(query, item))}\n            />\n          </EditorField>\n        )}\n      </EditorFieldGroup>\n\n      <EditorFieldGroup>\n        <EditorField label=\"Metric name\" width={16}>\n          <Select\n            aria-label=\"Metric name\"\n            value={metricName ? toOption(metricName) : null}\n            options={metricOptions}\n            allowCustomValue\n            onChange={({ value }) => value && onQueryChange(setMetricName(query, value))}\n          />\n        </EditorField>\n\n        <EditorField label=\"Aggregation\" width={16}>\n          <Select\n            aria-label=\"Aggregation\"\n            value={aggregation ? toOption(aggregation) : null}\n            options={appendTemplateVariables(datasource, AGGREGATIONS)}\n            onChange={({ value }) => value && onQueryChange(setAggregation(query, value))}\n          />\n        </EditorField>\n      </EditorFieldGroup>\n    </>\n  );\n};\n\nexport default SQLBuilderSelectRow;\n","import React, { useMemo, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorList, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { QueryEditorExpressionType, QueryEditorOperatorExpression, QueryEditorPropertyType } from '../../expressions';\nimport { useDimensionKeys } from '../../hooks';\nimport { COMPARISON_OPERATORS, EQUALS } from '../../language/cloudwatch-sql/language';\nimport { CloudWatchMetricsQuery } from '../../types';\nimport { appendTemplateVariables } from '../../utils/utils';\n\nimport {\n  getFlattenedFilters,\n  getMetricNameFromExpression,\n  getNamespaceFromExpression,\n  sanitizeOperator,\n  setOperatorExpressionName,\n  setOperatorExpressionProperty,\n  setOperatorExpressionValue,\n  setSql,\n} from './utils';\n\ninterface SQLFilterProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst OPERATORS = COMPARISON_OPERATORS.map(toOption);\n\nconst SQLFilter: React.FC<SQLFilterProps> = ({ query, onQueryChange, datasource }) => {\n  const filtersFromQuery = useMemo(() => getFlattenedFilters(query.sql ?? {}), [query.sql]);\n  const [filters, setFilters] = useState<QueryEditorOperatorExpression[]>(filtersFromQuery);\n\n  const onChange = (newItems: Array<Partial<QueryEditorOperatorExpression>>) => {\n    // As new (empty object) items come in, with need to make sure they have the correct type\n    const cleaned = newItems.map(\n      (v): QueryEditorOperatorExpression => ({\n        type: QueryEditorExpressionType.Operator,\n        property: v.property ?? { type: QueryEditorPropertyType.String },\n        operator: v.operator ?? {\n          name: EQUALS,\n        },\n      })\n    );\n\n    setFilters(cleaned);\n\n    // Only save valid and complete filters into the query state\n    const validExpressions: QueryEditorOperatorExpression[] = [];\n    for (const operatorExpression of cleaned) {\n      const validated = sanitizeOperator(operatorExpression);\n      if (validated) {\n        validExpressions.push(validated);\n      }\n    }\n\n    const where = validExpressions.length\n      ? {\n          type: QueryEditorExpressionType.And as const,\n          expressions: validExpressions,\n        }\n      : undefined;\n\n    onQueryChange(setSql(query, { where }));\n  };\n\n  return <EditorList items={filters} onChange={onChange} renderItem={makeRenderFilter(datasource, query)} />;\n};\n\n// Making component functions in the render body is not recommended, but it works for now.\n// If some problems arise (perhaps with state going missing), consider this to be a potential cause\nfunction makeRenderFilter(datasource: CloudWatchDatasource, query: CloudWatchMetricsQuery) {\n  function renderFilter(\n    item: Partial<QueryEditorOperatorExpression>,\n    onChange: (item: QueryEditorOperatorExpression) => void,\n    onDelete: () => void\n  ) {\n    return <FilterItem datasource={datasource} query={query} filter={item} onChange={onChange} onDelete={onDelete} />;\n  }\n\n  return renderFilter;\n}\n\nexport default SQLFilter;\n\ninterface FilterItemProps {\n  datasource: CloudWatchDatasource;\n  query: CloudWatchMetricsQuery;\n  filter: Partial<QueryEditorOperatorExpression>;\n  onChange: (item: QueryEditorOperatorExpression) => void;\n  onDelete: () => void;\n}\n\nconst FilterItem: React.FC<FilterItemProps> = (props) => {\n  const { datasource, query, filter, onChange, onDelete } = props;\n  const sql = query.sql ?? {};\n\n  const namespace = getNamespaceFromExpression(sql.from);\n  const metricName = getMetricNameFromExpression(sql.select);\n\n  const dimensionKeys = useDimensionKeys(datasource, { region: query.region, namespace, metricName });\n\n  const loadDimensionValues = async () => {\n    if (!filter.property?.name || !namespace) {\n      return [];\n    }\n\n    return datasource.resources\n      .getDimensionValues({ region: query.region, namespace, metricName, dimensionKey: filter.property.name })\n      .then((result: Array<SelectableValue<string>>) => {\n        return appendTemplateVariables(datasource, result);\n      });\n  };\n\n  const [state, loadOptions] = useAsyncFn(loadDimensionValues, [\n    query.region,\n    namespace,\n    metricName,\n    filter.property?.name,\n  ]);\n\n  return (\n    <InputGroup>\n      <Select\n        width=\"auto\"\n        value={filter.property?.name ? toOption(filter.property?.name) : null}\n        options={dimensionKeys}\n        allowCustomValue\n        onChange={({ value }) => value && onChange(setOperatorExpressionProperty(filter, value))}\n      />\n\n      <Select\n        width=\"auto\"\n        value={filter.operator?.name && toOption(filter.operator.name)}\n        options={OPERATORS}\n        onChange={({ value }) => value && onChange(setOperatorExpressionName(filter, value))}\n      />\n\n      <Select\n        width=\"auto\"\n        isLoading={state.loading}\n        value={\n          filter.operator?.value && typeof filter.operator?.value === 'string' ? toOption(filter.operator?.value) : null\n        }\n        options={state.value}\n        allowCustomValue\n        onOpenMenu={loadOptions}\n        onChange={({ value }) => value && onChange(setOperatorExpressionValue(filter, value))}\n      />\n\n      <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n    </InputGroup>\n  );\n};\n","import React, { useMemo, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorList, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { QueryEditorExpressionType, QueryEditorGroupByExpression, QueryEditorPropertyType } from '../../expressions';\nimport { useDimensionKeys } from '../../hooks';\nimport { CloudWatchMetricsQuery } from '../../types';\n\nimport {\n  getFlattenedGroupBys,\n  getMetricNameFromExpression,\n  getNamespaceFromExpression,\n  setGroupByField,\n  setSql,\n} from './utils';\n\ninterface SQLGroupByProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst SQLGroupBy: React.FC<SQLGroupByProps> = ({ query, datasource, onQueryChange }) => {\n  const sql = query.sql ?? {};\n  const groupBysFromQuery = useMemo(() => getFlattenedGroupBys(query.sql ?? {}), [query.sql]);\n  const [items, setItems] = useState<QueryEditorGroupByExpression[]>(groupBysFromQuery);\n\n  const namespace = getNamespaceFromExpression(sql.from);\n  const metricName = getMetricNameFromExpression(sql.select);\n\n  const baseOptions = useDimensionKeys(datasource, { region: query.region, namespace, metricName });\n  const options = useMemo(\n    // Exclude options we've already selected\n    () => baseOptions.filter((option) => !groupBysFromQuery.some((v) => v.property.name === option.value)),\n    [baseOptions, groupBysFromQuery]\n  );\n\n  const onChange = (newItems: Array<Partial<QueryEditorGroupByExpression>>) => {\n    // As new (empty object) items come in, with need to make sure they have the correct type\n    const cleaned = newItems.map(\n      (v): QueryEditorGroupByExpression => ({\n        type: QueryEditorExpressionType.GroupBy,\n        property: {\n          type: QueryEditorPropertyType.String,\n          name: v.property?.name,\n        },\n      })\n    );\n\n    setItems(cleaned);\n\n    // Only save complete expressions into the query state;\n    const completeExpressions = cleaned.filter((v) => v.property?.name);\n\n    const groupBy = completeExpressions.length\n      ? {\n          type: QueryEditorExpressionType.And as const,\n          expressions: completeExpressions,\n        }\n      : undefined;\n\n    onQueryChange(setSql(query, { groupBy }));\n  };\n\n  return <EditorList items={items} onChange={onChange} renderItem={makeRenderItem(options)} />;\n};\n\nfunction makeRenderItem(options: Array<SelectableValue<string>>) {\n  function renderItem(\n    item: Partial<QueryEditorGroupByExpression>,\n    onChange: (item: QueryEditorGroupByExpression) => void,\n    onDelete: () => void\n  ) {\n    return <GroupByItem options={options} item={item} onChange={onChange} onDelete={onDelete} />;\n  }\n\n  return renderItem;\n}\n\ninterface GroupByItemProps {\n  options: Array<SelectableValue<string>>;\n  item: Partial<QueryEditorGroupByExpression>;\n  onChange: (item: QueryEditorGroupByExpression) => void;\n  onDelete: () => void;\n}\n\nconst GroupByItem: React.FC<GroupByItemProps> = (props) => {\n  const { options, item, onChange, onDelete } = props;\n  const fieldName = item.property?.name;\n\n  return (\n    <InputGroup>\n      <Select\n        aria-label={`Group by ${fieldName ?? 'filter key'}`}\n        width=\"auto\"\n        value={fieldName ? toOption(fieldName) : null}\n        options={options}\n        allowCustomValue\n        onChange={({ value }) => value && onChange(setGroupByField(value))}\n      />\n\n      <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n    </InputGroup>\n  );\n};\n\nexport default SQLGroupBy;\n","import React from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorField, EditorFieldGroup, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { ASC, DESC, STATISTICS } from '../../language/cloudwatch-sql/language';\nimport { CloudWatchMetricsQuery } from '../../types';\nimport { appendTemplateVariables } from '../../utils/utils';\n\nimport { setOrderBy, setSql } from './utils';\n\ninterface SQLBuilderSelectRowProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst orderByDirections: Array<SelectableValue<string>> = [\n  { label: ASC, value: ASC },\n  { label: DESC, value: DESC },\n];\n\nconst SQLOrderByGroup: React.FC<SQLBuilderSelectRowProps> = ({ query, onQueryChange, datasource }) => {\n  const sql = query.sql ?? {};\n  const orderBy = sql.orderBy?.name;\n  const orderByDirection = sql.orderByDirection;\n\n  return (\n    <EditorFieldGroup>\n      <EditorField label=\"Order by\" optional width={16}>\n        <InputGroup>\n          <Select\n            aria-label=\"Order by\"\n            onChange={({ value }) => value && onQueryChange(setOrderBy(query, value))}\n            options={appendTemplateVariables(datasource, STATISTICS.map(toOption))}\n            value={orderBy ? toOption(orderBy) : null}\n          />\n          {orderBy && (\n            <AccessoryButton\n              aria-label=\"remove\"\n              icon=\"times\"\n              variant=\"secondary\"\n              onClick={() => onQueryChange(setSql(query, { orderBy: undefined }))}\n            />\n          )}\n        </InputGroup>\n      </EditorField>\n\n      <EditorField label=\"Direction\" disabled={!orderBy} width={16}>\n        <Select\n          aria-label=\"Direction\"\n          inputId=\"cloudwatch-sql-order-by-direction\"\n          value={orderByDirection ? toOption(orderByDirection) : orderByDirections[0]}\n          options={appendTemplateVariables(datasource, orderByDirections)}\n          onChange={(item) => item && onQueryChange(setSql(query, { orderByDirection: item.value }))}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n};\n\nexport default SQLOrderByGroup;\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { EditorField, EditorRow, EditorRows } from '@grafana/experimental';\nimport { Input } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport SQLGenerator from '../../language/cloudwatch-sql/SQLGenerator';\nimport { CloudWatchMetricsQuery } from '../../types';\n\nimport SQLBuilderSelectRow from './SQLBuilderSelectRow';\nimport SQLFilter from './SQLFilter';\nimport SQLGroupBy from './SQLGroupBy';\nimport SQLOrderByGroup from './SQLOrderByGroup';\nimport { setSql } from './utils';\n\nexport type Props = {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onChange: (value: CloudWatchMetricsQuery) => void;\n};\n\nexport function SQLBuilderEditor({ query, datasource, onChange }: React.PropsWithChildren<Props>) {\n  const sql = query.sql ?? {};\n\n  const onQueryChange = useCallback(\n    (query: CloudWatchMetricsQuery) => {\n      const sqlGenerator = new SQLGenerator();\n      const sqlString = sqlGenerator.expressionToSqlQuery(query.sql ?? {});\n      const fullQuery = {\n        ...query,\n        sqlExpression: sqlString,\n      };\n\n      onChange(fullQuery);\n    },\n    [onChange]\n  );\n\n  const [sqlPreview, setSQLPreview] = useState<string | undefined>();\n  useEffect(() => {\n    const sqlGenerator = new SQLGenerator();\n    const sqlString = sqlGenerator.expressionToSqlQuery(query.sql ?? {});\n    if (sqlPreview !== sqlString) {\n      setSQLPreview(sqlString);\n    }\n  }, [query, sqlPreview, setSQLPreview]);\n\n  return (\n    <EditorRows>\n      <EditorRow>\n        <SQLBuilderSelectRow query={query} onQueryChange={onQueryChange} datasource={datasource} />\n      </EditorRow>\n\n      <EditorRow>\n        <EditorField label=\"Filter\" optional={true}>\n          <SQLFilter query={query} onQueryChange={onQueryChange} datasource={datasource} />\n        </EditorField>\n      </EditorRow>\n\n      <EditorRow>\n        <EditorField label=\"Group by\" optional>\n          <SQLGroupBy query={query} onQueryChange={onQueryChange} datasource={datasource} />\n        </EditorField>\n\n        <SQLOrderByGroup query={query} onQueryChange={onQueryChange} datasource={datasource}></SQLOrderByGroup>\n\n        <EditorField label=\"Limit\" optional>\n          <Input\n            id={`${query.refId}-cloudwatch-sql-builder-editor-limit`}\n            value={sql.limit}\n            onChange={(e) => {\n              const val = e.currentTarget.valueAsNumber;\n              onQueryChange(setSql(query, { limit: isNaN(val) ? undefined : val }));\n            }}\n            type=\"number\"\n            min={1}\n          />\n        </EditorField>\n      </EditorRow>\n\n      {sqlPreview && (\n        <EditorRow>\n          {process.env.NODE_ENV === 'development' && <pre>{JSON.stringify(query.sql ?? {}, null, 2)}</pre>}\n          <pre>{sqlPreview ?? ''}</pre>\n        </EditorRow>\n      )}\n    </EditorRows>\n  );\n}\n","import { LanguageDefinition } from '../monarch/register';\n\nconst cloudWatchMetricMathLanguageDefinition: LanguageDefinition = {\n  id: 'cloudwatch-MetricMath',\n  extensions: [],\n  aliases: [],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default cloudWatchMetricMathLanguageDefinition;\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\nimport React, { useCallback, useRef } from 'react';\n\nimport { CodeEditor, Monaco } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport language from '../language/metric-math/definition';\nimport { TRIGGER_SUGGEST } from '../language/monarch/commands';\nimport { registerLanguage } from '../language/monarch/register';\n\nexport interface Props {\n  onChange: (query: string) => void;\n  expression: string;\n  datasource: CloudWatchDatasource;\n}\n\nexport function MathExpressionQueryField({ expression: query, onChange, datasource }: React.PropsWithChildren<Props>) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const onEditorMount = useCallback(\n    (editor: monacoType.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n      editor.onDidFocusEditorText(() => editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {}));\n      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n        const text = editor.getValue();\n        onChange(text);\n      });\n\n      // auto resizes the editor to be the height of the content it holds\n      // this code comes from the Prometheus query editor.\n      // We may wish to consider abstracting it into the grafana/ui repo in the future\n      const updateElementHeight = () => {\n        const containerDiv = containerRef.current;\n        if (containerDiv !== null && editor.getContentHeight() < 200) {\n          const pixelHeight = Math.max(32, editor.getContentHeight());\n          containerDiv.style.height = `${pixelHeight}px`;\n          containerDiv.style.width = '100%';\n          const pixelWidth = containerDiv.clientWidth;\n          editor.layout({ width: pixelWidth, height: pixelHeight });\n        }\n      };\n\n      editor.onDidContentSizeChange(updateElementHeight);\n      updateElementHeight();\n    },\n    [onChange]\n  );\n\n  return (\n    <div ref={containerRef}>\n      <CodeEditor\n        monacoOptions={{\n          // without this setting, the auto-resize functionality causes an infinite loop, don't remove it!\n          scrollBeyondLastLine: false,\n\n          // These additional options are style focused and are a subset of those in the query editor in Prometheus\n          fontSize: 14,\n          lineNumbers: 'off',\n          renderLineHighlight: 'none',\n          scrollbar: {\n            vertical: 'hidden',\n            horizontal: 'hidden',\n          },\n          suggestFontSize: 12,\n          wordWrap: 'on',\n          padding: {\n            top: 6,\n          },\n        }}\n        language={language.id}\n        value={query}\n        onBlur={(value) => {\n          if (value !== query) {\n            onChange(value);\n          }\n        }}\n        onBeforeEditorMount={(monaco: Monaco) =>\n          registerLanguage(monaco, language, datasource.metricMathCompletionItemProvider)\n        }\n        onEditorDidMount={onEditorMount}\n      />\n    </div>\n  );\n}\n","export const standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];\n","import React, { useEffect } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorRow, EditorRows, EditorSwitch } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Select } from '@grafana/ui';\n\nimport { Dimensions } from '..';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { useAccountOptions, useDimensionKeys, useMetrics, useNamespaces } from '../../hooks';\nimport { standardStatistics } from '../../standardStatistics';\nimport { MetricStat } from '../../types';\nimport { appendTemplateVariables, toOption } from '../../utils/utils';\nimport { Account } from '../Account';\n\nexport type Props = {\n  refId: string;\n  metricStat: MetricStat;\n  datasource: CloudWatchDatasource;\n  disableExpressions?: boolean;\n  onChange: (value: MetricStat) => void;\n};\n\nexport function MetricStatEditor({\n  refId,\n  metricStat,\n  datasource,\n  disableExpressions = false,\n  onChange,\n}: React.PropsWithChildren<Props>) {\n  const namespaces = useNamespaces(datasource);\n  const metrics = useMetrics(datasource, metricStat);\n  const dimensionKeys = useDimensionKeys(datasource, { ...metricStat, dimensionFilters: metricStat.dimensions });\n  const accountState = useAccountOptions(datasource.resources, metricStat.region);\n\n  useEffect(() => {\n    datasource.resources.isMonitoringAccount(metricStat.region).then((isMonitoringAccount) => {\n      if (isMonitoringAccount && !accountState.loading && accountState.value?.length && !metricStat.accountId) {\n        onChange({ ...metricStat, accountId: 'all' });\n      }\n\n      if (!accountState.loading && accountState.value && !accountState.value.length && metricStat.accountId) {\n        onChange({ ...metricStat, accountId: undefined });\n      }\n    });\n  }, [accountState, metricStat, onChange, datasource.resources]);\n\n  const onNamespaceChange = async (metricStat: MetricStat) => {\n    const validatedQuery = await validateMetricName(metricStat);\n    onChange(validatedQuery);\n  };\n\n  const validateMetricName = async (metricStat: MetricStat) => {\n    let { metricName, namespace, region } = metricStat;\n    if (!metricName) {\n      return metricStat;\n    }\n    await datasource.resources.getMetrics({ namespace, region }).then((result: Array<SelectableValue<string>>) => {\n      if (!result.find((metric) => metric.value === metricName)) {\n        metricName = '';\n      }\n    });\n    return { ...metricStat, metricName };\n  };\n\n  return (\n    <EditorRows>\n      <EditorRow>\n        {!disableExpressions && config.featureToggles.cloudWatchCrossAccountQuerying && (\n          <Account\n            accountId={metricStat.accountId}\n            onChange={(accountId?: string) => {\n              onChange({ ...metricStat, accountId });\n            }}\n            accountOptions={accountState?.value || []}\n          ></Account>\n        )}\n        <EditorFieldGroup>\n          <EditorField label=\"Namespace\" width={26}>\n            <Select\n              aria-label=\"Namespace\"\n              value={metricStat?.namespace && toOption(metricStat.namespace)}\n              allowCustomValue\n              options={namespaces}\n              onChange={({ value: namespace }) => {\n                if (namespace) {\n                  onNamespaceChange({ ...metricStat, namespace });\n                }\n              }}\n            />\n          </EditorField>\n          <EditorField label=\"Metric name\" width={16}>\n            <Select\n              aria-label=\"Metric name\"\n              value={metricStat?.metricName && toOption(metricStat.metricName)}\n              allowCustomValue\n              options={metrics}\n              onChange={({ value: metricName }) => {\n                if (metricName) {\n                  onChange({ ...metricStat, metricName });\n                }\n              }}\n            />\n          </EditorField>\n\n          <EditorField label=\"Statistic\" width={16}>\n            <Select\n              inputId={`${refId}-metric-stat-editor-select-statistic`}\n              allowCustomValue\n              value={toOption(metricStat.statistic ?? standardStatistics[0])}\n              options={appendTemplateVariables(\n                datasource,\n                standardStatistics.filter((s) => s !== metricStat.statistic).map(toOption)\n              )}\n              onChange={({ value: statistic }) => {\n                if (\n                  !statistic ||\n                  (!standardStatistics.includes(statistic) &&\n                    !/^p\\d{2}(?:\\.\\d{1,2})?$/.test(statistic) &&\n                    !statistic.startsWith('$'))\n                ) {\n                  return;\n                }\n\n                onChange({ ...metricStat, statistic });\n              }}\n            />\n          </EditorField>\n        </EditorFieldGroup>\n      </EditorRow>\n\n      <EditorRow>\n        <EditorField label=\"Dimensions\">\n          <Dimensions\n            metricStat={metricStat}\n            onChange={(dimensions) => onChange({ ...metricStat, dimensions })}\n            dimensionKeys={dimensionKeys}\n            disableExpressions={disableExpressions}\n            datasource={datasource}\n          />\n        </EditorField>\n        {!disableExpressions && (\n          <EditorField\n            label=\"Match exact\"\n            optional={true}\n            tooltip=\"Only show metrics that exactly match all defined dimension names.\"\n          >\n            <EditorSwitch\n              id={`${refId}-cloudwatch-match-exact`}\n              value={!!metricStat.matchExact}\n              onChange={(e) => {\n                onChange({\n                  ...metricStat,\n                  matchExact: e.currentTarget.checked,\n                });\n              }}\n            />\n          </EditorField>\n        )}\n      </EditorRow>\n    </EditorRows>\n  );\n}\n","import { AnnotationQuery } from '@grafana/data';\n\nimport { AnnotationQueryEditor } from './components/AnnotationQueryEditor';\nimport { isCloudWatchAnnotation } from './guards';\nimport { CloudWatchAnnotationQuery, CloudWatchQuery, LegacyAnnotationQuery } from './types';\n\nexport const CloudWatchAnnotationSupport = {\n  // converts legacy angular style queries to new format. Also sets the same default values as in the deprecated angular directive\n  prepareAnnotation: (\n    query: LegacyAnnotationQuery | AnnotationQuery<CloudWatchAnnotationQuery>\n  ): AnnotationQuery<CloudWatchAnnotationQuery> => {\n    if (isCloudWatchAnnotation(query)) {\n      return query;\n    }\n\n    return {\n      // setting AnnotationQuery props explicitly since spreading would incorrectly use props that should be on the target only\n      datasource: query.datasource,\n      enable: query.enable,\n      iconColor: query.iconColor,\n      name: query.name,\n      builtIn: query.builtIn,\n      hide: query.hide,\n      target: {\n        ...query.target,\n        ...query,\n        statistic: query.statistic || 'Average',\n        region: query.region || 'default',\n        queryMode: 'Annotations',\n        refId: query.refId || 'annotationQuery',\n      },\n    };\n  },\n  // return undefined if query is not complete so that annotation query execution is quietly skipped\n  prepareQuery: (anno: AnnotationQuery<CloudWatchAnnotationQuery>): CloudWatchQuery | undefined => {\n    if (!anno.target) {\n      return undefined;\n    }\n\n    const {\n      prefixMatching,\n      actionPrefix,\n      alarmNamePrefix,\n      statistic,\n      namespace,\n      metricName,\n      dimensions = {},\n    } = anno.target;\n    const validPrefixMatchingQuery = !!prefixMatching && !!actionPrefix && !!alarmNamePrefix;\n    const validMetricStatQuery =\n      !prefixMatching && !!namespace && !!metricName && !!statistic && !!Object.values(dimensions).length;\n\n    if (validPrefixMatchingQuery || validMetricStatQuery) {\n      return anno.target;\n    }\n\n    return undefined;\n  },\n  QueryEditor: AnnotationQueryEditor,\n};\n","import React, { ChangeEvent } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { EditorField, EditorHeader, EditorRow, EditorSwitch, InlineSelect, Space } from '@grafana/experimental';\nimport { Alert, Input } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { isCloudWatchAnnotationQuery } from '../guards';\nimport { useRegions } from '../hooks';\nimport { CloudWatchJsonData, CloudWatchQuery, MetricStat } from '../types';\n\nimport { MetricStatEditor } from './MetricStatEditor';\n\nexport type Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>;\n\nexport const AnnotationQueryEditor = (props: Props) => {\n  const { query, onChange, datasource } = props;\n  const [regions, regionIsLoading] = useRegions(datasource);\n\n  if (!isCloudWatchAnnotationQuery(query)) {\n    return (\n      <Alert severity=\"error\" title=\"Invalid annotation query\" topSpacing={2}>\n        {JSON.stringify(query, null, 4)}\n      </Alert>\n    );\n  }\n\n  return (\n    <>\n      <EditorHeader>\n        <InlineSelect\n          label=\"Region\"\n          value={regions.find((v) => v.value === query.region)}\n          placeholder=\"Select region\"\n          allowCustomValue\n          onChange={({ value: region }) => region && onChange({ ...query, region })}\n          options={regions}\n          isLoading={regionIsLoading}\n        />\n      </EditorHeader>\n      <Space v={0.5} />\n      <MetricStatEditor\n        {...props}\n        refId={query.refId}\n        metricStat={query}\n        disableExpressions={true}\n        onChange={(metricStat: MetricStat) => onChange({ ...query, ...metricStat })}\n      ></MetricStatEditor>\n      <Space v={0.5} />\n      <EditorRow>\n        <EditorField label=\"Period\" width={26} tooltip=\"Minimum interval between points in seconds.\">\n          <Input\n            value={query.period || ''}\n            placeholder=\"auto\"\n            onChange={(event: ChangeEvent<HTMLInputElement>) => onChange({ ...query, period: event.target.value })}\n          />\n        </EditorField>\n        <EditorField label=\"Enable Prefix Matching\" optional={true}>\n          <EditorSwitch\n            value={query.prefixMatching}\n            onChange={(e) => {\n              onChange({\n                ...query,\n                prefixMatching: e.currentTarget.checked,\n              });\n            }}\n          />\n        </EditorField>\n        <EditorField label=\"Action\" optional={true} disabled={!query.prefixMatching}>\n          <Input\n            value={query.actionPrefix || ''}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              onChange({ ...query, actionPrefix: event.target.value })\n            }\n          />\n        </EditorField>\n        <EditorField label=\"Alarm Name\" optional={true} disabled={!query.prefixMatching}>\n          <Input\n            value={query.alarmNamePrefix || ''}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              onChange({ ...query, alarmNamePrefix: event.target.value })\n            }\n          />\n        </EditorField>\n      </EditorRow>\n    </>\n  );\n};\n","import Prism, { Grammar } from 'prismjs';\nimport { lastValueFrom } from 'rxjs';\n\nimport { AbsoluteTimeRange, HistoryItem, LanguageProvider } from '@grafana/data';\nimport { CompletionItemGroup, SearchFunctionType, Token, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\nimport { getTemplateSrv } from 'app/features/templating/template_srv';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { CloudWatchQuery, LogGroup, TSDBResponse } from '../../types';\nimport { interpolateStringArrayUsingSingleOrMultiValuedVariable } from '../../utils/templateVariableUtils';\n\nimport syntax, {\n  AGGREGATION_FUNCTIONS_STATS,\n  BOOLEAN_FUNCTIONS,\n  DATETIME_FUNCTIONS,\n  FIELD_AND_FILTER_FUNCTIONS,\n  IP_FUNCTIONS,\n  NUMERIC_OPERATORS,\n  QUERY_COMMANDS,\n  STRING_FUNCTIONS,\n} from './syntax';\n\nexport type CloudWatchHistoryItem = HistoryItem<CloudWatchQuery>;\n\ntype TypeaheadContext = {\n  history?: CloudWatchHistoryItem[];\n  absoluteRange?: AbsoluteTimeRange;\n  logGroups?: LogGroup[];\n  region: string;\n};\n\nexport class CloudWatchLogsLanguageProvider extends LanguageProvider {\n  started = false;\n  declare initialRange: AbsoluteTimeRange;\n  datasource: CloudWatchDatasource;\n\n  constructor(datasource: CloudWatchDatasource, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n\n    Object.assign(this, initialValues);\n  }\n\n  // Strip syntax chars\n  cleanText = (s: string) => s.replace(/[()]/g, '').trim();\n\n  getSyntax(): Grammar {\n    return syntax;\n  }\n\n  request = (url: string, params?: any): Promise<TSDBResponse> => {\n    return lastValueFrom(this.datasource.logsQueryRunner.awsRequest(url, params));\n  };\n\n  start = () => {\n    if (!this.startTask) {\n      this.startTask = Promise.resolve().then(() => {\n        this.started = true;\n        return [];\n      });\n    }\n\n    return this.startTask;\n  };\n\n  isStatsQuery(query: string): boolean {\n    const grammar = this.getSyntax();\n    const tokens = Prism.tokenize(query, grammar) ?? [];\n\n    return !!tokens.find(\n      (token) =>\n        typeof token !== 'string' &&\n        token.content.toString().toLowerCase() === 'stats' &&\n        token.type === 'query-command'\n    );\n  }\n\n  /**\n   * Return suggestions based on input that can be then plugged into a typeahead dropdown.\n   * Keep this DOM-free for testing\n   * @param input\n   * @param context Is optional in types but is required in case we are doing getLabelCompletionItems\n   * @param context.absoluteRange Required in case we are doing getLabelCompletionItems\n   * @param context.history Optional used only in getEmptyCompletionItems\n   */\n  async provideCompletionItems(input: TypeaheadInput, context?: TypeaheadContext): Promise<TypeaheadOutput> {\n    const { value } = input;\n\n    // Get tokens\n    const tokens = value?.data.get('tokens');\n\n    if (!tokens || !tokens.length) {\n      return { suggestions: [] };\n    }\n\n    const curToken: Token = tokens.filter(\n      (token: any) =>\n        token.offsets.start <= value!.selection?.start?.offset && token.offsets.end >= value!.selection?.start?.offset\n    )[0];\n\n    const isFirstToken = !curToken.prev;\n    const prevToken = prevNonWhitespaceToken(curToken);\n\n    const isCommandStart = isFirstToken || (!isFirstToken && prevToken?.types.includes('command-separator'));\n    if (isCommandStart) {\n      return this.getCommandCompletionItems();\n    }\n\n    if (isInsideFunctionParenthesis(curToken)) {\n      return await this.getFieldCompletionItems(context?.logGroups, context?.region || 'default');\n    }\n\n    if (isAfterKeyword('by', curToken)) {\n      return this.handleKeyword(context);\n    }\n\n    if (prevToken?.types.includes('comparison-operator')) {\n      return this.handleComparison(context);\n    }\n\n    const commandToken = previousCommandToken(curToken);\n    if (commandToken) {\n      return await this.handleCommand(commandToken, curToken, context);\n    }\n\n    return {\n      suggestions: [],\n    };\n  }\n\n  private fetchFields = async (logGroups: LogGroup[], region: string): Promise<string[]> => {\n    const interpolatedLogGroups = interpolateStringArrayUsingSingleOrMultiValuedVariable(\n      getTemplateSrv(),\n      logGroups.map((lg) => lg.name),\n      {},\n      'text'\n    );\n    const results = await Promise.all(\n      interpolatedLogGroups.map((logGroupName) =>\n        this.datasource.resources\n          .getLogGroupFields({ logGroupName, region })\n          .then((fields) => fields.filter((f) => f).map((f) => f.value.name ?? ''))\n      )\n    );\n\n    return results.flat();\n  };\n\n  private handleKeyword = async (context?: TypeaheadContext): Promise<TypeaheadOutput> => {\n    const suggs = await this.getFieldCompletionItems(context?.logGroups, context?.region || 'default');\n    const functionSuggestions: CompletionItemGroup[] = [\n      {\n        searchFunctionType: SearchFunctionType.Prefix,\n        label: 'Functions',\n        items: STRING_FUNCTIONS.concat(DATETIME_FUNCTIONS, IP_FUNCTIONS),\n      },\n    ];\n    suggs.suggestions.push(...functionSuggestions);\n\n    return suggs;\n  };\n\n  private handleCommand = async (\n    commandToken: Token,\n    curToken: Token,\n    context?: TypeaheadContext\n  ): Promise<TypeaheadOutput> => {\n    const queryCommand = commandToken.content.toLowerCase();\n    const prevToken = prevNonWhitespaceToken(curToken);\n    const currentTokenIsFirstArg = prevToken === commandToken;\n\n    if (queryCommand === 'sort') {\n      return this.handleSortCommand(currentTokenIsFirstArg, curToken, context);\n    }\n\n    if (queryCommand === 'parse') {\n      if (currentTokenIsFirstArg) {\n        return await this.getFieldCompletionItems(context?.logGroups ?? [], context?.region || 'default');\n      }\n    }\n\n    const currentTokenIsAfterCommandAndEmpty = isTokenType(commandToken.next, 'whitespace') && !commandToken.next?.next;\n    const currentTokenIsAfterCommand =\n      currentTokenIsAfterCommandAndEmpty || nextNonWhitespaceToken(commandToken) === curToken;\n\n    const currentTokenIsComma = isTokenType(curToken, 'punctuation', ',');\n    const currentTokenIsCommaOrAfterComma = currentTokenIsComma || isTokenType(prevToken, 'punctuation', ',');\n\n    // We only show suggestions if we are after a command or after a comma which is a field separator\n    if (!(currentTokenIsAfterCommand || currentTokenIsCommaOrAfterComma)) {\n      return { suggestions: [] };\n    }\n\n    if (['display', 'fields'].includes(queryCommand)) {\n      const typeaheadOutput = await this.getFieldCompletionItems(\n        context?.logGroups ?? [],\n        context?.region || 'default'\n      );\n      typeaheadOutput.suggestions.push(...this.getFieldAndFilterFunctionCompletionItems().suggestions);\n\n      return typeaheadOutput;\n    }\n\n    if (queryCommand === 'stats') {\n      const typeaheadOutput = this.getStatsAggCompletionItems();\n      if (currentTokenIsComma || currentTokenIsAfterCommandAndEmpty) {\n        typeaheadOutput?.suggestions.forEach((group) => {\n          group.skipFilter = true;\n        });\n      }\n      return typeaheadOutput;\n    }\n\n    if (queryCommand === 'filter' && currentTokenIsFirstArg) {\n      const sugg = await this.getFieldCompletionItems(context?.logGroups, context?.region || 'default');\n      const boolFuncs = this.getBoolFuncCompletionItems();\n      sugg.suggestions.push(...boolFuncs.suggestions);\n      return sugg;\n    }\n    return { suggestions: [] };\n  };\n\n  private async handleSortCommand(\n    isFirstArgument: boolean,\n    curToken: Token,\n    context?: TypeaheadContext\n  ): Promise<TypeaheadOutput> {\n    if (isFirstArgument) {\n      return await this.getFieldCompletionItems(context?.logGroups, context?.region || 'default');\n    } else if (isTokenType(prevNonWhitespaceToken(curToken), 'field-name')) {\n      // suggest sort options\n      return {\n        suggestions: [\n          {\n            searchFunctionType: SearchFunctionType.Prefix,\n            label: 'Sort Order',\n            items: [\n              {\n                label: 'asc',\n              },\n              { label: 'desc' },\n            ],\n          },\n        ],\n      };\n    }\n\n    return { suggestions: [] };\n  }\n\n  private handleComparison = async (context?: TypeaheadContext) => {\n    const fieldsSuggestions = await this.getFieldCompletionItems(context?.logGroups, context?.region || 'default');\n    const comparisonSuggestions = this.getComparisonCompletionItems();\n    fieldsSuggestions.suggestions.push(...comparisonSuggestions.suggestions);\n    return fieldsSuggestions;\n  };\n\n  private getCommandCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [{ searchFunctionType: SearchFunctionType.Prefix, label: 'Commands', items: QUERY_COMMANDS }],\n    };\n  };\n\n  private getFieldAndFilterFunctionCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        { searchFunctionType: SearchFunctionType.Prefix, label: 'Functions', items: FIELD_AND_FILTER_FUNCTIONS },\n      ],\n    };\n  };\n\n  private getStatsAggCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        { searchFunctionType: SearchFunctionType.Prefix, label: 'Functions', items: AGGREGATION_FUNCTIONS_STATS },\n      ],\n    };\n  };\n\n  private getBoolFuncCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        {\n          searchFunctionType: SearchFunctionType.Prefix,\n          label: 'Functions',\n          items: BOOLEAN_FUNCTIONS,\n        },\n      ],\n    };\n  };\n\n  private getComparisonCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        {\n          searchFunctionType: SearchFunctionType.Prefix,\n          label: 'Functions',\n          items: NUMERIC_OPERATORS.concat(BOOLEAN_FUNCTIONS),\n        },\n      ],\n    };\n  };\n\n  private getFieldCompletionItems = async (\n    logGroups: LogGroup[] | undefined,\n    region: string\n  ): Promise<TypeaheadOutput> => {\n    if (!logGroups) {\n      return { suggestions: [] };\n    }\n\n    const fields = await this.fetchFields(logGroups, region);\n    return {\n      suggestions: [\n        {\n          label: 'Fields',\n          items: fields.map((field) => ({\n            label: field,\n            insertText: field.match(/@?[_a-zA-Z]+[_.0-9a-zA-Z]*/) ? undefined : `\\`${field}\\``,\n          })),\n        },\n      ],\n    };\n  };\n}\n\nfunction nextNonWhitespaceToken(token: Token): Token | null {\n  let curToken = token;\n\n  while (curToken.next) {\n    if (curToken.next.types.includes('whitespace')) {\n      curToken = curToken.next;\n    } else {\n      return curToken.next;\n    }\n  }\n\n  return null;\n}\n\nfunction prevNonWhitespaceToken(token: Token): Token | null {\n  let curToken = token;\n\n  while (curToken.prev) {\n    if (isTokenType(curToken.prev, 'whitespace')) {\n      curToken = curToken.prev;\n    } else {\n      return curToken.prev;\n    }\n  }\n\n  return null;\n}\n\nfunction previousCommandToken(startToken: Token): Token | null {\n  let thisToken = startToken;\n  while (!!thisToken.prev) {\n    thisToken = thisToken.prev;\n    if (\n      thisToken.types.includes('query-command') &&\n      (!thisToken.prev || isTokenType(prevNonWhitespaceToken(thisToken), 'command-separator'))\n    ) {\n      return thisToken;\n    }\n  }\n  return null;\n}\n\nconst funcsWithFieldArgs = [\n  'avg',\n  'count',\n  'count_distinct',\n  'earliest',\n  'latest',\n  'sortsFirst',\n  'sortsLast',\n  'max',\n  'min',\n  'pct',\n  'stddev',\n  'ispresent',\n  'fromMillis',\n  'toMillis',\n  'isempty',\n  'isblank',\n  'isValidIp',\n  'isValidIpV4',\n  'isValidIpV6',\n  'isIpInSubnet',\n  'isIpv4InSubnet',\n  'isIpv6InSubnet',\n].map((funcName) => funcName.toLowerCase());\n\n/**\n * Returns true if cursor is currently inside a function parenthesis for example `count(|)` or `count(@mess|)` should\n * return true.\n */\nfunction isInsideFunctionParenthesis(curToken: Token): boolean {\n  const prevToken = prevNonWhitespaceToken(curToken);\n\n  if (!prevToken) {\n    return false;\n  }\n\n  const parenthesisToken = curToken.content === '(' ? curToken : prevToken.content === '(' ? prevToken : undefined;\n  if (parenthesisToken) {\n    const maybeFunctionToken = prevNonWhitespaceToken(parenthesisToken);\n    if (maybeFunctionToken) {\n      return (\n        funcsWithFieldArgs.includes(maybeFunctionToken.content.toLowerCase()) &&\n        maybeFunctionToken.types.includes('function')\n      );\n    }\n  }\n  return false;\n}\n\nfunction isAfterKeyword(keyword: string, token: Token): boolean {\n  const maybeKeyword = getPreviousTokenExcluding(token, [\n    'whitespace',\n    'function',\n    'punctuation',\n    'field-name',\n    'number',\n  ]);\n  if (isTokenType(maybeKeyword, 'keyword', 'by')) {\n    const prev = getPreviousTokenExcluding(token, ['whitespace']);\n    if (prev === maybeKeyword || isTokenType(prev, 'punctuation', ',')) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isTokenType(token: Token | undefined | null, type: string, content?: string): boolean {\n  if (!token?.types.includes(type)) {\n    return false;\n  }\n  if (content) {\n    if (token?.content.toLowerCase() !== content) {\n      return false;\n    }\n  }\n  return true;\n}\n\ntype TokenDef = string | { type: string; value: string };\nfunction getPreviousTokenExcluding(token: Token, exclude: TokenDef[]): Token | undefined | null {\n  let curToken = token.prev;\n  main: while (curToken) {\n    for (const item of exclude) {\n      if (typeof item === 'string') {\n        if (curToken.types.includes(item)) {\n          curToken = curToken.prev;\n          continue main;\n        }\n      } else {\n        if (curToken.types.includes(item.type) && curToken.content.toLowerCase() === item.value) {\n          curToken = curToken.prev;\n          continue main;\n        }\n      }\n    }\n    break;\n  }\n  return curToken;\n}\n","import { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { ResourcesAPI } from '../../resources/ResourcesAPI';\n\nimport { LinkedToken } from './LinkedToken';\nimport { linkedTokenBuilder } from './linkedTokenBuilder';\nimport { LanguageDefinition } from './register';\nimport { Completeable, StatementPosition, SuggestionKind, TokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\n/*\nCompletionItemProvider is an extendable class which needs to implement :\n- tokenTypes\n- getStatementPosition\n- getSuggestionKinds\n- getSuggestions\n*/\nexport class CompletionItemProvider implements Completeable {\n  resources: ResourcesAPI;\n  templateSrv: TemplateSrv;\n  tokenTypes: TokenTypes;\n\n  constructor(resources: ResourcesAPI, templateSrv: TemplateSrv = getTemplateSrv()) {\n    this.resources = resources;\n    this.templateSrv = templateSrv;\n    this.templateSrv = templateSrv;\n\n    // implement with more specific tokens when extending this class\n    this.tokenTypes = {\n      Parenthesis: 'delimiter.parenthesis',\n      Whitespace: 'white',\n      Keyword: 'keyword',\n      Delimiter: 'delimiter',\n      Operator: 'operator',\n      Identifier: 'identifier',\n      Type: 'type',\n      Function: 'predefined',\n      Number: 'number',\n      String: 'string',\n      Variable: 'variable',\n    };\n  }\n\n  // implemented by subclasses, given a token, returns a lexical position in a query\n  getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n    return StatementPosition.Unknown;\n  }\n\n  // implemented by subclasses, given a lexical statement position, returns potential kinds of suggestions\n  getSuggestionKinds(position: StatementPosition): SuggestionKind[] {\n    return [];\n  }\n\n  // implemented by subclasses, given potential suggestions kinds, returns suggestion objects for monaco aka \"CompletionItem\"\n  getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    return Promise.reject([]);\n  }\n\n  // called by registerLanguage and passed to monaco with registerCompletionItemProvider\n  // returns an object that implements https://microsoft.github.io/monaco-editor/api/interfaces/monaco.languages.CompletionItemProvider.html\n  getCompletionProvider(monaco: Monaco, languageDefinition: LanguageDefinition) {\n    return {\n      triggerCharacters: [' ', '$', ',', '(', \"'\"], // one of these characters indicates that it is time to look for a suggestion\n      provideCompletionItems: async (model: monacoTypes.editor.ITextModel, position: monacoTypes.IPosition) => {\n        const currentToken = linkedTokenBuilder(monaco, languageDefinition, model, position, this.tokenTypes);\n        const statementPosition = this.getStatementPosition(currentToken);\n        const suggestionKinds = this.getSuggestionKinds(statementPosition);\n        const suggestions = await this.getSuggestions(\n          monaco,\n          currentToken,\n          suggestionKinds,\n          statementPosition,\n          position\n        );\n\n        return {\n          suggestions,\n        };\n      },\n    };\n  }\n}\n","import { TokenTypes } from '../../monarch/types';\n\nexport const SQLTokenTypes: TokenTypes = {\n  Parenthesis: 'delimiter.parenthesis.sql',\n  Whitespace: 'white.sql',\n  Keyword: 'keyword.sql',\n  Delimiter: 'delimiter.sql',\n  Operator: 'operator.sql',\n  Identifier: 'identifier.sql',\n  Type: 'type.sql',\n  Function: 'predefined.sql',\n  Number: 'number.sql',\n  String: 'string.sql',\n  Variable: 'variable.sql',\n};\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { StatementPosition } from '../../monarch/types';\nimport { AND, ASC, BY, DESC, EQUALS, FROM, GROUP, NOT_EQUALS, ORDER, SCHEMA, SELECT, WHERE } from '../language';\n\nimport { SQLTokenTypes } from './types';\n\nexport function getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n  const previousKeyword = currentToken?.getPreviousKeyword();\n\n  const previousIsSlash = currentToken?.getPreviousNonWhiteSpaceToken()?.is(SQLTokenTypes.Operator, '/');\n  if (\n    currentToken === null ||\n    (currentToken.isWhiteSpace() && currentToken.previous === null) ||\n    (currentToken.is(SQLTokenTypes.Keyword, SELECT) && currentToken.previous === null) ||\n    previousIsSlash ||\n    (currentToken.isIdentifier() && (previousIsSlash || currentToken?.previous === null))\n  ) {\n    return StatementPosition.SelectKeyword;\n  }\n\n  if (previousNonWhiteSpace?.value === SELECT) {\n    return StatementPosition.AfterSelectKeyword;\n  }\n\n  if (\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') || currentToken?.is(SQLTokenTypes.Parenthesis, '()')) &&\n    previousKeyword?.value === SELECT\n  ) {\n    return StatementPosition.AfterSelectFuncFirstArgument;\n  }\n\n  if (previousKeyword?.value === SELECT && previousNonWhiteSpace?.isParenthesis()) {\n    return StatementPosition.FromKeyword;\n  }\n\n  if (previousNonWhiteSpace?.value === FROM) {\n    return StatementPosition.AfterFromKeyword;\n  }\n\n  if (\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') || currentToken?.is(SQLTokenTypes.Parenthesis, '()')) &&\n    previousKeyword?.value === SCHEMA\n  ) {\n    return StatementPosition.SchemaFuncFirstArgument;\n  }\n\n  if (previousKeyword?.value === SCHEMA && previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ',')) {\n    return StatementPosition.SchemaFuncExtraArgument;\n  }\n\n  if (\n    (previousKeyword?.value === FROM && previousNonWhiteSpace?.isDoubleQuotedString()) ||\n    (previousKeyword?.value === FROM && previousNonWhiteSpace?.isVariable()) ||\n    (previousKeyword?.value === SCHEMA && previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')'))\n  ) {\n    return StatementPosition.AfterFrom;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isKeyword() ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Operator, AND))\n  ) {\n    return StatementPosition.WhereKey;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isIdentifier() || previousNonWhiteSpace?.isDoubleQuotedString())\n  ) {\n    return StatementPosition.WhereComparisonOperator;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Operator, EQUALS) ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Operator, NOT_EQUALS))\n  ) {\n    return StatementPosition.WhereValue;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isString() || previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')'))\n  ) {\n    return StatementPosition.AfterWhereValue;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, GROUP) &&\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Keyword, BY) || previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ','))\n  ) {\n    return StatementPosition.AfterGroupByKeywords;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, GROUP) &&\n    (previousNonWhiteSpace?.isIdentifier() || previousNonWhiteSpace?.isDoubleQuotedString())\n  ) {\n    return StatementPosition.AfterGroupBy;\n  }\n\n  if (\n    previousNonWhiteSpace?.is(SQLTokenTypes.Keyword, BY) &&\n    previousNonWhiteSpace?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, ORDER)\n  ) {\n    return StatementPosition.AfterOrderByKeywords;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, ORDER) &&\n    previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis) &&\n    previousNonWhiteSpace?.getPreviousNonWhiteSpaceToken()?.is(SQLTokenTypes.Function)\n  ) {\n    return StatementPosition.AfterOrderByFunction;\n  }\n\n  if (previousKeyword?.is(SQLTokenTypes.Keyword, DESC) || previousKeyword?.is(SQLTokenTypes.Keyword, ASC)) {\n    return StatementPosition.AfterOrderByDirection;\n  }\n\n  return StatementPosition.Unknown;\n}\n","import { StatementPosition, SuggestionKind } from '../../monarch/types';\n\nexport function getSuggestionKinds(statementPosition: StatementPosition): SuggestionKind[] {\n  switch (statementPosition) {\n    case StatementPosition.SelectKeyword:\n      return [SuggestionKind.SelectKeyword];\n    case StatementPosition.AfterSelectKeyword:\n      return [SuggestionKind.FunctionsWithArguments];\n    case StatementPosition.AfterSelectFuncFirstArgument:\n      return [SuggestionKind.Metrics];\n    case StatementPosition.AfterFromKeyword:\n      return [SuggestionKind.Namespaces, SuggestionKind.SchemaKeyword];\n    case StatementPosition.SchemaFuncFirstArgument:\n      return [SuggestionKind.Namespaces];\n    case StatementPosition.SchemaFuncExtraArgument:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.FromKeyword:\n      return [SuggestionKind.FromKeyword];\n    case StatementPosition.AfterFrom:\n      return [\n        SuggestionKind.WhereKeyword,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n      ];\n    case StatementPosition.WhereKey:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.WhereComparisonOperator:\n      return [SuggestionKind.ComparisonOperators];\n    case StatementPosition.WhereValue:\n      return [SuggestionKind.LabelValues];\n    case StatementPosition.AfterWhereValue:\n      return [\n        SuggestionKind.LogicalOperators,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n      ];\n    case StatementPosition.AfterGroupByKeywords:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.AfterGroupBy:\n      return [SuggestionKind.OrderByKeywords, SuggestionKind.LimitKeyword];\n    case StatementPosition.AfterOrderByKeywords:\n      return [SuggestionKind.FunctionsWithoutArguments];\n    case StatementPosition.AfterOrderByFunction:\n      return [SuggestionKind.SortOrderDirectionKeyword, SuggestionKind.LimitKeyword];\n    case StatementPosition.AfterOrderByDirection:\n      return [SuggestionKind.LimitKeyword];\n  }\n\n  return [];\n}\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { FROM, SCHEMA, SELECT } from '../language';\n\nimport { SQLTokenTypes } from './types';\n\nexport const getSelectToken = (currentToken: LinkedToken | null) =>\n  currentToken?.getPreviousOfType(SQLTokenTypes.Keyword, SELECT) ?? null;\n\nexport const getSelectStatisticToken = (currentToken: LinkedToken | null) => {\n  const assumedStatisticToken = getSelectToken(currentToken)?.getNextNonWhiteSpaceToken();\n  return assumedStatisticToken?.isVariable() || assumedStatisticToken?.isFunction() ? assumedStatisticToken : null;\n};\n\nexport const getMetricNameToken = (currentToken: LinkedToken | null) => {\n  // statistic function is followed by `(` and then an argument\n  const assumedMetricNameToken = getSelectStatisticToken(currentToken)?.next?.next;\n  return assumedMetricNameToken?.isVariable() || assumedMetricNameToken?.isIdentifier() ? assumedMetricNameToken : null;\n};\n\nexport const getFromKeywordToken = (currentToken: LinkedToken | null) => {\n  const selectToken = getSelectToken(currentToken);\n  return selectToken?.getNextOfType(SQLTokenTypes.Keyword, FROM);\n};\n\nexport const getNamespaceToken = (currentToken: LinkedToken | null) => {\n  const fromToken = getFromKeywordToken(currentToken);\n  const nextNonWhiteSpace = fromToken?.getNextNonWhiteSpaceToken();\n  if (\n    nextNonWhiteSpace?.isDoubleQuotedString() ||\n    (nextNonWhiteSpace?.isVariable() && nextNonWhiteSpace?.value.toUpperCase() !== SCHEMA)\n  ) {\n    // schema is not used\n    return nextNonWhiteSpace;\n  } else if (nextNonWhiteSpace?.isKeyword() && nextNonWhiteSpace.next?.is(SQLTokenTypes.Parenthesis, '(')) {\n    // schema is specified\n    const assumedNamespaceToken = nextNonWhiteSpace.next?.next;\n    if (assumedNamespaceToken?.isDoubleQuotedString() || assumedNamespaceToken?.isVariable()) {\n      return assumedNamespaceToken;\n    }\n  }\n  return null;\n};\n","import { uniq } from 'lodash';\n\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { ResourcesAPI } from '../../../resources/ResourcesAPI';\nimport { CompletionItemProvider } from '../../monarch/CompletionItemProvider';\nimport { LinkedToken } from '../../monarch/LinkedToken';\nimport { TRIGGER_SUGGEST } from '../../monarch/commands';\nimport { SuggestionKind, CompletionItemPriority, StatementPosition } from '../../monarch/types';\nimport {\n  BY,\n  FROM,\n  GROUP,\n  LIMIT,\n  ORDER,\n  SCHEMA,\n  SELECT,\n  ASC,\n  DESC,\n  WHERE,\n  COMPARISON_OPERATORS,\n  LOGICAL_OPERATORS,\n  STATISTICS,\n} from '../language';\n\nimport { getStatementPosition } from './statementPosition';\nimport { getSuggestionKinds } from './suggestionKind';\nimport { getMetricNameToken, getNamespaceToken } from './tokenUtils';\nimport { SQLTokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class SQLCompletionItemProvider extends CompletionItemProvider {\n  region: string;\n\n  constructor(resources: ResourcesAPI, templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(resources, templateSrv);\n    this.region = resources.getActualRegion() ?? '';\n    this.getStatementPosition = getStatementPosition;\n    this.getSuggestionKinds = getSuggestionKinds;\n    this.tokenTypes = SQLTokenTypes;\n  }\n\n  setRegion(region: string) {\n    this.region = region;\n  }\n\n  async getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    let suggestions: CompletionItem[] = [];\n    const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n    const range =\n      invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n\n    const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n      const item: CompletionItem = {\n        label: value,\n        insertText: value,\n        kind: monaco.languages.CompletionItemKind.Field,\n        range,\n        sortText: CompletionItemPriority.Medium,\n        ...rest,\n      };\n      return item;\n    };\n\n    function addSuggestion(value: string, rest: Partial<CompletionItem> = {}) {\n      suggestions = [...suggestions, toCompletionItem(value, rest)];\n    }\n\n    for (const suggestion of suggestionKinds) {\n      switch (suggestion) {\n        case SuggestionKind.SelectKeyword:\n          addSuggestion(SELECT, {\n            insertText: `${SELECT} $0`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.FunctionsWithArguments:\n          STATISTICS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.FunctionsWithoutArguments:\n          STATISTICS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s}() `,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.Metrics:\n          {\n            const namespaceToken = getNamespaceToken(currentToken);\n            if (namespaceToken?.value) {\n              // if a namespace is specified, only suggest metrics for the namespace\n              const metrics = await this.resources.getMetrics({\n                namespace: namespaceToken?.value.replace(/\\\"/g, ''),\n                region: this.region,\n              });\n              metrics.forEach((m) => m.value && addSuggestion(m.value));\n            } else {\n              // If no namespace is specified in the query, just list all metrics\n              const metrics = await this.resources.getAllMetrics({ region: this.region });\n              uniq(metrics.map((m) => m.metricName)).forEach((m) => m && addSuggestion(m, { insertText: m }));\n            }\n          }\n          break;\n\n        case SuggestionKind.FromKeyword:\n          addSuggestion(FROM, {\n            insertText: `${FROM} `,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.SchemaKeyword:\n          addSuggestion(SCHEMA, {\n            sortText: CompletionItemPriority.High,\n            insertText: `${SCHEMA}($0)`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            command: TRIGGER_SUGGEST,\n            kind: monaco.languages.CompletionItemKind.Function,\n          });\n          break;\n\n        case SuggestionKind.Namespaces:\n          const metricNameToken = getMetricNameToken(currentToken);\n          let namespaces = [];\n          if (metricNameToken?.value) {\n            // if a metric is specified, only suggest namespaces that actually have that metric\n            const metrics = await this.resources.getMetrics({ region: this.region });\n            const metricName = this.templateSrv.replace(metricNameToken.value);\n            namespaces = metrics.filter((m) => m.metricName === metricName).map((m) => m.namespace);\n          } else {\n            // if no metric is specified, just suggest all namespaces\n            const ns = await this.resources.getNamespaces();\n            namespaces = ns.map((n) => n.value);\n          }\n          namespaces.map((n) => addSuggestion(`\"${n}\"`, { insertText: `\"${n}\"` }));\n          break;\n\n        case SuggestionKind.LabelKeys:\n          {\n            const metricNameToken = getMetricNameToken(currentToken);\n            const namespaceToken = getNamespaceToken(currentToken);\n            if (namespaceToken?.value) {\n              let dimensionFilters = {};\n              let labelKeyTokens;\n              if (statementPosition === StatementPosition.SchemaFuncExtraArgument) {\n                labelKeyTokens = namespaceToken?.getNextUntil(this.tokenTypes.Parenthesis, [\n                  this.tokenTypes.Delimiter,\n                  this.tokenTypes.Whitespace,\n                ]);\n              } else if (statementPosition === StatementPosition.AfterGroupByKeywords) {\n                labelKeyTokens = currentToken?.getPreviousUntil(this.tokenTypes.Keyword, [\n                  this.tokenTypes.Delimiter,\n                  this.tokenTypes.Whitespace,\n                ]);\n              }\n              dimensionFilters = (labelKeyTokens || []).reduce((acc, curr) => {\n                return { ...acc, [curr.value]: null };\n              }, {});\n              const keys = await this.resources.getDimensionKeys({\n                namespace: this.templateSrv.replace(namespaceToken.value.replace(/\\\"/g, '')),\n                region: this.templateSrv.replace(this.region),\n                metricName: metricNameToken?.value,\n                dimensionFilters,\n              });\n              keys.map((m) => {\n                const key = /[\\s\\.-]/.test(m.value ?? '') ? `\"${m.value}\"` : m.value;\n                key && addSuggestion(key);\n              });\n            }\n          }\n          break;\n\n        case SuggestionKind.LabelValues:\n          {\n            const namespaceToken = getNamespaceToken(currentToken);\n            const metricNameToken = getMetricNameToken(currentToken);\n            const labelKey = currentToken?.getPreviousNonWhiteSpaceToken()?.getPreviousNonWhiteSpaceToken();\n            if (namespaceToken?.value && labelKey?.value && metricNameToken?.value) {\n              const values = await this.resources.getDimensionValues({\n                region: this.region,\n                namespace: namespaceToken.value.replace(/\\\"/g, ''),\n                metricName: metricNameToken.value,\n                dimensionKey: labelKey.value,\n              });\n              values.map((o) =>\n                addSuggestion(`'${o.value}'`, { insertText: `'${o.value}' `, command: TRIGGER_SUGGEST })\n              );\n            }\n          }\n          break;\n\n        case SuggestionKind.LogicalOperators:\n          LOGICAL_OPERATORS.map((o) =>\n            addSuggestion(`${o}`, {\n              insertText: `${o} `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumHigh,\n            })\n          );\n          break;\n\n        case SuggestionKind.WhereKeyword:\n          addSuggestion(`${WHERE}`, {\n            insertText: `${WHERE} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.High,\n          });\n          break;\n\n        case SuggestionKind.ComparisonOperators:\n          COMPARISON_OPERATORS.map((o) => addSuggestion(`${o}`, { insertText: `${o} `, command: TRIGGER_SUGGEST }));\n          break;\n\n        case SuggestionKind.GroupByKeywords:\n          addSuggestion(`${GROUP} ${BY}`, {\n            insertText: `${GROUP} ${BY} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.MediumHigh,\n          });\n          break;\n\n        case SuggestionKind.OrderByKeywords:\n          addSuggestion(`${ORDER} ${BY}`, {\n            insertText: `${ORDER} ${BY} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.Medium,\n          });\n          break;\n\n        case SuggestionKind.LimitKeyword:\n          addSuggestion(LIMIT, { insertText: `${LIMIT} `, sortText: CompletionItemPriority.MediumLow });\n          break;\n\n        case SuggestionKind.SortOrderDirectionKeyword:\n          [ASC, DESC].map((s) =>\n            addSuggestion(s, {\n              insertText: `${s} `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n      }\n    }\n\n    this.templateSrv.getVariables().map((v) => {\n      const variable = `$${v.name}`;\n      addSuggestion(variable, {\n        range,\n        label: variable,\n        insertText: variable,\n        kind: monaco.languages.CompletionItemKind.Variable,\n        sortText: CompletionItemPriority.Low,\n      });\n    });\n\n    return suggestions;\n  }\n}\n","import { TokenTypes } from '../../monarch/types';\n\nexport const MetricMathTokenTypes: TokenTypes = {\n  Parenthesis: 'delimiter.parenthesis.cloudwatch-MetricMath',\n  Whitespace: 'white.cloudwatch-MetricMath',\n  Keyword: 'keyword.cloudwatch-MetricMath',\n  Delimiter: 'delimiter.cloudwatch-MetricMath',\n  Operator: 'operator.cloudwatch-MetricMath',\n  Identifier: 'identifier.cloudwatch-MetricMath',\n  Type: 'type.cloudwatch-MetricMath',\n  Function: 'predefined.cloudwatch-MetricMath',\n  Number: 'number.cloudwatch-MetricMath',\n  String: 'string.cloudwatch-MetricMath',\n  Variable: 'variable.cloudwatch-MetricMath',\n};\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { StatementPosition } from '../../monarch/types';\n\nimport { MetricMathTokenTypes } from './types';\n\nexport function getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n\n  if (currentToken && currentToken.isString()) {\n    return StatementPosition.WithinString;\n  }\n\n  if (currentToken && previousNonWhiteSpace) {\n    const currentFunction = currentToken.getPreviousOfType(MetricMathTokenTypes.Function);\n    const isAfterComma = previousNonWhiteSpace.is(MetricMathTokenTypes.Delimiter, ',');\n    const isWithinSearch = currentFunction && currentFunction.value === 'SEARCH';\n    const allTokensAfterStartOfSearch =\n      currentToken.getPreviousUntil(MetricMathTokenTypes.Function, [], 'SEARCH') || [];\n\n    if (isWithinSearch) {\n      // if there's only one ' then we're still within the first arg\n      if (allTokensAfterStartOfSearch.filter(({ value }) => value === \"'\").length === 1) {\n        return StatementPosition.WithinString;\n      }\n\n      // if there was a , before the last , and it happened after the start of SEARCH\n      const lastComma = previousNonWhiteSpace.getPreviousOfType(MetricMathTokenTypes.Delimiter, ',');\n      if (lastComma) {\n        const lastCommaIsAfterSearch =\n          lastComma.range.startColumn > currentFunction.range.startColumn &&\n          lastComma.range.startLineNumber >= currentFunction.range.startLineNumber;\n        if (lastCommaIsAfterSearch) {\n          return StatementPosition.SearchFuncThirdArg;\n        }\n      }\n\n      // otherwise assume it's the second arg\n      return StatementPosition.SearchFuncSecondArg;\n    }\n\n    if (!isWithinSearch && isAfterComma) {\n      return StatementPosition.PredefinedFuncSecondArg;\n    }\n  }\n\n  if (previousNonWhiteSpace?.endsWith(')')) {\n    return StatementPosition.AfterFunction;\n  }\n\n  if (!currentToken || !currentToken.isString()) {\n    return StatementPosition.PredefinedFunction;\n  }\n\n  return StatementPosition.Unknown;\n}\n","import { StatementPosition, SuggestionKind } from '../../monarch/types';\n\nexport function getSuggestionKinds(statementPosition: StatementPosition): SuggestionKind[] {\n  switch (statementPosition) {\n    case StatementPosition.PredefinedFunction:\n      return [SuggestionKind.FunctionsWithArguments];\n    case StatementPosition.PredefinedFuncSecondArg:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.KeywordArguments];\n    case StatementPosition.AfterFunction:\n      return [SuggestionKind.Operators];\n    case StatementPosition.SearchFuncSecondArg:\n      return [SuggestionKind.Statistic];\n    case StatementPosition.SearchFuncThirdArg:\n      return [SuggestionKind.Period];\n  }\n\n  return [];\n}\n","import { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { ResourcesAPI } from '../../../resources/ResourcesAPI';\nimport { CompletionItemProvider } from '../../monarch/CompletionItemProvider';\nimport { LinkedToken } from '../../monarch/LinkedToken';\nimport { TRIGGER_SUGGEST } from '../../monarch/commands';\nimport { SuggestionKind, CompletionItemPriority, StatementPosition } from '../../monarch/types';\nimport {\n  METRIC_MATH_FNS,\n  METRIC_MATH_KEYWORDS,\n  METRIC_MATH_OPERATORS,\n  METRIC_MATH_PERIODS,\n  METRIC_MATH_STATISTIC_KEYWORD_STRINGS,\n} from '../language';\n\nimport { getStatementPosition } from './statementPosition';\nimport { getSuggestionKinds } from './suggestionKind';\nimport { MetricMathTokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class MetricMathCompletionItemProvider extends CompletionItemProvider {\n  constructor(resources: ResourcesAPI, templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(resources, templateSrv);\n    this.getStatementPosition = getStatementPosition;\n    this.getSuggestionKinds = getSuggestionKinds;\n    this.tokenTypes = MetricMathTokenTypes;\n  }\n\n  async getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    let suggestions: CompletionItem[] = [];\n    const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n    const range =\n      invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n\n    const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n      const item: CompletionItem = {\n        label: value,\n        insertText: value,\n        kind: monaco.languages.CompletionItemKind.Field,\n        range,\n        sortText: CompletionItemPriority.Medium,\n        ...rest,\n      };\n      return item;\n    };\n\n    function addSuggestion(value: string, rest: Partial<CompletionItem> = {}) {\n      suggestions = [...suggestions, toCompletionItem(value, rest)];\n    }\n\n    for (const suggestion of suggestionKinds) {\n      switch (suggestion) {\n        case SuggestionKind.FunctionsWithArguments:\n          METRIC_MATH_FNS.map((f) =>\n            addSuggestion(f, {\n              insertText: f === 'SEARCH' ? `${f}('$0')` : `${f}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.KeywordArguments:\n          METRIC_MATH_KEYWORDS.map((s) =>\n            addSuggestion(s, {\n              insertText: s,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Keyword,\n              sortText: CompletionItemPriority.MediumHigh,\n            })\n          );\n          break;\n\n        case SuggestionKind.Statistic:\n          METRIC_MATH_STATISTIC_KEYWORD_STRINGS.map((s) =>\n            addSuggestion(s, {\n              insertText: `'${s}', `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n\n        case SuggestionKind.Operators:\n          METRIC_MATH_OPERATORS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s} `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n\n        case SuggestionKind.Period:\n          addSuggestion('$__period_auto', {\n            kind: monaco.languages.CompletionItemKind.Variable,\n            sortText: 'a',\n            detail: 'Sets period dynamically to adjust to selected time range.',\n          });\n          METRIC_MATH_PERIODS.map((s, idx) =>\n            addSuggestion(s.toString(), {\n              kind: monaco.languages.CompletionItemKind.Value,\n              sortText: String.fromCharCode(97 + idx), // converts index 0, 1 to \"a\", \"b\", etc needed to show the time periods in numerical order\n            })\n          );\n          break;\n      }\n    }\n\n    // always suggest template variables\n    this.templateSrv.getVariables().map((v) => {\n      const variable = `$${v.name}`;\n      addSuggestion(variable, {\n        range,\n        label: variable,\n        insertText: variable,\n        kind: monaco.languages.CompletionItemKind.Variable,\n        sortText: CompletionItemPriority.Low,\n      });\n    });\n\n    return suggestions;\n  }\n}\n","import { debounce, memoize } from 'lodash';\n\nexport default (func: (...args: any[]) => void, wait = 7000) => {\n  const mem = memoize(\n    (...args) =>\n      debounce(func, wait, {\n        leading: true,\n      }),\n    (...args) => JSON.stringify(args)\n  );\n\n  return (...args: any[]) => mem(...args)(...args);\n};\n","import { Observable, map } from 'rxjs';\n\nimport { DataSourceInstanceSettings, DataSourceRef, getDataSourceRef, ScopedVars } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { store } from 'app/store/store';\nimport { AppNotificationTimeout } from 'app/types';\n\nimport memoizedDebounce from '../memoizedDebounce';\nimport { CloudWatchJsonData, Dimensions, MetricRequest, MultiFilters, TSDBResponse } from '../types';\n\nexport abstract class CloudWatchRequest {\n  templateSrv: TemplateSrv;\n  ref: DataSourceRef;\n  dsQueryEndpoint = '/api/ds/query';\n  debouncedCustomAlert: (title: string, message: string) => void = memoizedDebounce(\n    displayCustomError,\n    AppNotificationTimeout.Error\n  );\n\n  constructor(public instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>, templateSrv: TemplateSrv) {\n    this.templateSrv = templateSrv;\n    this.ref = getDataSourceRef(instanceSettings);\n  }\n\n  awsRequest(url: string, data: MetricRequest, headers: Record<string, string> = {}): Observable<TSDBResponse> {\n    const options = {\n      method: 'POST',\n      url,\n      data,\n      headers,\n    };\n\n    return getBackendSrv()\n      .fetch<TSDBResponse>(options)\n      .pipe(map((result) => result.data));\n  }\n\n  convertDimensionFormat(dimensions: Dimensions, scopedVars: ScopedVars): Dimensions {\n    return Object.entries(dimensions).reduce((result, [key, value]) => {\n      key = this.replaceVariableAndDisplayWarningIfMulti(key, scopedVars, true, 'dimension keys');\n\n      if (Array.isArray(value)) {\n        return { ...result, [key]: value };\n      }\n\n      if (!value) {\n        return { ...result, [key]: null };\n      }\n\n      const newValues = this.expandVariableToArray(value, scopedVars);\n      return { ...result, [key]: newValues };\n    }, {});\n  }\n\n  // get the value for a given template variable\n  expandVariableToArray(value: string, scopedVars: ScopedVars): string[] {\n    const variableName = this.templateSrv.getVariableName(value);\n    const valueVar = this.templateSrv.getVariables().find(({ name }) => {\n      return name === variableName;\n    });\n\n    if (variableName && valueVar) {\n      const isMultiVariable =\n        valueVar?.type === 'custom' || valueVar?.type === 'query' || valueVar?.type === 'datasource';\n      if (isMultiVariable && valueVar.multi) {\n        return this.templateSrv.replace(value, scopedVars, 'pipe').split('|');\n      }\n      return [this.templateSrv.replace(value, scopedVars)];\n    }\n    return [value];\n  }\n\n  convertMultiFilterFormat(multiFilters: MultiFilters, fieldName?: string) {\n    return Object.entries(multiFilters).reduce((result, [key, values]) => {\n      const interpolatedKey = this.replaceVariableAndDisplayWarningIfMulti(key, {}, true, fieldName);\n      if (!values) {\n        return { ...result, [interpolatedKey]: null };\n      }\n      const initialVal: string[] = [];\n      const newValues = values.reduce((result, value) => {\n        const vals = this.expandVariableToArray(value, {});\n        return [...result, ...vals];\n      }, initialVal);\n      return { ...result, [interpolatedKey]: newValues };\n    }, {});\n  }\n\n  replaceVariableAndDisplayWarningIfMulti(\n    target?: string,\n    scopedVars?: ScopedVars,\n    displayErrorIfIsMultiTemplateVariable?: boolean,\n    fieldName?: string\n  ) {\n    if (displayErrorIfIsMultiTemplateVariable && !!target) {\n      const variables = this.templateSrv.getVariables();\n      const variable = variables.find(({ name }) => name === this.templateSrv.getVariableName(target));\n      const isMultiVariable =\n        variable?.type === 'custom' || variable?.type === 'query' || variable?.type === 'datasource';\n      if (isMultiVariable && variable.multi) {\n        this.debouncedCustomAlert(\n          'CloudWatch templating error',\n          `Multi template variables are not supported for ${fieldName || target}`\n        );\n      }\n    }\n\n    return this.templateSrv.replace(target, scopedVars);\n  }\n\n  getActualRegion(region?: string) {\n    if (region === 'default' || region === undefined || region === '') {\n      return this.instanceSettings.jsonData.defaultRegion ?? '';\n    }\n    return region;\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n}\n\nconst displayCustomError = (title: string, message: string) =>\n  store.dispatch(notifyApp(createErrorNotification(title, message)));\n","import { map, Observable } from 'rxjs';\n\nimport { DataQueryRequest, DataQueryResponse, DataSourceInstanceSettings } from '@grafana/data';\nimport { toDataQueryResponse } from '@grafana/runtime';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { CloudWatchAnnotationQuery, CloudWatchJsonData, CloudWatchQuery } from '../types';\n\nimport { CloudWatchRequest } from './CloudWatchRequest';\n\n// This class handles execution of CloudWatch annotation queries\nexport class CloudWatchAnnotationQueryRunner extends CloudWatchRequest {\n  constructor(instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>, templateSrv: TemplateSrv) {\n    super(instanceSettings, templateSrv);\n  }\n\n  handleAnnotationQuery(\n    queries: CloudWatchAnnotationQuery[],\n    options: DataQueryRequest<CloudWatchQuery>\n  ): Observable<DataQueryResponse> {\n    return this.awsRequest(this.dsQueryEndpoint, {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: queries.map((query) => ({\n        ...query,\n        statistic: this.templateSrv.replace(query.statistic),\n        region: this.templateSrv.replace(this.getActualRegion(query.region)),\n        namespace: this.templateSrv.replace(query.namespace),\n        metricName: this.templateSrv.replace(query.metricName),\n        dimensions: this.convertDimensionFormat(query.dimensions ?? {}, {}),\n        period: query.period ?? '',\n        actionPrefix: query.actionPrefix ?? '',\n        alarmNamePrefix: query.alarmNamePrefix ?? '',\n        type: 'annotationQuery',\n        datasource: this.ref,\n      })),\n    }).pipe(\n      map((r) => {\n        const frames = toDataQueryResponse({ data: r }).data;\n        return { data: frames };\n      })\n    );\n  }\n}\n","import { DataFrame, DataLink, DataQueryRequest, DataQueryResponse, ScopedVars, TimeRange } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nimport { AwsUrl, encodeUrl } from '../aws_url';\nimport { CloudWatchLogsQuery, CloudWatchQuery } from '../types';\n\ntype ReplaceFn = (\n  target?: string,\n  scopedVars?: ScopedVars,\n  displayErrorIfIsMultiTemplateVariable?: boolean,\n  fieldName?: string\n) => string;\n\nexport async function addDataLinksToLogsResponse(\n  response: DataQueryResponse,\n  request: DataQueryRequest<CloudWatchQuery>,\n  range: TimeRange,\n  replaceFn: ReplaceFn,\n  getVariableValueFn: (value: string, scopedVars: ScopedVars) => string[],\n  getRegion: (region: string) => string,\n  tracingDatasourceUid?: string\n): Promise<void> {\n  const replace = (target: string, fieldName?: string) => replaceFn(target, request.scopedVars, false, fieldName);\n  const getVariableValue = (target: string) => getVariableValueFn(target, request.scopedVars);\n\n  for (const dataFrame of response.data as DataFrame[]) {\n    const curTarget = request.targets.find((target) => target.refId === dataFrame.refId) as CloudWatchLogsQuery;\n    const interpolatedRegion = getRegion(replace(curTarget.region ?? '', 'region'));\n\n    for (const field of dataFrame.fields) {\n      if (field.name === '@xrayTraceId' && tracingDatasourceUid) {\n        getRegion(replace(curTarget.region ?? '', 'region'));\n        const xrayLink = await createInternalXrayLink(tracingDatasourceUid, interpolatedRegion);\n        if (xrayLink) {\n          field.config.links = [xrayLink];\n        }\n      } else {\n        // Right now we add generic link to open the query in xray console to every field so it shows in the logs row\n        // details. Unfortunately this also creates link for all values inside table which look weird.\n        field.config.links = [createAwsConsoleLink(curTarget, range, interpolatedRegion, replace, getVariableValue)];\n      }\n    }\n  }\n}\n\nasync function createInternalXrayLink(datasourceUid: string, region: string) {\n  let ds;\n  try {\n    ds = await getDataSourceSrv().get(datasourceUid);\n  } catch (e) {\n    console.error('Could not load linked xray data source, it was probably deleted after it was linked', e);\n    return undefined;\n  }\n\n  return {\n    title: ds.name,\n    url: '',\n    internal: {\n      query: { query: '${__value.raw}', queryType: 'getTrace', region: region },\n      datasourceUid: datasourceUid,\n      datasourceName: ds.name,\n    },\n  } as DataLink;\n}\n\nfunction createAwsConsoleLink(\n  target: CloudWatchLogsQuery,\n  range: TimeRange,\n  region: string,\n  replace: (target: string, fieldName?: string) => string,\n  getVariableValue: (value: string) => string[]\n) {\n  const arns = (target.logGroups ?? [])\n    .filter((group) => group?.arn)\n    .map((group) => (group.arn ?? '').replace(/:\\*$/, '')); // remove `:*` from end of arn\n  const logGroupNames = target.logGroupNames ?? [];\n  const sources = arns?.length ? arns : logGroupNames;\n  const interpolatedExpression = target.expression ? replace(target.expression) : '';\n  const interpolatedGroups = sources?.flatMap(getVariableValue);\n\n  const urlProps: AwsUrl = {\n    end: range.to.toISOString(),\n    start: range.from.toISOString(),\n    timeType: 'ABSOLUTE',\n    tz: 'UTC',\n    editorString: interpolatedExpression,\n    isLiveTail: false,\n    source: interpolatedGroups,\n  };\n\n  const encodedUrl = encodeUrl(urlProps, region);\n  return {\n    url: encodedUrl,\n    title: 'View in CloudWatch console',\n    targetBlank: true,\n  };\n}\n","import { Observable, Subscription } from 'rxjs';\n\nimport { DataFrame, DataFrameJSON, DataQueryError } from '@grafana/data';\nimport { FetchError, toDataQueryResponse } from '@grafana/runtime';\n\nimport { StartQueryRequest } from '../types';\n\ntype Result = { frames: DataFrameJSON[]; error?: string };\n\n/**\n * A retry strategy specifically for cloud watch logs query. Cloud watch logs queries need first starting the query\n * and the polling for the results. The start query can fail because of the concurrent queries rate limit,\n * and so we have to retry the start query call if there is already lot of queries running.\n *\n * As we send multiple queries in a single request some can fail and some can succeed and we have to also handle those\n * cases by only retrying the failed queries. We retry the failed queries until we hit the time limit or all queries\n * succeed and only then we pass the data forward. This means we wait longer but makes the code a bit simpler as we\n * can treat starting the query and polling as steps in a pipeline.\n * @param queryFun\n * @param targets\n * @param options\n */\nexport function runWithRetry(\n  queryFun: (targets: StartQueryRequest[]) => Observable<DataFrame[]>,\n  targets: StartQueryRequest[],\n  timeoutFunc: (retry: number, startTime: number) => boolean\n): Observable<{ frames: DataFrame[]; error?: DataQueryError }> {\n  const startTime = new Date();\n  let retries = 0;\n  let timerID: any;\n  let subscription: Subscription;\n  let collected = {};\n\n  const retryWaitFunction = (retry: number) => {\n    return Math.pow(2, retry) * 1000 + Math.random() * 100;\n  };\n\n  return new Observable((observer) => {\n    // Run function is where the logic takes place. We have it in a function so we can call it recursively.\n    function run(currentQueryParams: StartQueryRequest[]) {\n      subscription = queryFun(currentQueryParams).subscribe({\n        next(frames) {\n          // In case we successfully finished, merge the current response with whatever we already collected.\n          const collectedPreviously = toDataQueryResponse({ data: { results: collected } }).data || [];\n          observer.next({ frames: [...collectedPreviously, ...frames] });\n          observer.complete();\n        },\n        error(error: FetchError<{ results?: Record<string, Result> }> | string) {\n          // In case of error we first try to figure out what kind of error it is\n\n          // This means it was a generic 500 error probably so we just pass it on\n          if (typeof error === 'string') {\n            observer.error(error);\n            return;\n          }\n\n          // In case of multiple queries this some can error while some may be ok\n          const errorData = splitErrorData(error);\n\n          if (!errorData) {\n            // Not sure what happened but the error structure wasn't what we expected\n            observer.error(error);\n            return;\n          }\n\n          if (!errorData!.errors.length) {\n            // So there is no limit error but some other errors so nothing to retry so we just pass it as it would be\n            // otherwise.\n            observer.error(error);\n            return;\n          }\n\n          if (timeoutFunc(retries, startTime.valueOf())) {\n            // We timed out but we could have started some queries\n            if (Object.keys(collected).length || Object.keys(errorData.good).length) {\n              const dataResponse = toDataQueryResponse({\n                data: {\n                  results: {\n                    ...(errorData.good ?? {}),\n                    ...(collected ?? {}),\n                  },\n                },\n              });\n              dataResponse.error = {\n                ...(dataResponse.error ?? {}),\n                message: `Some queries timed out: ${errorData.errorMessage}`,\n              };\n              // So we consider this a partial success and pass the data forward but also with error to be shown to\n              // the user.\n              observer.next({\n                error: dataResponse.error,\n                frames: dataResponse.data,\n              });\n              observer.complete();\n            } else {\n              // So we timed out and there was no data to pass forward so we just pass the error\n              const dataResponse = toDataQueryResponse({ data: { results: error.data?.results ?? {} } });\n              observer.error(dataResponse.error);\n            }\n            return;\n          }\n\n          collected = {\n            ...collected,\n            ...errorData!.good,\n          };\n\n          timerID = setTimeout(\n            () => {\n              retries++;\n              run(errorData!.errors);\n            },\n            // We want to know how long to wait for the next retry. First time this will be 0.\n            retryWaitFunction(retries + 1)\n          );\n        },\n      });\n    }\n    run(targets);\n    return () => {\n      // We clear only the latest timer and subscription but the observable should complete after one response so\n      // there should not be more things running at the same time.\n      clearTimeout(timerID);\n      subscription.unsubscribe();\n    };\n  });\n}\n\nfunction splitErrorData(error: FetchError<{ results?: Record<string, Result> }>) {\n  const results = error.data?.results;\n  if (!results) {\n    return undefined;\n  }\n  return Object.keys(results).reduce<{\n    errors: StartQueryRequest[];\n    good: Record<string, Result>;\n    errorMessage: string;\n  }>(\n    (acc, refId) => {\n      if (results[refId].error?.startsWith('LimitExceededException')) {\n        acc.errorMessage = results[refId].error!;\n        acc.errors.push(error.config.data.queries.find((q: any) => q.refId === refId));\n      } else {\n        acc.good[refId] = results[refId];\n      }\n      return acc;\n    },\n    { errors: [], good: {}, errorMessage: '' }\n  );\n}\n","import { SchedulerLike, Observable, SchedulerAction, Subscriber, asyncScheduler } from 'rxjs';\n\n/**\n * Creates an Observable that emits sequential numbers after increasing intervals of time\n * starting with `startPeriod`, ending with `endPeriod` and incrementing by `step`.\n */\nexport const increasingInterval = (\n  { startPeriod = 0, endPeriod = 5000, step = 1000 },\n  scheduler: SchedulerLike = asyncScheduler\n): Observable<number> => {\n  return new Observable<number>((subscriber) => {\n    const state: IntervalState = {\n      subscriber,\n      counter: 0,\n      period: startPeriod,\n      step,\n      endPeriod,\n    };\n\n    subscriber.add(scheduler.schedule(dispatch, startPeriod, state));\n    return subscriber;\n  });\n};\n\nfunction dispatch(this: SchedulerAction<IntervalState>, state?: IntervalState) {\n  if (!state) {\n    return;\n  }\n  const { subscriber, counter, period, step, endPeriod } = state;\n  subscriber.next(counter);\n  const newPeriod = Math.min(period + step, endPeriod);\n  this.schedule({ subscriber, counter: counter + 1, period: newPeriod, step, endPeriod }, newPeriod);\n}\n\ninterface IntervalState {\n  subscriber: Subscriber<number>;\n  counter: number;\n  period: number;\n  endPeriod: number;\n  step: number;\n}\n","import { set, uniq } from 'lodash';\nimport {\n  catchError,\n  concatMap,\n  finalize,\n  from,\n  lastValueFrom,\n  map,\n  mergeMap,\n  Observable,\n  repeat,\n  scan,\n  share,\n  takeWhile,\n  tap,\n  zip,\n} from 'rxjs';\n\nimport {\n  DataFrame,\n  DataQueryError,\n  DataQueryErrorType,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  LoadingState,\n  LogRowModel,\n  rangeUtil,\n} from '@grafana/data';\nimport { BackendDataSourceResponse, config, FetchError, FetchResponse, toDataQueryResponse } from '@grafana/runtime';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { RowContextOptions } from '../../../../features/logs/components/LogRowContextProvider';\nimport {\n  CloudWatchJsonData,\n  CloudWatchLogsQuery,\n  CloudWatchLogsQueryStatus,\n  CloudWatchLogsRequest,\n  CloudWatchQuery,\n  GetLogEventsRequest,\n  LogAction,\n  QueryParam,\n  StartQueryRequest,\n} from '../types';\nimport { addDataLinksToLogsResponse } from '../utils/datalinks';\nimport { runWithRetry } from '../utils/logsRetry';\nimport { increasingInterval } from '../utils/rxjs/increasingInterval';\nimport { interpolateStringArrayUsingSingleOrMultiValuedVariable } from '../utils/templateVariableUtils';\n\nimport { CloudWatchRequest } from './CloudWatchRequest';\n\nexport const LOG_IDENTIFIER_INTERNAL = '__log__grafana_internal__';\nexport const LOGSTREAM_IDENTIFIER_INTERNAL = '__logstream__grafana_internal__';\n\n// This class handles execution of CloudWatch logs query data queries\nexport class CloudWatchLogsQueryRunner extends CloudWatchRequest {\n  logsTimeout: string;\n  logQueries: Record<string, { id: string; region: string; statsQuery: boolean }> = {};\n  tracingDataSourceUid?: string;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>,\n    templateSrv: TemplateSrv,\n    private readonly timeSrv: TimeSrv\n  ) {\n    super(instanceSettings, templateSrv);\n\n    this.tracingDataSourceUid = instanceSettings.jsonData.tracingDatasourceUid;\n    this.logsTimeout = instanceSettings.jsonData.logsTimeout || '15m';\n  }\n\n  /**\n   * Handle log query. The log query works by starting the query on the CloudWatch and then periodically polling for\n   * results.\n   * @param logQueries\n   * @param options\n   */\n  handleLogQueries = (\n    logQueries: CloudWatchLogsQuery[],\n    options: DataQueryRequest<CloudWatchQuery>\n  ): Observable<DataQueryResponse> => {\n    const validLogQueries = logQueries.filter(this.filterQuery);\n\n    const startQueryRequests: StartQueryRequest[] = validLogQueries.map((target: CloudWatchLogsQuery) => {\n      const interpolatedLogGroupArns = interpolateStringArrayUsingSingleOrMultiValuedVariable(\n        this.templateSrv,\n        (target.logGroups || this.instanceSettings.jsonData.logGroups || []).map((lg) => lg.arn),\n        options.scopedVars\n      );\n\n      // need to support legacy format variables too\n      const interpolatedLogGroupNames = interpolateStringArrayUsingSingleOrMultiValuedVariable(\n        this.templateSrv,\n        target.logGroupNames || this.instanceSettings.jsonData.defaultLogGroups || [],\n        options.scopedVars,\n        'text'\n      );\n\n      // if a log group template variable expands to log group that has already been selected in the log group picker, we need to remove duplicates.\n      // Otherwise the StartLogQuery API will return a permission error\n      const logGroups = uniq(interpolatedLogGroupArns).map((arn) => ({ arn, name: arn }));\n      const logGroupNames = uniq(interpolatedLogGroupNames);\n\n      return {\n        refId: target.refId,\n        region: this.templateSrv.replace(this.getActualRegion(target.region)),\n        queryString: this.templateSrv.replace(target.expression || '', options.scopedVars),\n        logGroups,\n        logGroupNames,\n      };\n    });\n\n    const startTime = new Date();\n    const timeoutFunc = () => {\n      return Date.now() >= startTime.valueOf() + rangeUtil.intervalToMs(this.logsTimeout);\n    };\n\n    return runWithRetry(\n      (targets: StartQueryRequest[]) => {\n        return this.makeLogActionRequest('StartQuery', targets);\n      },\n      startQueryRequests,\n      timeoutFunc\n    ).pipe(\n      mergeMap(({ frames, error }: { frames: DataFrame[]; error?: DataQueryError }) =>\n        // This queries for the results\n        this.logsQuery(\n          frames.map((dataFrame) => ({\n            queryId: dataFrame.fields[0].values.get(0),\n            region: dataFrame.meta?.custom?.['Region'] ?? 'default',\n            refId: dataFrame.refId!,\n            statsGroups: logQueries.find((target) => target.refId === dataFrame.refId)?.statsGroups,\n          })),\n          timeoutFunc\n        ).pipe(\n          map((response: DataQueryResponse) => {\n            if (!response.error && error) {\n              response.error = error;\n            }\n            return response;\n          })\n        )\n      ),\n      mergeMap((dataQueryResponse) => {\n        return from(\n          (async () => {\n            await addDataLinksToLogsResponse(\n              dataQueryResponse,\n              options,\n              this.timeSrv.timeRange(),\n              this.replaceVariableAndDisplayWarningIfMulti.bind(this),\n              this.expandVariableToArray.bind(this),\n              this.getActualRegion.bind(this),\n              this.tracingDataSourceUid\n            );\n\n            return dataQueryResponse;\n          })()\n        );\n      })\n    );\n  };\n\n  /**\n   * Checks progress and polls data of a started logs query with some retry logic.\n   * @param queryParams\n   */\n  logsQuery(queryParams: QueryParam[], timeoutFunc: () => boolean): Observable<DataQueryResponse> {\n    this.logQueries = {};\n    queryParams.forEach((param) => {\n      this.logQueries[param.refId] = {\n        id: param.queryId,\n        region: param.region,\n        statsQuery: (param.statsGroups?.length ?? 0) > 0 ?? false,\n      };\n    });\n\n    const dataFrames = increasingInterval({ startPeriod: 100, endPeriod: 1000, step: 300 }).pipe(\n      concatMap((_) => this.makeLogActionRequest('GetQueryResults', queryParams)),\n      repeat(),\n      share()\n    );\n\n    const initialValue: { failures: number; prevRecordsMatched: Record<string, number> } = {\n      failures: 0,\n      prevRecordsMatched: {},\n    };\n    const consecutiveFailedAttempts = dataFrames.pipe(\n      scan(({ failures, prevRecordsMatched }, frames) => {\n        failures++;\n        for (const frame of frames) {\n          const recordsMatched = frame.meta?.stats?.find((stat) => stat.displayName === 'Records scanned')?.value!;\n          if (recordsMatched > (prevRecordsMatched[frame.refId!] ?? 0)) {\n            failures = 0;\n          }\n          prevRecordsMatched[frame.refId!] = recordsMatched;\n        }\n\n        return { failures, prevRecordsMatched };\n      }, initialValue),\n      map(({ failures }) => failures),\n      share()\n    );\n\n    const queryResponse: Observable<DataQueryResponse> = zip(dataFrames, consecutiveFailedAttempts).pipe(\n      tap(([dataFrames]) => {\n        for (const frame of dataFrames) {\n          if (\n            [\n              CloudWatchLogsQueryStatus.Complete,\n              CloudWatchLogsQueryStatus.Cancelled,\n              CloudWatchLogsQueryStatus.Failed,\n            ].includes(frame.meta?.custom?.['Status']) &&\n            this.logQueries.hasOwnProperty(frame.refId!)\n          ) {\n            delete this.logQueries[frame.refId!];\n          }\n        }\n      }),\n      map(([dataFrames, failedAttempts]) => {\n        if (timeoutFunc()) {\n          for (const frame of dataFrames) {\n            set(frame, 'meta.custom.Status', CloudWatchLogsQueryStatus.Cancelled);\n          }\n        }\n\n        return {\n          data: dataFrames,\n          key: 'test-key',\n          state: dataFrames.every((dataFrame) =>\n            [\n              CloudWatchLogsQueryStatus.Complete,\n              CloudWatchLogsQueryStatus.Cancelled,\n              CloudWatchLogsQueryStatus.Failed,\n            ].includes(dataFrame.meta?.custom?.['Status'])\n          )\n            ? LoadingState.Done\n            : LoadingState.Loading,\n          error: timeoutFunc()\n            ? {\n                message: `error: query timed out after ${failedAttempts} attempts`,\n                type: DataQueryErrorType.Timeout,\n              }\n            : undefined,\n        };\n      }),\n      takeWhile(({ state }) => state !== LoadingState.Error && state !== LoadingState.Done, true)\n    );\n\n    return withTeardown(queryResponse, () => this.stopQueries());\n  }\n\n  stopQueries() {\n    if (Object.keys(this.logQueries).length > 0) {\n      this.makeLogActionRequest(\n        'StopQuery',\n        Object.values(this.logQueries).map((logQuery) => ({\n          queryId: logQuery.id,\n          region: logQuery.region,\n          queryString: '',\n          refId: '',\n        }))\n      ).pipe(\n        finalize(() => {\n          this.logQueries = {};\n        })\n      );\n    }\n  }\n\n  makeLogActionRequest(subtype: LogAction, queryParams: CloudWatchLogsRequest[]): Observable<DataFrame[]> {\n    const range = this.timeSrv.timeRange();\n\n    const requestParams = {\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n      queries: queryParams.map((param: CloudWatchLogsRequest) => ({\n        // eslint-ignore-next-line\n        refId: (param as StartQueryRequest).refId || 'A',\n        intervalMs: 1, // dummy\n        maxDataPoints: 1, // dummy\n        datasource: this.ref,\n        type: 'logAction',\n        subtype: subtype,\n        ...param,\n      })),\n    };\n\n    const resultsToDataFrames = (\n      val:\n        | { data: BackendDataSourceResponse | undefined }\n        | FetchResponse<BackendDataSourceResponse | undefined>\n        | DataQueryError\n    ): DataFrame[] => toDataQueryResponse(val).data || [];\n\n    return this.awsRequest(this.dsQueryEndpoint, requestParams, {\n      'X-Cache-Skip': 'true',\n    }).pipe(\n      map((response) => resultsToDataFrames({ data: response })),\n      catchError((err: FetchError) => {\n        if (config.featureToggles.datasourceQueryMultiStatus && err.status === 207) {\n          throw err;\n        }\n\n        if (err.status === 400) {\n          throw err;\n        }\n\n        if (err.data?.error) {\n          throw err.data.error;\n        } else if (err.data?.message) {\n          // In PROD we do not supply .error\n          throw err.data.message;\n        }\n\n        throw err;\n      })\n    );\n  }\n\n  getLogRowContext = async (\n    row: LogRowModel,\n    { limit = 10, direction = 'BACKWARD' }: RowContextOptions = {},\n    query?: CloudWatchLogsQuery\n  ): Promise<{ data: DataFrame[] }> => {\n    let logStreamField = null;\n    let logField = null;\n\n    for (const field of row.dataFrame.fields) {\n      if (field.name === LOGSTREAM_IDENTIFIER_INTERNAL) {\n        logStreamField = field;\n        if (logField !== null) {\n          break;\n        }\n      } else if (field.name === LOG_IDENTIFIER_INTERNAL) {\n        logField = field;\n        if (logStreamField !== null) {\n          break;\n        }\n      }\n    }\n\n    const requestParams: GetLogEventsRequest = {\n      limit,\n      startFromHead: direction !== 'BACKWARD',\n      region: query?.region,\n      logGroupName: parseLogGroupName(logField!.values.get(row.rowIndex)),\n      logStreamName: logStreamField!.values.get(row.rowIndex),\n    };\n\n    if (direction === 'BACKWARD') {\n      requestParams.endTime = row.timeEpochMs;\n    } else {\n      requestParams.startTime = row.timeEpochMs;\n    }\n\n    const dataFrames = await lastValueFrom(this.makeLogActionRequest('GetLogEvents', [requestParams]));\n\n    return {\n      data: dataFrames,\n    };\n  };\n\n  private filterQuery(query: CloudWatchLogsQuery) {\n    const hasMissingLegacyLogGroupNames = !query.logGroupNames?.length;\n    const hasMissingLogGroups = !query.logGroups?.length;\n    const hasMissingQueryString = !query.expression?.length;\n\n    if ((hasMissingLogGroups && hasMissingLegacyLogGroupNames) || hasMissingQueryString) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\nfunction withTeardown<T = DataQueryResponse>(observable: Observable<T>, onUnsubscribe: () => void): Observable<T> {\n  return new Observable<T>((subscriber) => {\n    const innerSub = observable.subscribe({\n      next: (val) => subscriber.next(val),\n      error: (err) => subscriber.next(err),\n      complete: () => subscriber.complete(),\n    });\n\n    return () => {\n      innerSub.unsubscribe();\n      onUnsubscribe();\n    };\n  });\n}\n\nfunction parseLogGroupName(logIdentifier: string): string {\n  const colonIndex = logIdentifier.lastIndexOf(':');\n  return logIdentifier.slice(colonIndex + 1);\n}\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  region: string;\n}\n\nexport const ThrottlingErrorMessage: FunctionComponent<Props> = ({ region }) => (\n  <p>\n    Please visit the&nbsp;\n    <a\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      className=\"text-link\"\n      href={`https://${region}.console.aws.amazon.com/servicequotas/home?region=${region}#!/services/monitoring/quotas/L-5E141212`}\n    >\n      AWS Service Quotas console\n    </a>\n    &nbsp;to request a quota increase or see our&nbsp;\n    <a\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      className=\"text-link\"\n      href=\"https://grafana.com/docs/grafana/latest/datasources/cloudwatch/#service-quotas\"\n    >\n      documentation\n    </a>\n    &nbsp;to learn more.\n  </p>\n);\n","import { findLast, isEmpty } from 'lodash';\nimport React from 'react';\nimport { catchError, map, Observable, of, throwError } from 'rxjs';\n\nimport {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  dateTimeFormat,\n  FieldType,\n  rangeUtil,\n  ScopedVars,\n  TimeRange,\n} from '@grafana/data';\nimport { toDataQueryResponse } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { store } from 'app/store/store';\nimport { AppNotificationTimeout } from 'app/types';\n\nimport { ThrottlingErrorMessage } from '../components/ThrottlingErrorMessage';\nimport memoizedDebounce from '../memoizedDebounce';\nimport { migrateMetricQuery } from '../migrations/metricQueryMigrations';\nimport {\n  CloudWatchJsonData,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n  DataQueryError,\n  MetricQuery,\n  MetricRequest,\n} from '../types';\nimport { filterMetricsQuery } from '../utils/utils';\n\nimport { CloudWatchRequest } from './CloudWatchRequest';\n\nconst displayAlert = (datasourceName: string, region: string) =>\n  store.dispatch(\n    notifyApp(\n      createErrorNotification(\n        `CloudWatch request limit reached in ${region} for data source ${datasourceName}`,\n        '',\n        undefined,\n        React.createElement(ThrottlingErrorMessage, { region }, null)\n      )\n    )\n  );\n// This class handles execution of CloudWatch metrics query data queries\nexport class CloudWatchMetricsQueryRunner extends CloudWatchRequest {\n  debouncedAlert: (datasourceName: string, region: string) => void = memoizedDebounce(\n    displayAlert,\n    AppNotificationTimeout.Error\n  );\n\n  constructor(instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>, templateSrv: TemplateSrv) {\n    super(instanceSettings, templateSrv);\n  }\n\n  handleMetricQueries = (\n    metricQueries: CloudWatchMetricsQuery[],\n    options: DataQueryRequest<CloudWatchQuery>\n  ): Observable<DataQueryResponse> => {\n    const timezoneUTCOffset = dateTimeFormat(Date.now(), {\n      timeZone: options.timezone,\n      format: 'Z',\n    }).replace(':', '');\n\n    const validMetricsQueries = metricQueries\n      .filter(this.filterMetricQuery)\n      .map((q: CloudWatchMetricsQuery): MetricQuery => {\n        const migratedQuery = migrateMetricQuery(q);\n        const migratedAndIterpolatedQuery = this.replaceMetricQueryVars(migratedQuery, options.scopedVars);\n\n        return {\n          timezoneUTCOffset,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          ...migratedAndIterpolatedQuery,\n          type: 'timeSeriesQuery',\n          datasource: this.ref,\n        };\n      });\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(validMetricsQueries)) {\n      return of({ data: [] });\n    }\n\n    const request = {\n      from: options?.range?.from.valueOf().toString(),\n      to: options?.range?.to.valueOf().toString(),\n      queries: validMetricsQueries,\n    };\n\n    return this.performTimeSeriesQuery(request, options.range);\n  };\n\n  interpolateMetricsQueryVariables(\n    query: CloudWatchMetricsQuery,\n    scopedVars: ScopedVars\n  ): Pick<\n    CloudWatchMetricsQuery,\n    'alias' | 'metricName' | 'namespace' | 'period' | 'dimensions' | 'sqlExpression' | 'expression'\n  > {\n    return {\n      alias: this.replaceVariableAndDisplayWarningIfMulti(query.alias, scopedVars),\n      metricName: this.replaceVariableAndDisplayWarningIfMulti(query.metricName, scopedVars),\n      namespace: this.replaceVariableAndDisplayWarningIfMulti(query.namespace, scopedVars),\n      period: this.replaceVariableAndDisplayWarningIfMulti(query.period, scopedVars),\n      expression: this.templateSrv.replace(query.expression, scopedVars),\n      sqlExpression: this.replaceVariableAndDisplayWarningIfMulti(query.sqlExpression, scopedVars),\n      dimensions: this.convertDimensionFormat(query.dimensions ?? {}, scopedVars),\n    };\n  }\n\n  performTimeSeriesQuery(request: MetricRequest, { from, to }: TimeRange): Observable<DataQueryResponse> {\n    return this.awsRequest(this.dsQueryEndpoint, request).pipe(\n      map((res) => {\n        const dataframes: DataFrame[] = toDataQueryResponse({ data: res }).data;\n        if (!dataframes || dataframes.length <= 0) {\n          return { data: [] };\n        }\n\n        const lastError = findLast(res.results, (v) => !!v.error);\n\n        dataframes.forEach((frame) => {\n          frame.fields.forEach((field) => {\n            if (field.type === FieldType.time) {\n              // field.config.interval is populated in order for Grafana to fill in null values at frame intervals\n              field.config.interval = frame.meta?.custom?.period * 1000;\n            }\n          });\n        });\n\n        return {\n          data: dataframes,\n          error: lastError ? { message: lastError.error } : undefined,\n        };\n      }),\n      catchError((err: DataQueryError<CloudWatchMetricsQuery>) => {\n        const isFrameError = err.data?.results;\n\n        // Error is not frame specific\n        if (!isFrameError && err.data && err.data.message === 'Metric request error' && err.data.error) {\n          err.message = err.data.error;\n          return throwError(() => err);\n        }\n\n        // The error is either for a specific frame or for all the frames\n        const results: Array<{ error?: string }> = Object.values(err.data?.results ?? {});\n        const firstErrorResult = results.find((r) => r.error);\n        if (firstErrorResult) {\n          err.message = firstErrorResult.error;\n        }\n\n        if (results.some((r) => r.error && /^Throttling:.*/.test(r.error))) {\n          const failedRedIds = Object.keys(err.data?.results ?? {});\n          const regionsAffected = Object.values(request.queries).reduce(\n            (res: string[], { refId, region }) =>\n              (refId && !failedRedIds.includes(refId)) || res.includes(region) ? res : [...res, region],\n            []\n          );\n          regionsAffected.forEach((region) => {\n            const actualRegion = this.getActualRegion(region);\n            if (actualRegion) {\n              this.debouncedAlert(this.instanceSettings.name, actualRegion);\n            }\n          });\n        }\n\n        return throwError(() => err);\n      })\n    );\n  }\n\n  filterMetricQuery(query: CloudWatchMetricsQuery): boolean {\n    return filterMetricsQuery(query);\n  }\n\n  replaceMetricQueryVars(query: CloudWatchMetricsQuery, scopedVars: ScopedVars): CloudWatchMetricsQuery {\n    query.region = this.templateSrv.replace(this.getActualRegion(query.region), scopedVars);\n    query.namespace = this.replaceVariableAndDisplayWarningIfMulti(query.namespace, scopedVars, true, 'namespace');\n    query.metricName = this.replaceVariableAndDisplayWarningIfMulti(query.metricName, scopedVars, true, 'metric name');\n    query.dimensions = this.convertDimensionFormat(query.dimensions ?? {}, scopedVars);\n    query.statistic = this.templateSrv.replace(query.statistic, scopedVars);\n    query.period = String(this.getPeriod(query, scopedVars)); // use string format for period in graph query, and alerting\n    query.id = this.templateSrv.replace(query.id, scopedVars);\n    query.expression = this.templateSrv.replace(query.expression, scopedVars);\n    query.sqlExpression = this.templateSrv.replace(query.sqlExpression, scopedVars, 'raw');\n    if (query.accountId) {\n      query.accountId = this.templateSrv.replace(query.accountId, scopedVars);\n    }\n\n    return query;\n  }\n\n  getPeriod(target: CloudWatchMetricsQuery, scopedVars: ScopedVars) {\n    let period = this.templateSrv.replace(target.period, scopedVars);\n    if (period && period.toLowerCase() !== 'auto') {\n      let p: number;\n      if (/^\\d+$/.test(period)) {\n        p = parseInt(period, 10);\n      } else {\n        p = rangeUtil.intervalToSeconds(period);\n      }\n\n      if (p < 1) {\n        p = 1;\n      }\n\n      return String(p);\n    }\n\n    return period;\n  }\n}\n","import { memoize } from 'lodash';\n\nimport { DataSourceInstanceSettings, SelectableValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { CloudWatchRequest } from '../query-runner/CloudWatchRequest';\nimport { CloudWatchJsonData, LogGroupField, MultiFilters } from '../types';\n\nimport {\n  ResourceRequest,\n  Account,\n  ResourceResponse,\n  DescribeLogGroupsRequest,\n  LogGroupResponse,\n  GetLogGroupFieldsRequest,\n  GetMetricsRequest,\n  GetDimensionKeysRequest,\n  GetDimensionValuesRequest,\n  MetricResponse,\n  SelectableResourceValue,\n} from './types';\n\nexport class ResourcesAPI extends CloudWatchRequest {\n  private memoizedGetRequest;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>, templateSrv: TemplateSrv) {\n    super(instanceSettings, templateSrv);\n    this.memoizedGetRequest = memoize(this.getRequest.bind(this), (path, parameters) =>\n      JSON.stringify({ path, parameters })\n    );\n  }\n\n  private getRequest<T>(subtype: string, parameters?: Record<string, string | string[] | number>): Promise<T> {\n    return getBackendSrv().get(`/api/datasources/${this.instanceSettings.id}/resources/${subtype}`, parameters);\n  }\n\n  getAccounts({ region }: ResourceRequest): Promise<Account[]> {\n    return this.memoizedGetRequest<Array<ResourceResponse<Account>>>('accounts', {\n      region: this.templateSrv.replace(region),\n    }).then((accounts) => accounts.map((a) => a.value));\n  }\n\n  isMonitoringAccount(region: string): Promise<boolean> {\n    return this.getAccounts({ region })\n      .then((accounts) => accounts.some((account) => account.isMonitoringAccount))\n      .catch(() => false);\n  }\n\n  getRegions() {\n    return this.memoizedGetRequest<SelectableResourceValue[]>('regions').then((regions) => [\n      { label: 'default', value: 'default', text: 'default' },\n      ...regions.filter((r) => r.value),\n    ]);\n  }\n\n  getNamespaces() {\n    return this.memoizedGetRequest<Array<ResourceResponse<string>>>('namespaces').then((namespaces) =>\n      namespaces.map((n) => ({ label: n.value, value: n.value }))\n    );\n  }\n\n  getLogGroups(params: DescribeLogGroupsRequest): Promise<Array<ResourceResponse<LogGroupResponse>>> {\n    return this.memoizedGetRequest<Array<ResourceResponse<LogGroupResponse>>>('log-groups', {\n      ...params,\n      region: this.templateSrv.replace(this.getActualRegion(params.region)),\n      accountId: this.templateSrv.replace(params.accountId),\n      listAllLogGroups: params.listAllLogGroups ? 'true' : 'false',\n    });\n  }\n\n  getLogGroupFields({\n    region,\n    arn,\n    logGroupName,\n  }: GetLogGroupFieldsRequest): Promise<Array<ResourceResponse<LogGroupField>>> {\n    return this.memoizedGetRequest<Array<ResourceResponse<LogGroupField>>>('log-group-fields', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      logGroupName: this.templateSrv.replace(logGroupName, {}),\n      logGroupArn: this.templateSrv.replace(arn),\n    });\n  }\n\n  getMetrics({ region, namespace, accountId }: GetMetricsRequest): Promise<Array<SelectableValue<string>>> {\n    if (!namespace) {\n      return Promise.resolve([]);\n    }\n\n    return this.memoizedGetRequest<Array<ResourceResponse<MetricResponse>>>('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      accountId: this.templateSrv.replace(accountId),\n    }).then((metrics) => metrics.map((m) => ({ label: m.value.name, value: m.value.name })));\n  }\n\n  getAllMetrics({ region, accountId }: GetMetricsRequest): Promise<Array<{ metricName?: string; namespace: string }>> {\n    return this.memoizedGetRequest<Array<ResourceResponse<MetricResponse>>>('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      accountId: this.templateSrv.replace(accountId),\n    }).then((metrics) => metrics.map((m) => ({ metricName: m.value.name, namespace: m.value.namespace })));\n  }\n\n  getDimensionKeys({\n    region,\n    namespace = '',\n    dimensionFilters = {},\n    metricName = '',\n    accountId,\n  }: GetDimensionKeysRequest): Promise<Array<SelectableValue<string>>> {\n    return this.memoizedGetRequest<Array<ResourceResponse<string>>>('dimension-keys', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      accountId: this.templateSrv.replace(accountId),\n      metricName: this.templateSrv.replace(metricName),\n      dimensionFilters: JSON.stringify(this.convertDimensionFormat(dimensionFilters, {})),\n    }).then((r) => r.map((r) => ({ label: r.value, value: r.value })));\n  }\n\n  getDimensionValues({\n    dimensionKey,\n    region,\n    namespace,\n    dimensionFilters = {},\n    metricName = '',\n    accountId,\n  }: GetDimensionValuesRequest) {\n    if (!namespace || !metricName) {\n      return Promise.resolve([]);\n    }\n\n    return this.memoizedGetRequest<Array<ResourceResponse<string>>>('dimension-values', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      metricName: this.templateSrv.replace(metricName.trim()),\n      dimensionKey: this.templateSrv.replace(dimensionKey),\n      dimensionFilters: JSON.stringify(this.convertDimensionFormat(dimensionFilters, {})),\n      accountId: this.templateSrv.replace(accountId),\n    }).then((r) => r.map((r) => ({ label: r.value, value: r.value })));\n  }\n\n  getEbsVolumeIds(region: string, instanceId: string) {\n    return this.memoizedGetRequest<SelectableResourceValue[]>('ebs-volume-ids', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      instanceId: this.templateSrv.replace(instanceId),\n    });\n  }\n\n  getEc2InstanceAttribute(region: string, attributeName: string, filters: MultiFilters) {\n    return this.memoizedGetRequest<SelectableResourceValue[]>('ec2-instance-attribute', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      attributeName: this.templateSrv.replace(attributeName),\n      filters: JSON.stringify(this.convertMultiFilterFormat(filters, 'filter key')),\n    });\n  }\n\n  getResourceARNs(region: string, resourceType: string, tags: MultiFilters) {\n    return this.memoizedGetRequest<SelectableResourceValue[]>('resource-arns', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      resourceType: this.templateSrv.replace(resourceType),\n      tags: JSON.stringify(this.convertMultiFilterFormat(tags, 'tag name')),\n    });\n  }\n}\n","import { omit } from 'lodash';\n\nimport { Dimensions, VariableQuery, VariableQueryType, OldVariableQuery, MultiFilters } from '../types';\n\nconst jsonVariable = /\\${(\\w+):json}/g;\n\nfunction isVariableQuery(rawQuery: string | VariableQuery | OldVariableQuery): rawQuery is VariableQuery {\n  return typeof rawQuery !== 'string' && typeof rawQuery.ec2Filters !== 'string' && typeof rawQuery.tags !== 'string';\n}\n\nfunction migrateMultiFilters(oldFilters: string): MultiFilters {\n  const tempFilters = oldFilters.replace(jsonVariable, '\"$$$1\"');\n  const parsedFilters: Dimensions = JSON.parse(tempFilters);\n  const newFilters: MultiFilters = {};\n  // if the old filter was {key:value} transform it to {key:[value]}\n  Object.keys(parsedFilters).forEach((key) => {\n    const value = parsedFilters[key];\n    if (typeof value === 'string') {\n      newFilters[key] = [value];\n    } else if (value !== undefined) {\n      newFilters[key] = value;\n    }\n  });\n  return newFilters;\n}\n\nexport function migrateVariableQuery(rawQuery: string | VariableQuery | OldVariableQuery): VariableQuery {\n  if (isVariableQuery(rawQuery)) {\n    return rawQuery;\n  }\n\n  // rawQuery is OldVariableQuery\n  if (typeof rawQuery !== 'string') {\n    const newQuery: VariableQuery = omit(rawQuery, ['dimensionFilters', 'ec2Filters', 'tags']);\n    newQuery.dimensionFilters = {};\n    newQuery.ec2Filters = {};\n    newQuery.tags = {};\n\n    if (rawQuery.dimensionFilters !== '' && rawQuery.ec2Filters !== '[]') {\n      const tempFilters = rawQuery.dimensionFilters.replace(jsonVariable, '\"$$$1\"');\n      try {\n        newQuery.dimensionFilters = JSON.parse(tempFilters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.dimensionFilters}`);\n      }\n    }\n    if (rawQuery.ec2Filters !== '' && rawQuery.ec2Filters !== '[]') {\n      try {\n        newQuery.ec2Filters = migrateMultiFilters(rawQuery.ec2Filters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.ec2Filters}`);\n      }\n    }\n    if (rawQuery.tags !== '' && rawQuery.tags !== '[]') {\n      try {\n        newQuery.tags = migrateMultiFilters(rawQuery.tags);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.tags}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const newQuery: VariableQuery = {\n    refId: 'CloudWatchVariableQueryEditor-VariableQuery',\n    queryType: VariableQueryType.Regions,\n    namespace: '',\n    region: '',\n    metricName: '',\n    dimensionKey: '',\n    dimensionFilters: {},\n    ec2Filters: {},\n    instanceID: '',\n    attributeName: '',\n    resourceType: '',\n    tags: {},\n  };\n\n  if (rawQuery === '') {\n    return newQuery;\n  }\n\n  if (rawQuery.match(/^regions\\(\\)/)) {\n    return newQuery;\n  }\n  if (rawQuery.match(/^namespaces\\(\\)/)) {\n    newQuery.queryType = VariableQueryType.Namespaces;\n    return newQuery;\n  }\n  const metricNameQuery = rawQuery.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n  if (metricNameQuery) {\n    newQuery.queryType = VariableQueryType.Metrics;\n    newQuery.namespace = metricNameQuery[1];\n    newQuery.region = metricNameQuery[3] || '';\n    return newQuery;\n  }\n  const dimensionKeysQuery = rawQuery.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n  if (dimensionKeysQuery) {\n    newQuery.queryType = VariableQueryType.DimensionKeys;\n    newQuery.namespace = dimensionKeysQuery[1];\n    newQuery.region = dimensionKeysQuery[3] || '';\n    return newQuery;\n  }\n\n  const dimensionValuesQuery = rawQuery.match(\n    /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\n  );\n  if (dimensionValuesQuery) {\n    newQuery.queryType = VariableQueryType.DimensionValues;\n    newQuery.region = dimensionValuesQuery[1];\n    newQuery.namespace = dimensionValuesQuery[2];\n    newQuery.metricName = dimensionValuesQuery[3];\n    newQuery.dimensionKey = dimensionValuesQuery[4];\n    newQuery.dimensionFilters = {};\n    if (!!dimensionValuesQuery[6] && dimensionValuesQuery[6] !== '[]') {\n      const tempFilters = dimensionValuesQuery[6].replace(jsonVariable, '\"$$$1\"');\n      try {\n        newQuery.dimensionFilters = JSON.parse(tempFilters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${dimensionValuesQuery[6]}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const ebsVolumeIdsQuery = rawQuery.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\n  if (ebsVolumeIdsQuery) {\n    newQuery.queryType = VariableQueryType.EBSVolumeIDs;\n    newQuery.region = ebsVolumeIdsQuery[1];\n    newQuery.instanceID = ebsVolumeIdsQuery[2];\n    return newQuery;\n  }\n\n  const ec2InstanceAttributeQuery = rawQuery.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n  if (ec2InstanceAttributeQuery) {\n    newQuery.queryType = VariableQueryType.EC2InstanceAttributes;\n    newQuery.region = ec2InstanceAttributeQuery[1];\n    newQuery.attributeName = ec2InstanceAttributeQuery[2];\n    if (ec2InstanceAttributeQuery[3] && ec2InstanceAttributeQuery[3] !== '[]') {\n      try {\n        newQuery.ec2Filters = migrateMultiFilters(ec2InstanceAttributeQuery[3]);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${ec2InstanceAttributeQuery[3]}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const resourceARNsQuery = rawQuery.match(/^resource_arns\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n  if (resourceARNsQuery) {\n    newQuery.queryType = VariableQueryType.ResourceArns;\n    newQuery.region = resourceARNsQuery[1];\n    newQuery.resourceType = resourceARNsQuery[2];\n    if (resourceARNsQuery[3] && resourceARNsQuery[3] !== '[]') {\n      try {\n        newQuery.tags = migrateMultiFilters(resourceARNsQuery[3]);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${resourceARNsQuery[3]}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const statsQuery = rawQuery.match(/^statistics\\(\\)/);\n  if (statsQuery) {\n    newQuery.queryType = VariableQueryType.Statistics;\n    return newQuery;\n  }\n  throw new Error('unable to parse old variable query');\n}\n","import { css, cx } from '@emotion/css';\nimport React, { FunctionComponent, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AccessoryButton, InputGroup } from '@grafana/experimental';\nimport { Input, stylesFactory, useTheme2 } from '@grafana/ui';\n\nimport { MultiFilterCondition } from './MultiFilter';\n\nexport interface Props {\n  filter: MultiFilterCondition;\n  onChange: (value: MultiFilterCondition) => void;\n  onDelete: () => void;\n  keyPlaceholder?: string;\n}\n\nexport const MultiFilterItem: FunctionComponent<Props> = ({ filter, onChange, onDelete, keyPlaceholder }) => {\n  const [localKey, setLocalKey] = useState(filter.key || '');\n  const [localValue, setLocalValue] = useState(filter.value?.join(', ') || '');\n  const theme = useTheme2();\n  const styles = getOperatorStyles(theme);\n\n  return (\n    <div data-testid=\"cloudwatch-multifilter-item\">\n      <InputGroup>\n        <Input\n          data-testid=\"cloudwatch-multifilter-item-key\"\n          aria-label=\"Filter key\"\n          value={localKey}\n          placeholder={keyPlaceholder ?? 'key'}\n          onChange={(e) => setLocalKey(e.currentTarget.value)}\n          onBlur={() => {\n            if (localKey && localKey !== filter.key) {\n              onChange({ ...filter, key: localKey });\n            }\n          }}\n        />\n\n        <span className={cx(styles.root)}>=</span>\n\n        <Input\n          data-testid=\"cloudwatch-multifilter-item-value\"\n          aria-label=\"Filter value\"\n          value={localValue}\n          placeholder=\"value1, value2,...\"\n          onChange={(e) => setLocalValue(e.currentTarget.value)}\n          onBlur={() => {\n            const newValues = localValue.split(',').map((v) => v.trim());\n            if (localValue && newValues !== filter.value) {\n              onChange({ ...filter, value: newValues });\n            }\n            setLocalValue(newValues.join(', '));\n          }}\n        />\n\n        <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} type=\"button\" />\n      </InputGroup>\n    </div>\n  );\n};\n\nconst getOperatorStyles = stylesFactory((theme: GrafanaTheme2) => ({\n  root: css({\n    padding: theme.spacing(0, 1),\n    alignSelf: 'center',\n  }),\n}));\n","import { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport { EditorList } from '@grafana/experimental';\n\nimport { MultiFilters } from '../../types';\n\nimport { MultiFilterItem } from './MultiFilterItem';\n\nexport interface Props {\n  filters?: MultiFilters;\n  onChange: (filters: MultiFilters) => void;\n  keyPlaceholder?: string;\n}\n\nexport interface MultiFilterCondition {\n  key?: string;\n  operator?: string;\n  value?: string[];\n}\n\nconst multiFiltersToFilterConditions = (filters: MultiFilters) =>\n  Object.keys(filters).map((key) => ({ key, value: filters[key], operator: '=' }));\n\nconst filterConditionsToMultiFilters = (filters: MultiFilterCondition[]) => {\n  const res: MultiFilters = {};\n  filters.forEach(({ key, value }) => {\n    if (key && value) {\n      res[key] = value;\n    }\n  });\n  return res;\n};\n\nexport const MultiFilter = ({ filters, onChange, keyPlaceholder }: Props) => {\n  const [items, setItems] = useState<MultiFilterCondition[]>([]);\n  useEffect(() => setItems(filters ? multiFiltersToFilterConditions(filters) : []), [filters]);\n  const onFiltersChange = (newItems: Array<Partial<MultiFilterCondition>>) => {\n    setItems(newItems);\n\n    // The onChange event should only be triggered in the case there is a complete dimension object.\n    // So when a new key is added that does not yet have a value, it should not trigger an onChange event.\n    const newMultifilters = filterConditionsToMultiFilters(newItems);\n    if (!isEqual(newMultifilters, filters)) {\n      onChange(newMultifilters);\n    }\n  };\n\n  return <EditorList items={items} onChange={onFiltersChange} renderItem={makeRenderFilter(keyPlaceholder)} />;\n};\n\nfunction makeRenderFilter(keyPlaceholder?: string) {\n  function renderFilter(\n    item: MultiFilterCondition,\n    onChange: (item: MultiFilterCondition) => void,\n    onDelete: () => void\n  ) {\n    return (\n      <MultiFilterItem\n        filter={item}\n        onChange={(item) => onChange(item)}\n        onDelete={onDelete}\n        keyPlaceholder={keyPlaceholder}\n      />\n    );\n  }\n  return renderFilter;\n}\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, Select } from '@grafana/ui';\n\nimport { VariableQueryType } from '../../types';\n\nconst LABEL_WIDTH = 20;\n\ninterface VariableQueryFieldProps<T> {\n  onChange: (value: T) => void;\n  options: SelectableValue[];\n  value: T | null;\n  label: string;\n  inputId?: string;\n  allowCustomValue?: boolean;\n  isLoading?: boolean;\n}\n\nexport const VariableQueryField = <T extends string | VariableQueryType>({\n  label,\n  onChange,\n  value,\n  options,\n  allowCustomValue = false,\n  isLoading = false,\n  inputId = label,\n}: VariableQueryFieldProps<T>) => {\n  return (\n    <InlineField label={label} labelWidth={LABEL_WIDTH} htmlFor={inputId}>\n      <Select\n        aria-label={label}\n        width={25}\n        allowCustomValue={allowCustomValue}\n        value={value}\n        onChange={({ value }) => onChange(value!)}\n        options={options}\n        isLoading={isLoading}\n        inputId={inputId}\n      />\n    </InlineField>\n  );\n};\n","import React, { FC, useState } from 'react';\n\nimport { InlineField, Input, PopoverContent } from '@grafana/ui';\n\nconst LABEL_WIDTH = 20;\n\ninterface VariableTextFieldProps {\n  onBlur: (value: string) => void;\n  value: string;\n  label: string;\n  placeholder?: string;\n  tooltip?: PopoverContent;\n  interactive?: boolean;\n}\n\nexport const VariableTextField: FC<VariableTextFieldProps> = ({\n  interactive,\n  label,\n  onBlur,\n  placeholder,\n  value,\n  tooltip,\n}) => {\n  const [localValue, setLocalValue] = useState(value);\n  return (\n    <InlineField interactive={interactive} label={label} labelWidth={LABEL_WIDTH} tooltip={tooltip} grow>\n      <Input\n        aria-label={label}\n        placeholder={placeholder}\n        value={localValue}\n        onChange={(e) => setLocalValue(e.currentTarget.value)}\n        onBlur={() => onBlur(localValue)}\n      />\n    </InlineField>\n  );\n};\n","import React from 'react';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { InlineField } from '@grafana/ui';\n\nimport { Dimensions } from '..';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { useDimensionKeys, useMetrics, useNamespaces, useRegions } from '../../hooks';\nimport { migrateVariableQuery } from '../../migrations/variableQueryMigrations';\nimport { CloudWatchJsonData, CloudWatchQuery, VariableQuery, VariableQueryType } from '../../types';\n\nimport { MultiFilter } from './MultiFilter';\nimport { VariableQueryField } from './VariableQueryField';\nimport { VariableTextField } from './VariableTextField';\n\nexport type Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData, VariableQuery>;\n\nconst queryTypes: Array<{ value: string; label: string }> = [\n  { value: VariableQueryType.Regions, label: 'Regions' },\n  { value: VariableQueryType.Namespaces, label: 'Namespaces' },\n  { value: VariableQueryType.Metrics, label: 'Metrics' },\n  { value: VariableQueryType.DimensionKeys, label: 'Dimension Keys' },\n  { value: VariableQueryType.DimensionValues, label: 'Dimension Values' },\n  { value: VariableQueryType.EBSVolumeIDs, label: 'EBS Volume IDs' },\n  { value: VariableQueryType.EC2InstanceAttributes, label: 'EC2 Instance Attributes' },\n  { value: VariableQueryType.ResourceArns, label: 'Resource ARNs' },\n  { value: VariableQueryType.Statistics, label: 'Statistics' },\n  { value: VariableQueryType.LogGroups, label: 'Log Groups' },\n  ...(config.featureToggles.cloudWatchCrossAccountQuerying\n    ? [{ value: VariableQueryType.Accounts, label: 'Accounts' }]\n    : []),\n];\n\nexport const VariableQueryEditor = ({ query, datasource, onChange }: Props) => {\n  const parsedQuery = migrateVariableQuery(query);\n\n  const { region, namespace, metricName, dimensionKey, dimensionFilters } = parsedQuery;\n  const [regions, regionIsLoading] = useRegions(datasource);\n  const namespaces = useNamespaces(datasource);\n  const metrics = useMetrics(datasource, { region, namespace });\n  const dimensionKeys = useDimensionKeys(datasource, { region, namespace, metricName });\n  const keysForDimensionFilter = useDimensionKeys(datasource, { region, namespace, metricName, dimensionFilters });\n\n  const onRegionChange = async (region: string) => {\n    const validatedQuery = await sanitizeQuery({\n      ...parsedQuery,\n      region,\n    });\n    onQueryChange(validatedQuery);\n  };\n\n  const onNamespaceChange = async (namespace: string) => {\n    const validatedQuery = await sanitizeQuery({\n      ...parsedQuery,\n      namespace,\n    });\n    onQueryChange(validatedQuery);\n  };\n\n  const onQueryChange = (newQuery: VariableQuery) => {\n    onChange({\n      ...newQuery,\n      refId: 'CloudWatchVariableQueryEditor-VariableQuery',\n    });\n  };\n\n  // Reset dimensionValue parameters if namespace or region change\n  const sanitizeQuery = async (query: VariableQuery) => {\n    let { metricName, dimensionKey, dimensionFilters, namespace, region } = query;\n    if (metricName) {\n      await datasource.resources.getMetrics({ namespace, region }).then((result: Array<SelectableValue<string>>) => {\n        if (!result.find((metric) => metric.value === metricName)) {\n          metricName = '';\n        }\n      });\n    }\n    if (dimensionKey) {\n      await datasource.resources\n        .getDimensionKeys({ namespace, region })\n        .then((result: Array<SelectableValue<string>>) => {\n          if (!result.find((key) => key.value === dimensionKey)) {\n            dimensionKey = '';\n            dimensionFilters = {};\n          }\n        });\n    }\n    return { ...query, metricName, dimensionKey, dimensionFilters };\n  };\n\n  const hasRegionField = [\n    VariableQueryType.Metrics,\n    VariableQueryType.DimensionKeys,\n    VariableQueryType.DimensionValues,\n    VariableQueryType.EBSVolumeIDs,\n    VariableQueryType.EC2InstanceAttributes,\n    VariableQueryType.ResourceArns,\n    VariableQueryType.LogGroups,\n    VariableQueryType.Accounts,\n  ].includes(parsedQuery.queryType);\n  const hasNamespaceField = [\n    VariableQueryType.Metrics,\n    VariableQueryType.DimensionKeys,\n    VariableQueryType.DimensionValues,\n  ].includes(parsedQuery.queryType);\n  return (\n    <>\n      <VariableQueryField\n        value={parsedQuery.queryType}\n        options={queryTypes}\n        onChange={(value: VariableQueryType) => onQueryChange({ ...parsedQuery, queryType: value })}\n        label=\"Query type\"\n        inputId={`variable-query-type-${query.refId}`}\n      />\n      {hasRegionField && (\n        <VariableQueryField\n          value={region}\n          options={regions}\n          onChange={(value: string) => onRegionChange(value)}\n          label=\"Region\"\n          isLoading={regionIsLoading}\n          inputId={`variable-query-region-${query.refId}`}\n        />\n      )}\n      {hasNamespaceField && (\n        <VariableQueryField\n          value={namespace}\n          options={namespaces}\n          onChange={(value: string) => onNamespaceChange(value)}\n          label=\"Namespace\"\n          inputId={`variable-query-namespace-${query.refId}`}\n          allowCustomValue\n        />\n      )}\n      {parsedQuery.queryType === VariableQueryType.DimensionValues && (\n        <>\n          <VariableQueryField\n            value={metricName || null}\n            options={metrics}\n            onChange={(value: string) => onQueryChange({ ...parsedQuery, metricName: value })}\n            label=\"Metric\"\n            inputId={`variable-query-metric-${query.refId}`}\n            allowCustomValue\n          />\n          <VariableQueryField\n            value={dimensionKey || null}\n            options={dimensionKeys}\n            onChange={(value: string) => onQueryChange({ ...parsedQuery, dimensionKey: value })}\n            label=\"Dimension key\"\n            inputId={`variable-query-dimension-key-${query.refId}`}\n            allowCustomValue\n          />\n          <InlineField label=\"Dimensions\" labelWidth={20} tooltip=\"Dimensions to filter the returned values on\">\n            <Dimensions\n              metricStat={{ ...parsedQuery, dimensions: parsedQuery.dimensionFilters }}\n              onChange={(dimensions) => {\n                onChange({ ...parsedQuery, dimensionFilters: dimensions });\n              }}\n              dimensionKeys={keysForDimensionFilter}\n              disableExpressions={true}\n              datasource={datasource}\n            />\n          </InlineField>\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.EBSVolumeIDs && (\n        <VariableTextField\n          value={query.instanceID}\n          placeholder=\"i-XXXXXXXXXXXXXXXXX\"\n          onBlur={(value: string) => onQueryChange({ ...parsedQuery, instanceID: value })}\n          label=\"Instance ID\"\n        />\n      )}\n      {parsedQuery.queryType === VariableQueryType.EC2InstanceAttributes && (\n        <>\n          <VariableTextField\n            value={parsedQuery.attributeName}\n            onBlur={(value: string) => onQueryChange({ ...parsedQuery, attributeName: value })}\n            label=\"Attribute name\"\n            interactive={true}\n            tooltip={\n              <>\n                {'Attribute or tag to query on. Tags should be formatted \"Tags.<name>\". '}\n                <a\n                  href=\"https://grafana.com/docs/grafana/latest/datasources/aws-cloudwatch/template-queries-cloudwatch/#selecting-attributes\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  See the documentation for more details\n                </a>\n              </>\n            }\n          />\n          <InlineField\n            label=\"Filters\"\n            labelWidth={20}\n            tooltip={\n              <>\n                <a\n                  href=\"https://grafana.com/docs/grafana/latest/datasources/aws-cloudwatch/template-queries-cloudwatch/#selecting-attributes\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Pre-defined ec2:DescribeInstances filters/tags\n                </a>\n                {' and the values to filter on. Tags should be formatted tag:<name>.'}\n              </>\n            }\n          >\n            <MultiFilter\n              filters={parsedQuery.ec2Filters}\n              onChange={(filters) => {\n                onChange({ ...parsedQuery, ec2Filters: filters });\n              }}\n              keyPlaceholder=\"filter/tag\"\n            />\n          </InlineField>\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.ResourceArns && (\n        <>\n          <VariableTextField\n            value={parsedQuery.resourceType}\n            onBlur={(value: string) => onQueryChange({ ...parsedQuery, resourceType: value })}\n            label=\"Resource type\"\n          />\n          <InlineField label=\"Tags\" labelWidth={20} tooltip=\"Tags to filter the returned values on.\">\n            <MultiFilter\n              filters={parsedQuery.tags}\n              onChange={(filters) => {\n                onChange({ ...parsedQuery, tags: filters });\n              }}\n              keyPlaceholder=\"tag\"\n            />\n          </InlineField>\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.LogGroups && (\n        <VariableTextField\n          value={query.logGroupPrefix ?? ''}\n          onBlur={(value: string) => onQueryChange({ ...parsedQuery, logGroupPrefix: value })}\n          label=\"Log group prefix\"\n        />\n      )}\n    </>\n  );\n};\n","import { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  CustomVariableSupport,\n  DataQueryRequest,\n  DataQueryResponse,\n  MetricFindValue,\n  SelectableValue,\n} from '@grafana/data';\n\nimport { ALL_ACCOUNTS_OPTION } from './components/Account';\nimport { VariableQueryEditor } from './components/VariableQueryEditor/VariableQueryEditor';\nimport { CloudWatchDatasource } from './datasource';\nimport { DEFAULT_VARIABLE_QUERY } from './defaultQueries';\nimport { migrateVariableQuery } from './migrations/variableQueryMigrations';\nimport { ResourcesAPI } from './resources/ResourcesAPI';\nimport { standardStatistics } from './standardStatistics';\nimport { VariableQuery, VariableQueryType } from './types';\n\nexport class CloudWatchVariableSupport extends CustomVariableSupport<CloudWatchDatasource, VariableQuery> {\n  constructor(private readonly resources: ResourcesAPI) {\n    super();\n    this.query = this.query.bind(this);\n  }\n\n  editor = VariableQueryEditor;\n\n  query(request: DataQueryRequest<VariableQuery>): Observable<DataQueryResponse> {\n    const queryObj = migrateVariableQuery(request.targets[0]);\n    return from(this.execute(queryObj)).pipe(map((data) => ({ data })));\n  }\n\n  async execute(query: VariableQuery) {\n    try {\n      switch (query.queryType) {\n        case VariableQueryType.Regions:\n          return this.handleRegionsQuery();\n        case VariableQueryType.Namespaces:\n          return this.handleNamespacesQuery();\n        case VariableQueryType.Metrics:\n          return this.handleMetricsQuery(query);\n        case VariableQueryType.DimensionKeys:\n          return this.handleDimensionKeysQuery(query);\n        case VariableQueryType.DimensionValues:\n          return this.handleDimensionValuesQuery(query);\n        case VariableQueryType.EBSVolumeIDs:\n          return this.handleEbsVolumeIdsQuery(query);\n        case VariableQueryType.EC2InstanceAttributes:\n          return this.handleEc2InstanceAttributeQuery(query);\n        case VariableQueryType.ResourceArns:\n          return this.handleResourceARNsQuery(query);\n        case VariableQueryType.Statistics:\n          return this.handleStatisticsQuery();\n        case VariableQueryType.LogGroups:\n          return this.handleLogGroupsQuery(query);\n        case VariableQueryType.Accounts:\n          return this.handleAccountsQuery(query);\n      }\n    } catch (error) {\n      console.error(`Could not run CloudWatchMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n  async handleLogGroupsQuery({ region, logGroupPrefix }: VariableQuery) {\n    const interpolatedPrefix = this.resources.templateSrv.replace(logGroupPrefix);\n    return this.resources\n      .getLogGroups({\n        region,\n        logGroupNamePrefix: interpolatedPrefix,\n        listAllLogGroups: true,\n      })\n      .then((logGroups) =>\n        logGroups.map((lg) => {\n          return {\n            text: lg.value.name,\n            value: lg.value.arn,\n            expandable: true,\n          };\n        })\n      );\n  }\n\n  async handleRegionsQuery() {\n    return this.resources.getRegions().then((regions) => regions.map(selectableValueToMetricFindOption));\n  }\n\n  async handleNamespacesQuery() {\n    return this.resources.getNamespaces().then((namespaces) => namespaces.map(selectableValueToMetricFindOption));\n  }\n\n  async handleMetricsQuery({ namespace, region }: VariableQuery) {\n    return this.resources\n      .getMetrics({ namespace, region })\n      .then((metrics) => metrics.map(selectableValueToMetricFindOption));\n  }\n\n  async handleDimensionKeysQuery({ namespace, region }: VariableQuery) {\n    return this.resources\n      .getDimensionKeys({ namespace, region })\n      .then((keys) => keys.map(selectableValueToMetricFindOption));\n  }\n\n  async handleDimensionValuesQuery({ namespace, region, dimensionKey, metricName, dimensionFilters }: VariableQuery) {\n    if (!dimensionKey || !metricName) {\n      return [];\n    }\n    return this.resources\n      .getDimensionValues({\n        region,\n        namespace,\n        metricName,\n        dimensionKey,\n        dimensionFilters,\n      })\n      .then((values) => values.map(selectableValueToMetricFindOption));\n  }\n\n  async handleEbsVolumeIdsQuery({ region, instanceID }: VariableQuery) {\n    if (!instanceID) {\n      return [];\n    }\n    return this.resources.getEbsVolumeIds(region, instanceID).then((ids) => ids.map(selectableValueToMetricFindOption));\n  }\n\n  async handleEc2InstanceAttributeQuery({ region, attributeName, ec2Filters }: VariableQuery) {\n    if (!attributeName) {\n      return [];\n    }\n    return this.resources\n      .getEc2InstanceAttribute(region, attributeName, ec2Filters ?? {})\n      .then((values) => values.map(selectableValueToMetricFindOption));\n  }\n\n  async handleResourceARNsQuery({ region, resourceType, tags }: VariableQuery) {\n    if (!resourceType) {\n      return [];\n    }\n    const keys = await this.resources.getResourceARNs(region, resourceType, tags ?? {});\n    return keys.map(selectableValueToMetricFindOption);\n  }\n\n  async handleStatisticsQuery() {\n    return standardStatistics.map((s: string) => ({\n      text: s,\n      value: s,\n      expandable: true,\n    }));\n  }\n\n  allMetricFindValue: MetricFindValue = { text: 'All', value: ALL_ACCOUNTS_OPTION.value, expandable: true };\n  async handleAccountsQuery({ region }: VariableQuery) {\n    return this.resources.getAccounts({ region }).then((accounts) => {\n      const metricFindOptions = accounts.map((account) => ({\n        text: account.label,\n        value: account.id,\n        expandable: true,\n      }));\n\n      return metricFindOptions.length ? [this.allMetricFindValue, ...metricFindOptions] : [];\n    });\n  }\n\n  getDefaultQuery(): Partial<VariableQuery> {\n    return DEFAULT_VARIABLE_QUERY;\n  }\n}\n\nfunction selectableValueToMetricFindOption({ label, value }: SelectableValue<string>): MetricFindValue {\n  return { text: label ?? value ?? '', value: value, expandable: true };\n}\n","import { cloneDeep, find, isEmpty } from 'lodash';\nimport { merge, Observable, of } from 'rxjs';\n\nimport {\n  CoreApp,\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataSourceWithLogsContextSupport,\n  LoadingState,\n  LogRowModel,\n  ScopedVars,\n} from '@grafana/data';\nimport { DataSourceWithBackend } from '@grafana/runtime';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { RowContextOptions } from '../../../features/logs/components/LogRowContextProvider';\n\nimport { CloudWatchAnnotationSupport } from './annotationSupport';\nimport { DEFAULT_METRICS_QUERY, getDefaultLogsQuery } from './defaultQueries';\nimport { isCloudWatchAnnotationQuery, isCloudWatchLogsQuery, isCloudWatchMetricsQuery } from './guards';\nimport { CloudWatchLogsLanguageProvider } from './language/cloudwatch-logs/CloudWatchLogsLanguageProvider';\nimport { SQLCompletionItemProvider } from './language/cloudwatch-sql/completion/CompletionItemProvider';\nimport { MetricMathCompletionItemProvider } from './language/metric-math/completion/CompletionItemProvider';\nimport { CloudWatchAnnotationQueryRunner } from './query-runner/CloudWatchAnnotationQueryRunner';\nimport { CloudWatchLogsQueryRunner } from './query-runner/CloudWatchLogsQueryRunner';\nimport { CloudWatchMetricsQueryRunner } from './query-runner/CloudWatchMetricsQueryRunner';\nimport { ResourcesAPI } from './resources/ResourcesAPI';\nimport {\n  CloudWatchAnnotationQuery,\n  CloudWatchJsonData,\n  CloudWatchLogsQuery,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n} from './types';\nimport { CloudWatchVariableSupport } from './variables';\n\nexport class CloudWatchDatasource\n  extends DataSourceWithBackend<CloudWatchQuery, CloudWatchJsonData>\n  implements DataSourceWithLogsContextSupport<CloudWatchLogsQuery>\n{\n  defaultRegion?: string;\n  languageProvider: CloudWatchLogsLanguageProvider;\n  sqlCompletionItemProvider: SQLCompletionItemProvider;\n  metricMathCompletionItemProvider: MetricMathCompletionItemProvider;\n  defaultLogGroups?: string[];\n\n  type = 'cloudwatch';\n\n  private metricsQueryRunner: CloudWatchMetricsQueryRunner;\n  private annotationQueryRunner: CloudWatchAnnotationQueryRunner;\n  logsQueryRunner: CloudWatchLogsQueryRunner;\n  resources: ResourcesAPI;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>,\n    readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.resources = new ResourcesAPI(instanceSettings, templateSrv);\n    this.languageProvider = new CloudWatchLogsLanguageProvider(this);\n    this.sqlCompletionItemProvider = new SQLCompletionItemProvider(this.resources, this.templateSrv);\n    this.metricMathCompletionItemProvider = new MetricMathCompletionItemProvider(this.resources, this.templateSrv);\n    this.metricsQueryRunner = new CloudWatchMetricsQueryRunner(instanceSettings, templateSrv);\n    this.logsQueryRunner = new CloudWatchLogsQueryRunner(instanceSettings, templateSrv, timeSrv);\n    this.annotationQueryRunner = new CloudWatchAnnotationQueryRunner(instanceSettings, templateSrv);\n    this.variables = new CloudWatchVariableSupport(this.resources);\n    this.annotations = CloudWatchAnnotationSupport;\n  }\n\n  filterQuery(query: CloudWatchQuery) {\n    return query.hide !== true || (isCloudWatchMetricsQuery(query) && query.id !== '');\n  }\n\n  query(options: DataQueryRequest<CloudWatchQuery>): Observable<DataQueryResponse> {\n    options = cloneDeep(options);\n\n    let queries = options.targets.filter(this.filterQuery);\n\n    const logQueries: CloudWatchLogsQuery[] = [];\n    const metricsQueries: CloudWatchMetricsQuery[] = [];\n    const annotationQueries: CloudWatchAnnotationQuery[] = [];\n\n    queries.forEach((query) => {\n      if (isCloudWatchAnnotationQuery(query)) {\n        annotationQueries.push(query);\n      } else if (isCloudWatchLogsQuery(query)) {\n        logQueries.push(query);\n      } else {\n        metricsQueries.push(query);\n      }\n    });\n\n    const dataQueryResponses: Array<Observable<DataQueryResponse>> = [];\n    if (logQueries.length) {\n      dataQueryResponses.push(this.logsQueryRunner.handleLogQueries(logQueries, options));\n    }\n\n    if (metricsQueries.length) {\n      dataQueryResponses.push(this.metricsQueryRunner.handleMetricQueries(metricsQueries, options));\n    }\n\n    if (annotationQueries.length) {\n      dataQueryResponses.push(this.annotationQueryRunner.handleAnnotationQuery(annotationQueries, options));\n    }\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(dataQueryResponses)) {\n      return of({\n        data: [],\n        state: LoadingState.Done,\n      });\n    }\n\n    return merge(...dataQueryResponses);\n  }\n\n  interpolateVariablesInQueries(queries: CloudWatchQuery[], scopedVars: ScopedVars): CloudWatchQuery[] {\n    if (!queries.length) {\n      return queries;\n    }\n\n    return queries.map((query) => ({\n      ...query,\n      region: this.metricsQueryRunner.replaceVariableAndDisplayWarningIfMulti(\n        this.getActualRegion(query.region),\n        scopedVars\n      ),\n      ...(isCloudWatchMetricsQuery(query) &&\n        this.metricsQueryRunner.interpolateMetricsQueryVariables(query, scopedVars)),\n    }));\n  }\n\n  getLogRowContext = async (\n    row: LogRowModel,\n    context?: RowContextOptions,\n    query?: CloudWatchLogsQuery\n  ): Promise<{ data: DataFrame[] }> => {\n    return this.logsQueryRunner.getLogRowContext(row, context, query);\n  };\n\n  targetContainsTemplate(target: any) {\n    return (\n      this.templateSrv.containsTemplate(target.region) ||\n      this.templateSrv.containsTemplate(target.namespace) ||\n      this.templateSrv.containsTemplate(target.metricName) ||\n      this.templateSrv.containsTemplate(target.expression!) ||\n      target.logGroupNames?.some((logGroup: string) => this.templateSrv.containsTemplate(logGroup)) ||\n      find(target.dimensions, (v, k) => this.templateSrv.containsTemplate(k) || this.templateSrv.containsTemplate(v))\n    );\n  }\n\n  showContextToggle() {\n    return true;\n  }\n\n  getQueryDisplayText(query: CloudWatchQuery) {\n    if (isCloudWatchLogsQuery(query)) {\n      return query.expression ?? '';\n    } else {\n      return JSON.stringify(query);\n    }\n  }\n\n  // public\n  getVariables() {\n    return this.resources.getVariables();\n  }\n\n  getActualRegion(region?: string) {\n    if (region === 'default' || region === undefined || region === '') {\n      return this.defaultRegion ?? '';\n    }\n    return region;\n  }\n\n  getDefaultQuery(_: CoreApp): Partial<CloudWatchQuery> {\n    return {\n      ...getDefaultLogsQuery(this.instanceSettings.jsonData.logGroups, this.instanceSettings.jsonData.defaultLogGroups),\n      ...DEFAULT_METRICS_QUERY,\n    };\n  }\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Alert, InlineField, useStyles2 } from '@grafana/ui';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n});\n\ninterface Props {\n  datasourceUid?: string;\n  onChange: (uid: string) => void;\n}\n\nconst xRayDsId = 'grafana-x-ray-datasource';\n\nexport function XrayLinkConfig({ datasourceUid, onChange }: Props) {\n  const hasXrayDatasource = Boolean(getDatasourceSrv().getList({ pluginId: xRayDsId }).length);\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">X-ray trace link</h3>\n\n      <div className={styles.infoText}>\n        Grafana will automatically create a link to a trace in X-ray data source if logs contain @xrayTraceId field\n      </div>\n\n      {!hasXrayDatasource && (\n        <Alert\n          title={\n            'There is no X-ray datasource to link to. First add an X-ray data source and then link it to Cloud Watch. '\n          }\n          severity=\"info\"\n        />\n      )}\n\n      <div className=\"gf-form-group\">\n        <InlineField\n          htmlFor=\"data-source-picker\"\n          label=\"Data source\"\n          labelWidth={28}\n          tooltip=\"X-ray data source containing traces\"\n        >\n          <DataSourcePicker\n            pluginId={xRayDsId}\n            onChange={(ds) => onChange(ds.uid)}\n            current={datasourceUid}\n            noDefault={true}\n          />\n        </InlineField>\n      </div>\n    </>\n  );\n}\n","import React, { FC, useEffect, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { ConnectionConfig } from '@grafana/aws-sdk';\nimport {\n  rangeUtil,\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { Input, InlineField, FieldProps } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createWarningNotification } from 'app/core/copy/appNotification';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { store } from 'app/store/store';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { SelectableResourceValue } from '../resources/types';\nimport { CloudWatchJsonData, CloudWatchSecureJsonData } from '../types';\n\nimport { LogGroupsField } from './LogGroups/LogGroupsField';\nimport { XrayLinkConfig } from './XrayLinkConfig';\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudWatchJsonData, CloudWatchSecureJsonData>;\n\ntype LogGroupFieldState = Pick<FieldProps, 'invalid'> & { error?: string | null };\n\nexport const ConfigEditor: FC<Props> = (props: Props) => {\n  const { options, onOptionsChange } = props;\n  const { defaultLogGroups, logsTimeout, defaultRegion, logGroups } = options.jsonData;\n  const datasource = useDatasource(props);\n  useAuthenticationWarning(options.jsonData);\n  const logsTimeoutError = useTimoutValidation(logsTimeout);\n  const saved = useDataSourceSavedState(props);\n  const [logGroupFieldState, setLogGroupFieldState] = useState<LogGroupFieldState>({\n    invalid: false,\n  });\n  useEffect(() => setLogGroupFieldState({ invalid: false }), [props.options]);\n\n  return (\n    <>\n      <ConnectionConfig\n        {...props}\n        labelWidth={29}\n        loadRegions={\n          datasource &&\n          (async () => {\n            return datasource.resources\n              .getRegions()\n              .then((regions) =>\n                regions.reduce(\n                  (acc: string[], curr: SelectableResourceValue) => (curr.value ? [...acc, curr.value] : acc),\n                  []\n                )\n              );\n          })\n        }\n      >\n        <InlineField label=\"Namespaces of Custom Metrics\" labelWidth={29} tooltip=\"Namespaces of Custom Metrics.\">\n          <Input\n            width={60}\n            placeholder=\"Namespace1,Namespace2\"\n            value={options.jsonData.customMetricsNamespaces || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'customMetricsNamespaces')}\n          />\n        </InlineField>\n      </ConnectionConfig>\n\n      <h3 className=\"page-heading\">CloudWatch Logs</h3>\n      <div className=\"gf-form-group\">\n        <InlineField\n          label=\"Timeout\"\n          labelWidth={28}\n          tooltip='Custom timeout for CloudWatch Logs insights queries which have max concurrency limits. Default is 15 minutes. Must be a valid duration string, such as \"15m\" \"30s\" \"2000ms\" etc.'\n          invalid={Boolean(logsTimeoutError)}\n        >\n          <Input\n            width={60}\n            placeholder=\"15m\"\n            value={options.jsonData.logsTimeout || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'logsTimeout')}\n            title={'The timeout must be a valid duration string, such as \"15m\" \"30s\" \"2000ms\" etc.'}\n          />\n        </InlineField>\n        <InlineField\n          label=\"Default Log Groups\"\n          labelWidth={28}\n          tooltip=\"Optionally, specify default log groups for CloudWatch Logs queries.\"\n          shrink={true}\n          {...logGroupFieldState}\n        >\n          <LogGroupsField\n            region={defaultRegion ?? ''}\n            datasource={datasource}\n            onBeforeOpen={() => {\n              if (saved) {\n                return;\n              }\n\n              let error = 'You need to save the data source before adding log groups.';\n              if (props.options.version && props.options.version > 1) {\n                error =\n                  'You have unsaved connection detail changes. You need to save the data source before adding log groups.';\n              }\n              setLogGroupFieldState({\n                invalid: true,\n                error,\n              });\n              throw new Error(error);\n            }}\n            legacyLogGroupNames={defaultLogGroups}\n            logGroups={logGroups}\n            onChange={(updatedLogGroups) => {\n              onOptionsChange({\n                ...props.options,\n                jsonData: {\n                  ...props.options.jsonData,\n                  logGroups: updatedLogGroups,\n                  defaultLogGroups: undefined,\n                },\n              });\n            }}\n            maxNoOfVisibleLogGroups={2}\n          />\n        </InlineField>\n      </div>\n\n      <XrayLinkConfig\n        onChange={(uid) => updateDatasourcePluginJsonDataOption(props, 'tracingDatasourceUid', uid)}\n        datasourceUid={options.jsonData.tracingDatasourceUid}\n      />\n    </>\n  );\n};\n\nfunction useAuthenticationWarning(jsonData: CloudWatchJsonData) {\n  const addWarning = (message: string) => {\n    store.dispatch(notifyApp(createWarningNotification('CloudWatch Authentication', message)));\n  };\n\n  useEffect(() => {\n    if (jsonData.authType === 'arn') {\n      addWarning('Since grafana 7.3 authentication type \"arn\" is deprecated, falling back to default SDK provider');\n    } else if (jsonData.authType === 'credentials' && !jsonData.profile && !jsonData.database) {\n      addWarning(\n        'As of grafana 7.3 authentication type \"credentials\" should be used only for shared file credentials. \\\n             If you don\\'t have a credentials file, switch to the default SDK provider for extracting credentials \\\n             from environment variables or IAM roles'\n      );\n    }\n  }, [jsonData.authType, jsonData.database, jsonData.profile]);\n}\n\nfunction useDatasource(props: Props) {\n  const [datasource, setDatasource] = useState<CloudWatchDatasource>();\n\n  useEffect(() => {\n    if (props.options.version) {\n      getDatasourceSrv()\n        .loadDatasource(props.options.name)\n        .then((datasource) => {\n          if (datasource instanceof CloudWatchDatasource) {\n            setDatasource(datasource);\n          }\n        });\n    }\n  }, [props.options.version, props.options.name]);\n\n  return datasource;\n}\n\nfunction useTimoutValidation(value: string | undefined) {\n  const [err, setErr] = useState<undefined | string>(undefined);\n  useDebounce(\n    () => {\n      if (value) {\n        try {\n          rangeUtil.describeInterval(value);\n          setErr(undefined);\n        } catch (e) {\n          if (e instanceof Error) {\n            setErr(e.toString());\n          }\n        }\n      } else {\n        setErr(undefined);\n      }\n    },\n    350,\n    [value]\n  );\n  return err;\n}\n\nfunction useDataSourceSavedState(props: Props) {\n  const [saved, setSaved] = useState(!!props.options.version && props.options.version > 1);\n  useEffect(() => {\n    setSaved(false);\n  }, [\n    props.options.jsonData.assumeRoleArn,\n    props.options.jsonData.authType,\n    props.options.jsonData.defaultRegion,\n    props.options.jsonData.endpoint,\n    props.options.jsonData.externalId,\n    props.options.jsonData.profile,\n    props.options.secureJsonData?.accessKey,\n    props.options.secureJsonData?.secretKey,\n  ]);\n\n  useEffect(() => {\n    props.options.version && setSaved(true);\n  }, [props.options.version]);\n\n  return saved;\n}\n","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _templateObject = _taggedTemplateLiteral(['', ''], ['', '']);\n\nfunction _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @class TemplateTag\n * @classdesc Consumes a pipeline of composable transformer plugins and produces a template tag.\n */\nvar TemplateTag = function () {\n  /**\n   * constructs a template tag\n   * @constructs TemplateTag\n   * @param  {...Object} [...transformers] - an array or arguments list of transformers\n   * @return {Function}                    - a template tag\n   */\n  function TemplateTag() {\n    var _this = this;\n\n    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {\n      transformers[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, TemplateTag);\n\n    this.tag = function (strings) {\n      for (var _len2 = arguments.length, expressions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        expressions[_key2 - 1] = arguments[_key2];\n      }\n\n      if (typeof strings === 'function') {\n        // if the first argument passed is a function, assume it is a template tag and return\n        // an intermediary tag that processes the template using the aforementioned tag, passing the\n        // result to our tag\n        return _this.interimTag.bind(_this, strings);\n      }\n\n      if (typeof strings === 'string') {\n        // if the first argument passed is a string, just transform it\n        return _this.transformEndResult(strings);\n      }\n\n      // else, return a transformed end result of processing the template with our tag\n      strings = strings.map(_this.transformString.bind(_this));\n      return _this.transformEndResult(strings.reduce(_this.processSubstitutions.bind(_this, expressions)));\n    };\n\n    // if first argument is an array, extrude it as a list of transformers\n    if (transformers.length > 0 && Array.isArray(transformers[0])) {\n      transformers = transformers[0];\n    }\n\n    // if any transformers are functions, this means they are not initiated - automatically initiate them\n    this.transformers = transformers.map(function (transformer) {\n      return typeof transformer === 'function' ? transformer() : transformer;\n    });\n\n    // return an ES2015 template tag\n    return this.tag;\n  }\n\n  /**\n   * Applies all transformers to a template literal tagged with this method.\n   * If a function is passed as the first argument, assumes the function is a template tag\n   * and applies it to the template, returning a template tag.\n   * @param  {(Function|String|Array<String>)} strings        - Either a template tag or an array containing template strings separated by identifier\n   * @param  {...*}                            ...expressions - Optional list of substitution values.\n   * @return {(String|Function)}                              - Either an intermediary tag function or the results of processing the template.\n   */\n\n\n  _createClass(TemplateTag, [{\n    key: 'interimTag',\n\n\n    /**\n     * An intermediary template tag that receives a template tag and passes the result of calling the template with the received\n     * template tag to our own template tag.\n     * @param  {Function}        nextTag          - the received template tag\n     * @param  {Array<String>}   template         - the template to process\n     * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template\n     * @return {*}                                - the final processed value\n     */\n    value: function interimTag(previousTag, template) {\n      for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        substitutions[_key3 - 2] = arguments[_key3];\n      }\n\n      return this.tag(_templateObject, previousTag.apply(undefined, [template].concat(substitutions)));\n    }\n\n    /**\n     * Performs bulk processing on the tagged template, transforming each substitution and then\n     * concatenating the resulting values into a string.\n     * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template\n     * @param  {String}   resultSoFar   - this iteration's result string so far\n     * @param  {String}   remainingPart - the template chunk after the current substitution\n     * @return {String}                 - the result of joining this iteration's processed substitution with the result\n     */\n\n  }, {\n    key: 'processSubstitutions',\n    value: function processSubstitutions(substitutions, resultSoFar, remainingPart) {\n      var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);\n      return ''.concat(resultSoFar, substitution, remainingPart);\n    }\n\n    /**\n     * Iterate through each transformer, applying the transformer's `onString` method to the template\n     * strings before all substitutions are processed.\n     * @param {String}  str - The input string\n     * @return {String}     - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformString',\n    value: function transformString(str) {\n      var cb = function cb(res, transform) {\n        return transform.onString ? transform.onString(res) : res;\n      };\n      return this.transformers.reduce(cb, str);\n    }\n\n    /**\n     * When a substitution is encountered, iterates through each transformer and applies the transformer's\n     * `onSubstitution` method to the substitution.\n     * @param  {*}      substitution - The current substitution\n     * @param  {String} resultSoFar  - The result up to and excluding this substitution.\n     * @return {*}                   - The final result of applying all substitution transformations.\n     */\n\n  }, {\n    key: 'transformSubstitution',\n    value: function transformSubstitution(substitution, resultSoFar) {\n      var cb = function cb(res, transform) {\n        return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;\n      };\n      return this.transformers.reduce(cb, substitution);\n    }\n\n    /**\n     * Iterates through each transformer, applying the transformer's `onEndResult` method to the\n     * template literal after all substitutions have finished processing.\n     * @param  {String} endResult - The processed template, just before it is returned from the tag\n     * @return {String}           - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformEndResult',\n    value: function transformEndResult(endResult) {\n      var cb = function cb(res, transform) {\n        return transform.onEndResult ? transform.onEndResult(res) : res;\n      };\n      return this.transformers.reduce(cb, endResult);\n    }\n  }]);\n\n  return TemplateTag;\n}();\n\nexport default TemplateTag;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","var defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false\n};\n\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\nvar inlineArrayTransformer = function inlineArrayTransformer() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      // only operate on arrays\n      if (Array.isArray(substitution)) {\n        var arrayLength = substitution.length;\n        var separator = opts.separator;\n        var conjunction = opts.conjunction;\n        var serial = opts.serial;\n        // join each item in the array into a string where each item is separated by separator\n        // be sure to maintain indentation\n        var indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n        if (indent) {\n          substitution = substitution.join(separator + indent[1]);\n        } else {\n          substitution = substitution.join(separator + ' ');\n        }\n        // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n        if (conjunction && arrayLength > 1) {\n          var separatorIndex = substitution.lastIndexOf(separator);\n          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : '') + ' ' + conjunction + substitution.slice(separatorIndex + 1);\n        }\n      }\n      return substitution;\n    }\n  };\n};\n\nexport default inlineArrayTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVBcnJheVRyYW5zZm9ybWVyL2lubGluZUFycmF5VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsiZGVmYXVsdHMiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiIsInNlcmlhbCIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJvcHRzIiwib25TdWJzdGl0dXRpb24iLCJzdWJzdGl0dXRpb24iLCJyZXN1bHRTb0ZhciIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5TGVuZ3RoIiwibGVuZ3RoIiwiaW5kZW50IiwibWF0Y2giLCJqb2luIiwic2VwYXJhdG9ySW5kZXgiLCJsYXN0SW5kZXhPZiIsInNsaWNlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxXQUFXO0FBQ2ZDLGFBQVcsRUFESTtBQUVmQyxlQUFhLEVBRkU7QUFHZkMsVUFBUTtBQUhPLENBQWpCOztBQU1BOzs7Ozs7OztBQVFBLElBQU1DLHlCQUF5QixTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsSUFBRCx1RUFBUUwsUUFBUjtBQUFBLFNBQXNCO0FBQ25ETSxrQkFEbUQsMEJBQ3BDQyxZQURvQyxFQUN0QkMsV0FEc0IsRUFDVDtBQUN4QztBQUNBLFVBQUlDLE1BQU1DLE9BQU4sQ0FBY0gsWUFBZCxDQUFKLEVBQWlDO0FBQy9CLFlBQU1JLGNBQWNKLGFBQWFLLE1BQWpDO0FBQ0EsWUFBTVgsWUFBWUksS0FBS0osU0FBdkI7QUFDQSxZQUFNQyxjQUFjRyxLQUFLSCxXQUF6QjtBQUNBLFlBQU1DLFNBQVNFLEtBQUtGLE1BQXBCO0FBQ0E7QUFDQTtBQUNBLFlBQU1VLFNBQVNMLFlBQVlNLEtBQVosQ0FBa0IsZ0JBQWxCLENBQWY7QUFDQSxZQUFJRCxNQUFKLEVBQVk7QUFDVk4seUJBQWVBLGFBQWFRLElBQWIsQ0FBa0JkLFlBQVlZLE9BQU8sQ0FBUCxDQUE5QixDQUFmO0FBQ0QsU0FGRCxNQUVPO0FBQ0xOLHlCQUFlQSxhQUFhUSxJQUFiLENBQWtCZCxZQUFZLEdBQTlCLENBQWY7QUFDRDtBQUNEO0FBQ0EsWUFBSUMsZUFBZVMsY0FBYyxDQUFqQyxFQUFvQztBQUNsQyxjQUFNSyxpQkFBaUJULGFBQWFVLFdBQWIsQ0FBeUJoQixTQUF6QixDQUF2QjtBQUNBTSx5QkFDRUEsYUFBYVcsS0FBYixDQUFtQixDQUFuQixFQUFzQkYsY0FBdEIsS0FDQ2IsU0FBU0YsU0FBVCxHQUFxQixFQUR0QixJQUVBLEdBRkEsR0FHQUMsV0FIQSxHQUlBSyxhQUFhVyxLQUFiLENBQW1CRixpQkFBaUIsQ0FBcEMsQ0FMRjtBQU1EO0FBQ0Y7QUFDRCxhQUFPVCxZQUFQO0FBQ0Q7QUE1QmtELEdBQXRCO0FBQUEsQ0FBL0I7O0FBK0JBLGVBQWVILHNCQUFmIiwiZmlsZSI6ImlubGluZUFycmF5VHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkZWZhdWx0cyA9IHtcbiAgc2VwYXJhdG9yOiAnJyxcbiAgY29uanVuY3Rpb246ICcnLFxuICBzZXJpYWw6IGZhbHNlLFxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhcnJheSBzdWJzdGl0dXRpb24gdG8gYSBzdHJpbmcgY29udGFpbmluZyBhIGxpc3RcbiAqIEBwYXJhbSAge1N0cmluZ30gW29wdHMuc2VwYXJhdG9yID0gJyddIC0gdGhlIGNoYXJhY3RlciB0aGF0IHNlcGFyYXRlcyBlYWNoIGl0ZW1cbiAqIEBwYXJhbSAge1N0cmluZ30gW29wdHMuY29uanVuY3Rpb24gPSAnJ10gIC0gcmVwbGFjZSB0aGUgbGFzdCBzZXBhcmF0b3Igd2l0aCB0aGlzXG4gKiBAcGFyYW0gIHtCb29sZWFufSBbb3B0cy5zZXJpYWwgPSBmYWxzZV0gLSBpbmNsdWRlIHRoZSBzZXBhcmF0b3IgYmVmb3JlIHRoZSBjb25qdW5jdGlvbj8gKE94Zm9yZCBjb21tYSB1c2UtY2FzZSlcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgPSAob3B0cyA9IGRlZmF1bHRzKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24sIHJlc3VsdFNvRmFyKSB7XG4gICAgLy8gb25seSBvcGVyYXRlIG9uIGFycmF5c1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN1YnN0aXR1dGlvbikpIHtcbiAgICAgIGNvbnN0IGFycmF5TGVuZ3RoID0gc3Vic3RpdHV0aW9uLmxlbmd0aDtcbiAgICAgIGNvbnN0IHNlcGFyYXRvciA9IG9wdHMuc2VwYXJhdG9yO1xuICAgICAgY29uc3QgY29uanVuY3Rpb24gPSBvcHRzLmNvbmp1bmN0aW9uO1xuICAgICAgY29uc3Qgc2VyaWFsID0gb3B0cy5zZXJpYWw7XG4gICAgICAvLyBqb2luIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgaW50byBhIHN0cmluZyB3aGVyZSBlYWNoIGl0ZW0gaXMgc2VwYXJhdGVkIGJ5IHNlcGFyYXRvclxuICAgICAgLy8gYmUgc3VyZSB0byBtYWludGFpbiBpbmRlbnRhdGlvblxuICAgICAgY29uc3QgaW5kZW50ID0gcmVzdWx0U29GYXIubWF0Y2goLyhcXG4/W15cXFNcXG5dKykkLyk7XG4gICAgICBpZiAoaW5kZW50KSB7XG4gICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5qb2luKHNlcGFyYXRvciArIGluZGVudFsxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb24uam9pbihzZXBhcmF0b3IgKyAnICcpO1xuICAgICAgfVxuICAgICAgLy8gaWYgY29uanVuY3Rpb24gaXMgc2V0LCByZXBsYWNlIHRoZSBsYXN0IHNlcGFyYXRvciB3aXRoIGNvbmp1bmN0aW9uLCBidXQgb25seSBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHN1YnN0aXR1dGlvblxuICAgICAgaWYgKGNvbmp1bmN0aW9uICYmIGFycmF5TGVuZ3RoID4gMSkge1xuICAgICAgICBjb25zdCBzZXBhcmF0b3JJbmRleCA9IHN1YnN0aXR1dGlvbi5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBzdWJzdGl0dXRpb24gPVxuICAgICAgICAgIHN1YnN0aXR1dGlvbi5zbGljZSgwLCBzZXBhcmF0b3JJbmRleCkgK1xuICAgICAgICAgIChzZXJpYWwgPyBzZXBhcmF0b3IgOiAnJykgK1xuICAgICAgICAgICcgJyArXG4gICAgICAgICAgY29uanVuY3Rpb24gK1xuICAgICAgICAgIHN1YnN0aXR1dGlvbi5zbGljZShzZXBhcmF0b3JJbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3Vic3RpdHV0aW9uO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGlubGluZUFycmF5VHJhbnNmb3JtZXI7XG4iXX0=","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\nvar stripIndentTransformer = function stripIndentTransformer() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (type === 'initial') {\n        // remove the shortest leading indentation from each line\n        var match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n        var indent = match && Math.min.apply(Math, _toConsumableArray(match.map(function (el) {\n          return el.length;\n        })));\n        if (indent) {\n          var regexp = new RegExp('^.{' + indent + '}', 'gm');\n          return endResult.replace(regexp, '');\n        }\n        return endResult;\n      }\n      if (type === 'all') {\n        // remove all indentation from each line\n        return endResult.replace(/^[^\\S\\n]+/gm, '');\n      }\n      throw new Error('Unknown type: ' + type);\n    }\n  };\n};\n\nexport default stripIndentTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudFRyYW5zZm9ybWVyL3N0cmlwSW5kZW50VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsInR5cGUiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsIm1hdGNoIiwiaW5kZW50IiwiTWF0aCIsIm1pbiIsIm1hcCIsImVsIiwibGVuZ3RoIiwicmVnZXhwIiwiUmVnRXhwIiwicmVwbGFjZSIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7OztBQUtBLElBQU1BLHlCQUF5QixTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsSUFBRCx1RUFBUSxTQUFSO0FBQUEsU0FBdUI7QUFDcERDLGVBRG9ELHVCQUN4Q0MsU0FEd0MsRUFDN0I7QUFDckIsVUFBSUYsU0FBUyxTQUFiLEVBQXdCO0FBQ3RCO0FBQ0EsWUFBTUcsUUFBUUQsVUFBVUMsS0FBVixDQUFnQixtQkFBaEIsQ0FBZDtBQUNBLFlBQU1DLFNBQVNELFNBQVNFLEtBQUtDLEdBQUwsZ0NBQVlILE1BQU1JLEdBQU4sQ0FBVTtBQUFBLGlCQUFNQyxHQUFHQyxNQUFUO0FBQUEsU0FBVixDQUFaLEVBQXhCO0FBQ0EsWUFBSUwsTUFBSixFQUFZO0FBQ1YsY0FBTU0sU0FBUyxJQUFJQyxNQUFKLFNBQWlCUCxNQUFqQixRQUE0QixJQUE1QixDQUFmO0FBQ0EsaUJBQU9GLFVBQVVVLE9BQVYsQ0FBa0JGLE1BQWxCLEVBQTBCLEVBQTFCLENBQVA7QUFDRDtBQUNELGVBQU9SLFNBQVA7QUFDRDtBQUNELFVBQUlGLFNBQVMsS0FBYixFQUFvQjtBQUNsQjtBQUNBLGVBQU9FLFVBQVVVLE9BQVYsQ0FBa0IsYUFBbEIsRUFBaUMsRUFBakMsQ0FBUDtBQUNEO0FBQ0QsWUFBTSxJQUFJQyxLQUFKLG9CQUEyQmIsSUFBM0IsQ0FBTjtBQUNEO0FBakJtRCxHQUF2QjtBQUFBLENBQS9COztBQW9CQSxlQUFlRCxzQkFBZiIsImZpbGUiOiJzdHJpcEluZGVudFRyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBzdHJpcHMgaW5kZW50YXRpb24gZnJvbSBhIHRlbXBsYXRlIGxpdGVyYWxcbiAqIEBwYXJhbSAge1N0cmluZ30gdHlwZSA9ICdpbml0aWFsJyAtIHdoZXRoZXIgdG8gcmVtb3ZlIGFsbCBpbmRlbnRhdGlvbiBvciBqdXN0IGxlYWRpbmcgaW5kZW50YXRpb24uIGNhbiBiZSAnYWxsJyBvciAnaW5pdGlhbCdcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAtIGEgVGVtcGxhdGVUYWcgdHJhbnNmb3JtZXJcbiAqL1xuY29uc3Qgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciA9ICh0eXBlID0gJ2luaXRpYWwnKSA9PiAoe1xuICBvbkVuZFJlc3VsdChlbmRSZXN1bHQpIHtcbiAgICBpZiAodHlwZSA9PT0gJ2luaXRpYWwnKSB7XG4gICAgICAvLyByZW1vdmUgdGhlIHNob3J0ZXN0IGxlYWRpbmcgaW5kZW50YXRpb24gZnJvbSBlYWNoIGxpbmVcbiAgICAgIGNvbnN0IG1hdGNoID0gZW5kUmVzdWx0Lm1hdGNoKC9eW15cXFNcXG5dKig/PVxcUykvZ20pO1xuICAgICAgY29uc3QgaW5kZW50ID0gbWF0Y2ggJiYgTWF0aC5taW4oLi4ubWF0Y2gubWFwKGVsID0+IGVsLmxlbmd0aCkpO1xuICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICBjb25zdCByZWdleHAgPSBuZXcgUmVnRXhwKGBeLnske2luZGVudH19YCwgJ2dtJyk7XG4gICAgICAgIHJldHVybiBlbmRSZXN1bHQucmVwbGFjZShyZWdleHAsICcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbmRSZXN1bHQ7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnYWxsJykge1xuICAgICAgLy8gcmVtb3ZlIGFsbCBpbmRlbnRhdGlvbiBmcm9tIGVhY2ggbGluZVxuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9eW15cXFNcXG5dKy9nbSwgJycpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdHlwZTogJHt0eXBlfWApO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmlwSW5kZW50VHJhbnNmb3JtZXI7XG4iXX0=","/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nvar trimResultTransformer = function trimResultTransformer() {\n  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (side === '') {\n        return endResult.trim();\n      }\n\n      side = side.toLowerCase();\n\n      if (side === 'start' || side === 'left') {\n        return endResult.replace(/^\\s*/, '');\n      }\n\n      if (side === 'end' || side === 'right') {\n        return endResult.replace(/\\s*$/, '');\n      }\n\n      throw new Error('Side not supported: ' + side);\n    }\n  };\n};\n\nexport default trimResultTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmltUmVzdWx0VHJhbnNmb3JtZXIvdHJpbVJlc3VsdFRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInNpZGUiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0EsSUFBTUEsd0JBQXdCLFNBQXhCQSxxQkFBd0I7QUFBQSxNQUFDQyxJQUFELHVFQUFRLEVBQVI7QUFBQSxTQUFnQjtBQUM1Q0MsZUFENEMsdUJBQ2hDQyxTQURnQyxFQUNyQjtBQUNyQixVQUFJRixTQUFTLEVBQWIsRUFBaUI7QUFDZixlQUFPRSxVQUFVQyxJQUFWLEVBQVA7QUFDRDs7QUFFREgsYUFBT0EsS0FBS0ksV0FBTCxFQUFQOztBQUVBLFVBQUlKLFNBQVMsT0FBVCxJQUFvQkEsU0FBUyxNQUFqQyxFQUF5QztBQUN2QyxlQUFPRSxVQUFVRyxPQUFWLENBQWtCLE1BQWxCLEVBQTBCLEVBQTFCLENBQVA7QUFDRDs7QUFFRCxVQUFJTCxTQUFTLEtBQVQsSUFBa0JBLFNBQVMsT0FBL0IsRUFBd0M7QUFDdEMsZUFBT0UsVUFBVUcsT0FBVixDQUFrQixNQUFsQixFQUEwQixFQUExQixDQUFQO0FBQ0Q7O0FBRUQsWUFBTSxJQUFJQyxLQUFKLDBCQUFpQ04sSUFBakMsQ0FBTjtBQUNEO0FBakIyQyxHQUFoQjtBQUFBLENBQTlCOztBQW9CQSxlQUFlRCxxQkFBZiIsImZpbGUiOiJ0cmltUmVzdWx0VHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyIHRoYXQgdHJpbXMgd2hpdGVzcGFjZSBvbiB0aGUgZW5kIHJlc3VsdCBvZiBhIHRhZ2dlZCB0ZW1wbGF0ZVxuICogQHBhcmFtICB7U3RyaW5nfSBzaWRlID0gJycgLSBUaGUgc2lkZSBvZiB0aGUgc3RyaW5nIHRvIHRyaW0uIENhbiBiZSAnc3RhcnQnIG9yICdlbmQnIChhbHRlcm5hdGl2ZWx5ICdsZWZ0JyBvciAncmlnaHQnKVxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciA9IChzaWRlID0gJycpID0+ICh7XG4gIG9uRW5kUmVzdWx0KGVuZFJlc3VsdCkge1xuICAgIGlmIChzaWRlID09PSAnJykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC50cmltKCk7XG4gICAgfVxuXG4gICAgc2lkZSA9IHNpZGUudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmIChzaWRlID09PSAnc3RhcnQnIHx8IHNpZGUgPT09ICdsZWZ0Jykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9eXFxzKi8sICcnKTtcbiAgICB9XG5cbiAgICBpZiAoc2lkZSA9PT0gJ2VuZCcgfHwgc2lkZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFNpZGUgbm90IHN1cHBvcnRlZDogJHtzaWRlfWApO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lcjtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaLists = new TemplateTag(inlineArrayTransformer({ separator: ',' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzL2NvbW1hTGlzdHMuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsImNvbW1hTGlzdHMiLCJzZXBhcmF0b3IiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFdBQVAsTUFBd0IsZ0JBQXhCO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsMEJBQWxDOztBQUVBLElBQU1DLGFBQWEsSUFBSUosV0FBSixDQUNqQkUsdUJBQXVCLEVBQUVHLFdBQVcsR0FBYixFQUF2QixDQURpQixFQUVqQkosc0JBRmlCLEVBR2pCRSxxQkFIaUIsQ0FBbkI7O0FBTUEsZUFBZUMsVUFBZiIsImZpbGUiOiJjb21tYUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IGNvbW1hTGlzdHMgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIoeyBzZXBhcmF0b3I6ICcsJyB9KSxcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFMaXN0cztcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaListsAnd = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'and' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaListsAnd;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzQW5kL2NvbW1hTGlzdHNBbmQuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsImNvbW1hTGlzdHNBbmQiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZ0JBQWdCLElBQUlKLFdBQUosQ0FDcEJFLHVCQUF1QixFQUFFRyxXQUFXLEdBQWIsRUFBa0JDLGFBQWEsS0FBL0IsRUFBdkIsQ0FEb0IsRUFFcEJMLHNCQUZvQixFQUdwQkUscUJBSG9CLENBQXRCOztBQU1BLGVBQWVDLGFBQWYiLCJmaWxlIjoiY29tbWFMaXN0c0FuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBjb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHsgc2VwYXJhdG9yOiAnLCcsIGNvbmp1bmN0aW9uOiAnYW5kJyB9KSxcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFMaXN0c0FuZDtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaListsOr = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'or' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaListsOr;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzT3IvY29tbWFMaXN0c09yLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJjb21tYUxpc3RzT3IiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZUFBZSxJQUFJSixXQUFKLENBQ25CRSx1QkFBdUIsRUFBRUcsV0FBVyxHQUFiLEVBQWtCQyxhQUFhLElBQS9CLEVBQXZCLENBRG1CLEVBRW5CTCxzQkFGbUIsRUFHbkJFLHFCQUhtQixDQUFyQjs7QUFNQSxlQUFlQyxZQUFmIiwiZmlsZSI6ImNvbW1hTGlzdHNPci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBjb21tYUxpc3RzT3IgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIoeyBzZXBhcmF0b3I6ICcsJywgY29uanVuY3Rpb246ICdvcicgfSksXG4gIHN0cmlwSW5kZW50VHJhbnNmb3JtZXIsXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hTGlzdHNPcjtcbiJdfQ==","var splitStringTransformer = function splitStringTransformer(splitBy) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (splitBy != null && typeof splitBy === 'string') {\n        if (typeof substitution === 'string' && substitution.includes(splitBy)) {\n          substitution = substitution.split(splitBy);\n        }\n      } else {\n        throw new Error('You need to specify a string character to split by.');\n      }\n      return substitution;\n    }\n  };\n};\n\nexport default splitStringTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyL3NwbGl0U3RyaW5nVHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsIm9uU3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uIiwicmVzdWx0U29GYXIiLCJzcGxpdEJ5IiwiaW5jbHVkZXMiLCJzcGxpdCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSx5QkFBeUIsU0FBekJBLHNCQUF5QjtBQUFBLFNBQVk7QUFDekNDLGtCQUR5QywwQkFDMUJDLFlBRDBCLEVBQ1pDLFdBRFksRUFDQztBQUN4QyxVQUFJQyxXQUFXLElBQVgsSUFBbUIsT0FBT0EsT0FBUCxLQUFtQixRQUExQyxFQUFvRDtBQUNsRCxZQUFJLE9BQU9GLFlBQVAsS0FBd0IsUUFBeEIsSUFBb0NBLGFBQWFHLFFBQWIsQ0FBc0JELE9BQXRCLENBQXhDLEVBQXdFO0FBQ3RFRix5QkFBZUEsYUFBYUksS0FBYixDQUFtQkYsT0FBbkIsQ0FBZjtBQUNEO0FBQ0YsT0FKRCxNQUlPO0FBQ0wsY0FBTSxJQUFJRyxLQUFKLENBQVUscURBQVYsQ0FBTjtBQUNEO0FBQ0QsYUFBT0wsWUFBUDtBQUNEO0FBVndDLEdBQVo7QUFBQSxDQUEvQjs7QUFhQSxlQUFlRixzQkFBZiIsImZpbGUiOiJzcGxpdFN0cmluZ1RyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lciA9IHNwbGl0QnkgPT4gKHtcbiAgb25TdWJzdGl0dXRpb24oc3Vic3RpdHV0aW9uLCByZXN1bHRTb0Zhcikge1xuICAgIGlmIChzcGxpdEJ5ICE9IG51bGwgJiYgdHlwZW9mIHNwbGl0QnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZW9mIHN1YnN0aXR1dGlvbiA9PT0gJ3N0cmluZycgJiYgc3Vic3RpdHV0aW9uLmluY2x1ZGVzKHNwbGl0QnkpKSB7XG4gICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5zcGxpdChzcGxpdEJ5KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBzcGVjaWZ5IGEgc3RyaW5nIGNoYXJhY3RlciB0byBzcGxpdCBieS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyO1xuIl19","var isValidValue = function isValidValue(x) {\n  return x != null && !Number.isNaN(x) && typeof x !== 'boolean';\n};\n\nvar removeNonPrintingValuesTransformer = function removeNonPrintingValuesTransformer() {\n  return {\n    onSubstitution: function onSubstitution(substitution) {\n      if (Array.isArray(substitution)) {\n        return substitution.filter(isValidValue);\n      }\n      if (isValidValue(substitution)) {\n        return substitution;\n      }\n      return '';\n    }\n  };\n};\n\nexport default removeNonPrintingValuesTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsiaXNWYWxpZFZhbHVlIiwieCIsIk51bWJlciIsImlzTmFOIiwicmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lciIsIm9uU3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uIiwiQXJyYXkiLCJpc0FycmF5IiwiZmlsdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxlQUFlLFNBQWZBLFlBQWU7QUFBQSxTQUNuQkMsS0FBSyxJQUFMLElBQWEsQ0FBQ0MsT0FBT0MsS0FBUCxDQUFhRixDQUFiLENBQWQsSUFBaUMsT0FBT0EsQ0FBUCxLQUFhLFNBRDNCO0FBQUEsQ0FBckI7O0FBR0EsSUFBTUcscUNBQXFDLFNBQXJDQSxrQ0FBcUM7QUFBQSxTQUFPO0FBQ2hEQyxrQkFEZ0QsMEJBQ2pDQyxZQURpQyxFQUNuQjtBQUMzQixVQUFJQyxNQUFNQyxPQUFOLENBQWNGLFlBQWQsQ0FBSixFQUFpQztBQUMvQixlQUFPQSxhQUFhRyxNQUFiLENBQW9CVCxZQUFwQixDQUFQO0FBQ0Q7QUFDRCxVQUFJQSxhQUFhTSxZQUFiLENBQUosRUFBZ0M7QUFDOUIsZUFBT0EsWUFBUDtBQUNEO0FBQ0QsYUFBTyxFQUFQO0FBQ0Q7QUFUK0MsR0FBUDtBQUFBLENBQTNDOztBQVlBLGVBQWVGLGtDQUFmIiwiZmlsZSI6InJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc1ZhbGlkVmFsdWUgPSB4ID0+XG4gIHggIT0gbnVsbCAmJiAhTnVtYmVyLmlzTmFOKHgpICYmIHR5cGVvZiB4ICE9PSAnYm9vbGVhbic7XG5cbmNvbnN0IHJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIgPSAoKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJzdGl0dXRpb24pKSB7XG4gICAgICByZXR1cm4gc3Vic3RpdHV0aW9uLmZpbHRlcihpc1ZhbGlkVmFsdWUpO1xuICAgIH1cbiAgICBpZiAoaXNWYWxpZFZhbHVlKHN1YnN0aXR1dGlvbikpIHtcbiAgICAgIHJldHVybiBzdWJzdGl0dXRpb247XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport removeNonPrintingValuesTransformer from '../removeNonPrintingValuesTransformer';\n\nvar html = new TemplateTag(splitStringTransformer('\\n'), removeNonPrintingValuesTransformer, inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\n\nexport default html;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9odG1sL2h0bWwuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInNwbGl0U3RyaW5nVHJhbnNmb3JtZXIiLCJyZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyIiwiaHRtbCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxrQ0FBUCxNQUErQyx1Q0FBL0M7O0FBRUEsSUFBTUMsT0FBTyxJQUFJTixXQUFKLENBQ1hJLHVCQUF1QixJQUF2QixDQURXLEVBRVhDLGtDQUZXLEVBR1hILHNCQUhXLEVBSVhELHNCQUpXLEVBS1hFLHFCQUxXLENBQWI7O0FBUUEsZUFBZUcsSUFBZiIsImZpbGUiOiJodG1sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lciBmcm9tICcuLi9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyJztcbmltcG9ydCByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyIGZyb20gJy4uL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXInO1xuXG5jb25zdCBodG1sID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyKCdcXG4nKSxcbiAgcmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lcixcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcixcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgaHRtbDtcbiJdfQ==","var replaceSubstitutionTransformer = function replaceSubstitutionTransformer(replaceWhat, replaceWith) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceSubstitutionTransformer requires at least 2 arguments.');\n      }\n\n      // Do not touch if null or undefined\n      if (substitution == null) {\n        return substitution;\n      } else {\n        return substitution.toString().replace(replaceWhat, replaceWith);\n      }\n    }\n  };\n};\n\nexport default replaceSubstitutionTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIvcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lciIsInJlcGxhY2VXaGF0IiwicmVwbGFjZVdpdGgiLCJvblN1YnN0aXR1dGlvbiIsInN1YnN0aXR1dGlvbiIsInJlc3VsdFNvRmFyIiwiRXJyb3IiLCJ0b1N0cmluZyIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLGlDQUFpQyxTQUFqQ0EsOEJBQWlDLENBQUNDLFdBQUQsRUFBY0MsV0FBZDtBQUFBLFNBQStCO0FBQ3BFQyxrQkFEb0UsMEJBQ3JEQyxZQURxRCxFQUN2Q0MsV0FEdUMsRUFDMUI7QUFDeEMsVUFBSUosZUFBZSxJQUFmLElBQXVCQyxlQUFlLElBQTFDLEVBQWdEO0FBQzlDLGNBQU0sSUFBSUksS0FBSixDQUNKLCtEQURJLENBQU47QUFHRDs7QUFFRDtBQUNBLFVBQUlGLGdCQUFnQixJQUFwQixFQUEwQjtBQUN4QixlQUFPQSxZQUFQO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBT0EsYUFBYUcsUUFBYixHQUF3QkMsT0FBeEIsQ0FBZ0NQLFdBQWhDLEVBQTZDQyxXQUE3QyxDQUFQO0FBQ0Q7QUFDRjtBQWRtRSxHQUEvQjtBQUFBLENBQXZDOztBQWlCQSxlQUFlRiw4QkFBZiIsImZpbGUiOiJyZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIgPSAocmVwbGFjZVdoYXQsIHJlcGxhY2VXaXRoKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24sIHJlc3VsdFNvRmFyKSB7XG4gICAgaWYgKHJlcGxhY2VXaGF0ID09IG51bGwgfHwgcmVwbGFjZVdpdGggPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAncmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIHJlcXVpcmVzIGF0IGxlYXN0IDIgYXJndW1lbnRzLicsXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIERvIG5vdCB0b3VjaCBpZiBudWxsIG9yIHVuZGVmaW5lZFxuICAgIGlmIChzdWJzdGl0dXRpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN1YnN0aXR1dGlvbi50b1N0cmluZygpLnJlcGxhY2UocmVwbGFjZVdoYXQsIHJlcGxhY2VXaXRoKTtcbiAgICB9XG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport replaceSubstitutionTransformer from '../replaceSubstitutionTransformer';\n\nvar safeHtml = new TemplateTag(splitStringTransformer('\\n'), inlineArrayTransformer, stripIndentTransformer, trimResultTransformer, replaceSubstitutionTransformer(/&/g, '&amp;'), replaceSubstitutionTransformer(/</g, '&lt;'), replaceSubstitutionTransformer(/>/g, '&gt;'), replaceSubstitutionTransformer(/\"/g, '&quot;'), replaceSubstitutionTransformer(/'/g, '&#x27;'), replaceSubstitutionTransformer(/`/g, '&#x60;'));\n\nexport default safeHtml;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWZlSHRtbC9zYWZlSHRtbC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsInJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lciIsInNhZmVIdG1sIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLDhCQUFQLE1BQTJDLG1DQUEzQzs7QUFFQSxJQUFNQyxXQUFXLElBQUlOLFdBQUosQ0FDZkksdUJBQXVCLElBQXZCLENBRGUsRUFFZkYsc0JBRmUsRUFHZkQsc0JBSGUsRUFJZkUscUJBSmUsRUFLZkUsK0JBQStCLElBQS9CLEVBQXFDLE9BQXJDLENBTGUsRUFNZkEsK0JBQStCLElBQS9CLEVBQXFDLE1BQXJDLENBTmUsRUFPZkEsK0JBQStCLElBQS9CLEVBQXFDLE1BQXJDLENBUGUsRUFRZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBUmUsRUFTZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBVGUsRUFVZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBVmUsQ0FBakI7O0FBYUEsZUFBZUMsUUFBZiIsImZpbGUiOiJzYWZlSHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHNwbGl0U3RyaW5nVHJhbnNmb3JtZXIgZnJvbSAnLi4vc3BsaXRTdHJpbmdUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcic7XG5cbmNvbnN0IHNhZmVIdG1sID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyKCdcXG4nKSxcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcixcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLyYvZywgJyZhbXA7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvPC9nLCAnJmx0OycpLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLz4vZywgJyZndDsnKSxcbiAgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyKC9cIi9nLCAnJnF1b3Q7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvJy9nLCAnJiN4Mjc7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvYC9nLCAnJiN4NjA7JyksXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBzYWZlSHRtbDtcbiJdfQ==","/**\n * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences\n * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced\n * @param  {*}               replaceWith - the replacement value\n * @return {Object}                      - a TemplateTag transformer\n */\nvar replaceResultTransformer = function replaceResultTransformer(replaceWhat, replaceWith) {\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceResultTransformer requires at least 2 arguments.');\n      }\n      return endResult.replace(replaceWhat, replaceWith);\n    }\n  };\n};\n\nexport default replaceResultTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIvcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VXaGF0IiwicmVwbGFjZVdpdGgiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsIkVycm9yIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQU1BLElBQU1BLDJCQUEyQixTQUEzQkEsd0JBQTJCLENBQUNDLFdBQUQsRUFBY0MsV0FBZDtBQUFBLFNBQStCO0FBQzlEQyxlQUQ4RCx1QkFDbERDLFNBRGtELEVBQ3ZDO0FBQ3JCLFVBQUlILGVBQWUsSUFBZixJQUF1QkMsZUFBZSxJQUExQyxFQUFnRDtBQUM5QyxjQUFNLElBQUlHLEtBQUosQ0FDSix5REFESSxDQUFOO0FBR0Q7QUFDRCxhQUFPRCxVQUFVRSxPQUFWLENBQWtCTCxXQUFsQixFQUErQkMsV0FBL0IsQ0FBUDtBQUNEO0FBUjZELEdBQS9CO0FBQUEsQ0FBakM7O0FBV0EsZUFBZUYsd0JBQWYiLCJmaWxlIjoicmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXBsYWNlcyB0YWJzLCBuZXdsaW5lcyBhbmQgc3BhY2VzIHdpdGggdGhlIGNob3NlbiB2YWx1ZSB3aGVuIHRoZXkgb2NjdXIgaW4gc2VxdWVuY2VzXG4gKiBAcGFyYW0gIHsoU3RyaW5nfFJlZ0V4cCl9IHJlcGxhY2VXaGF0IC0gdGhlIHZhbHVlIG9yIHBhdHRlcm4gdGhhdCBzaG91bGQgYmUgcmVwbGFjZWRcbiAqIEBwYXJhbSAgeyp9ICAgICAgICAgICAgICAgcmVwbGFjZVdpdGggLSB0aGUgcmVwbGFjZW1lbnQgdmFsdWVcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciA9IChyZXBsYWNlV2hhdCwgcmVwbGFjZVdpdGgpID0+ICh7XG4gIG9uRW5kUmVzdWx0KGVuZFJlc3VsdCkge1xuICAgIGlmIChyZXBsYWNlV2hhdCA9PSBudWxsIHx8IHJlcGxhY2VXaXRoID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciByZXF1aXJlcyBhdCBsZWFzdCAyIGFyZ3VtZW50cy4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKHJlcGxhY2VXaGF0LCByZXBsYWNlV2l0aCk7XG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLine = new TemplateTag(replaceResultTransformer(/(?:\\n(?:\\s*))+/g, ' '), trimResultTransformer);\n\nexport default oneLine;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lL29uZUxpbmUuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxVQUFVLElBQUlILFdBQUosQ0FDZEUseUJBQXlCLGlCQUF6QixFQUE0QyxHQUE1QyxDQURjLEVBRWRELHFCQUZjLENBQWhCOztBQUtBLGVBQWVFLE9BQWYiLCJmaWxlIjoib25lTGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IG9uZUxpbmUgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxuKD86XFxzKikpKy9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lO1xuIl19","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineTrim = new TemplateTag(replaceResultTransformer(/(?:\\n\\s*)/g, ''), trimResultTransformer);\n\nexport default oneLineTrim;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lVHJpbS9vbmVMaW5lVHJpbS5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsIm9uZUxpbmVUcmltIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxjQUFjLElBQUlILFdBQUosQ0FDbEJFLHlCQUF5QixZQUF6QixFQUF1QyxFQUF2QyxDQURrQixFQUVsQkQscUJBRmtCLENBQXBCOztBQUtBLGVBQWVFLFdBQWYiLCJmaWxlIjoib25lTGluZVRyaW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lVHJpbSA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXG5cXHMqKS9nLCAnJyksXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVUcmltO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaLists = new TemplateTag(inlineArrayTransformer({ separator: ',' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0cy9vbmVMaW5lQ29tbWFMaXN0cy5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lQ29tbWFMaXN0cyIsInNlcGFyYXRvciJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQyw2QkFBckM7O0FBRUEsSUFBTUMsb0JBQW9CLElBQUlKLFdBQUosQ0FDeEJDLHVCQUF1QixFQUFFSSxXQUFXLEdBQWIsRUFBdkIsQ0FEd0IsRUFFeEJGLHlCQUF5QixVQUF6QixFQUFxQyxHQUFyQyxDQUZ3QixFQUd4QkQscUJBSHdCLENBQTFCOztBQU1BLGVBQWVFLGlCQUFmIiwiZmlsZSI6Im9uZUxpbmVDb21tYUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lQ29tbWFMaXN0cyA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7IHNlcGFyYXRvcjogJywnIH0pLFxuICByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIoLyg/OlxccyspL2csICcgJyksXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVDb21tYUxpc3RzO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaListsOr = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'or' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaListsOr;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c09yL29uZUxpbmVDb21tYUxpc3RzT3IuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwicmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIiwib25lTGluZUNvbW1hTGlzdHNPciIsInNlcGFyYXRvciIsImNvbmp1bmN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxzQkFBc0IsSUFBSUosV0FBSixDQUMxQkMsdUJBQXVCLEVBQUVJLFdBQVcsR0FBYixFQUFrQkMsYUFBYSxJQUEvQixFQUF2QixDQUQwQixFQUUxQkgseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRjBCLEVBRzFCRCxxQkFIMEIsQ0FBNUI7O0FBTUEsZUFBZUUsbUJBQWYiLCJmaWxlIjoib25lTGluZUNvbW1hTGlzdHNPci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgaW5saW5lQXJyYXlUcmFuc2Zvcm1lciBmcm9tICcuLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcbmltcG9ydCByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyJztcblxuY29uc3Qgb25lTGluZUNvbW1hTGlzdHNPciA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7IHNlcGFyYXRvcjogJywnLCBjb25qdW5jdGlvbjogJ29yJyB9KSxcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lQ29tbWFMaXN0c09yO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaListsAnd = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'and' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaListsAnd;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c0FuZC9vbmVMaW5lQ29tbWFMaXN0c0FuZC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lQ29tbWFMaXN0c0FuZCIsInNlcGFyYXRvciIsImNvbmp1bmN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyx1QkFBdUIsSUFBSUosV0FBSixDQUMzQkMsdUJBQXVCLEVBQUVJLFdBQVcsR0FBYixFQUFrQkMsYUFBYSxLQUEvQixFQUF2QixDQUQyQixFQUUzQkgseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRjJCLEVBRzNCRCxxQkFIMkIsQ0FBN0I7O0FBTUEsZUFBZUUsb0JBQWYiLCJmaWxlIjoib25lTGluZUNvbW1hTGlzdHNBbmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IG9uZUxpbmVDb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHsgc2VwYXJhdG9yOiAnLCcsIGNvbmp1bmN0aW9uOiAnYW5kJyB9KSxcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lQ29tbWFMaXN0c0FuZDtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar inlineLists = new TemplateTag(inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\n\nexport default inlineLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVMaXN0cy9pbmxpbmVMaXN0cy5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwiaW5saW5lTGlzdHMiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFdBQVAsTUFBd0IsZ0JBQXhCO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsMEJBQWxDOztBQUVBLElBQU1DLGNBQWMsSUFBSUosV0FBSixDQUNsQkUsc0JBRGtCLEVBRWxCRCxzQkFGa0IsRUFHbEJFLHFCQUhrQixDQUFwQjs7QUFNQSxlQUFlQyxXQUFmIiwiZmlsZSI6ImlubGluZUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IGlubGluZUxpc3RzID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyLFxuICBzdHJpcEluZGVudFRyYW5zZm9ybWVyLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmxpbmVMaXN0cztcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineInlineLists = new TemplateTag(inlineArrayTransformer, replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineInlineLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lSW5saW5lTGlzdHMvb25lTGluZUlubGluZUxpc3RzLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsIm9uZUxpbmVJbmxpbmVMaXN0cyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQyw2QkFBckM7O0FBRUEsSUFBTUMscUJBQXFCLElBQUlKLFdBQUosQ0FDekJDLHNCQUR5QixFQUV6QkUseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRnlCLEVBR3pCRCxxQkFIeUIsQ0FBM0I7O0FBTUEsZUFBZUUsa0JBQWYiLCJmaWxlIjoib25lTGluZUlubGluZUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lSW5saW5lTGlzdHMgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIsXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxzKykvZywgJyAnKSxcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgb25lTGluZUlubGluZUxpc3RzO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar stripIndent = new TemplateTag(stripIndentTransformer, trimResultTransformer);\n\nexport default stripIndent;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudC9zdHJpcEluZGVudC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJzdHJpcEluZGVudCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsY0FBYyxJQUFJSCxXQUFKLENBQ2xCQyxzQkFEa0IsRUFFbEJDLHFCQUZrQixDQUFwQjs7QUFLQSxlQUFlQyxXQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBzdHJpcEluZGVudCA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaXBJbmRlbnQ7XG4iXX0=","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar stripIndents = new TemplateTag(stripIndentTransformer('all'), trimResultTransformer);\n\nexport default stripIndents;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudHMvc3RyaXBJbmRlbnRzLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInN0cmlwSW5kZW50cyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZUFBZSxJQUFJSCxXQUFKLENBQ25CQyx1QkFBdUIsS0FBdkIsQ0FEbUIsRUFFbkJDLHFCQUZtQixDQUFyQjs7QUFLQSxlQUFlQyxZQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcblxuY29uc3Qgc3RyaXBJbmRlbnRzID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzdHJpcEluZGVudFRyYW5zZm9ybWVyKCdhbGwnKSxcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaXBJbmRlbnRzO1xuIl19","import { css, cx } from '@emotion/css';\nimport { stripIndent, stripIndents } from 'common-tags';\nimport Prism from 'prismjs';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport { flattenTokens } from '@grafana/ui/src/slate-plugins/slate-prism';\n\nimport tokenizer from '../language/cloudwatch-logs/syntax';\nimport { CloudWatchQuery } from '../types';\n\ninterface QueryExample {\n  category: string;\n  examples: Array<{\n    title: string;\n    expr: string;\n  }>;\n}\n\nconst CLIQ_EXAMPLES: QueryExample[] = [\n  {\n    category: 'Lambda',\n    examples: [\n      {\n        title: 'View latency statistics for 5-minute intervals',\n        expr: stripIndents`filter @type = \"REPORT\" |\n                           stats avg(@duration), max(@duration), min(@duration) by bin(5m)`,\n      },\n      {\n        title: 'Determine the amount of overprovisioned memory',\n        expr: stripIndent`\n        filter @type = \"REPORT\" |\n        stats max(@memorySize / 1024 / 1024) as provisonedMemoryMB,\n              min(@maxMemoryUsed / 1024 / 1024) as smallestMemoryRequestMB,\n              avg(@maxMemoryUsed / 1024 / 1024) as avgMemoryUsedMB,\n              max(@maxMemoryUsed / 1024 / 1024) as maxMemoryUsedMB,\n              provisonedMemoryMB - maxMemoryUsedMB as overProvisionedMB`,\n      },\n      {\n        title: 'Find the most expensive requests',\n        expr: stripIndents`filter @type = \"REPORT\" |\n                           fields @requestId, @billedDuration |\n                           sort by @billedDuration desc`,\n      },\n    ],\n  },\n\n  {\n    category: 'VPC Flow Logs',\n    examples: [\n      {\n        title: 'Average, min, and max byte transfers by source and destination IP addresses',\n        expr: `stats avg(bytes), min(bytes), max(bytes) by srcAddr, dstAddr`,\n      },\n      {\n        title: 'IP addresses using UDP transfer protocol',\n        expr: 'filter protocol=17 | stats count(*) by srcAddr',\n      },\n      {\n        title: 'Top 10 byte transfers by source and destination IP addresses',\n        expr: stripIndents`stats sum(bytes) as bytesTransferred by srcAddr, dstAddr |\n                           sort bytesTransferred desc |\n                           limit 10`,\n      },\n      {\n        title: 'Top 20 source IP addresses with highest number of rejected requests',\n        expr: stripIndents`filter action=\"REJECT\" |\n                           stats count(*) as numRejections by srcAddr |\n                           sort numRejections desc |\n                           limit 20`,\n      },\n    ],\n  },\n  {\n    category: 'CloudTrail',\n    examples: [\n      {\n        title: 'Number of log entries by service, event type, and region',\n        expr: 'stats count(*) by eventSource, eventName, awsRegion',\n      },\n\n      {\n        title: 'Number of log entries by region and EC2 event type',\n        expr: stripIndents`filter eventSource=\"ec2.amazonaws.com\" |\n                           stats count(*) as eventCount by eventName, awsRegion |\n                           sort eventCount desc`,\n      },\n\n      {\n        title: 'Regions, usernames, and ARNs of newly created IAM users',\n        expr: stripIndents`filter eventName=\"CreateUser\" |\n                           fields awsRegion, requestParameters.userName, responseElements.user.arn`,\n      },\n    ],\n  },\n  {\n    category: 'Common Queries',\n    examples: [\n      {\n        title: '25 most recently added log events',\n        expr: stripIndents`fields @timestamp, @message |\n                           sort @timestamp desc |\n                           limit 25`,\n      },\n      {\n        title: 'Number of exceptions logged every 5 minutes',\n        expr: stripIndents`filter @message like /Exception/ |\n                           stats count(*) as exceptionCount by bin(5m) |\n                           sort exceptionCount desc`,\n      },\n      {\n        title: 'List of log events that are not exceptions',\n        expr: 'fields @message | filter @message not like /Exception/',\n      },\n    ],\n  },\n  {\n    category: 'Route 53',\n    examples: [\n      {\n        title: 'Number of requests received every 10  minutes by edge location',\n        expr: 'stats count(*) by queryType, bin(10m)',\n      },\n      {\n        title: 'Number of unsuccessful requests by domain',\n        expr: 'filter responseCode=\"SERVFAIL\" | stats count(*) by queryName',\n      },\n      {\n        title: 'Number of requests received every 10  minutes by edge location',\n        expr: 'stats count(*) as numRequests by resolverIp | sort numRequests desc | limit 10',\n      },\n    ],\n  },\n  {\n    category: 'AWS AppSync',\n    examples: [\n      {\n        title: 'Number of unique HTTP status codes',\n        expr: stripIndents`fields ispresent(graphQLAPIId) as isApi |\n                           filter isApi |\n                           filter logType = \"RequestSummary\" |\n                           stats count() as statusCount by statusCode |\n                           sort statusCount desc`,\n      },\n      {\n        title: 'Top 10 resolvers with maximum latency',\n        expr: stripIndents`fields resolverArn, duration |\n                           filter logType = \"Tracing\" |\n                           sort duration desc |\n                           limit 10`,\n      },\n      {\n        title: 'Most frequently invoked resolvers',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           stats count() as invocationCount by resolverArn |\n                           filter isRes |\n                           filter logType = \"Tracing\" |\n                           sort invocationCount desc |\n                           limit 10`,\n      },\n      {\n        title: 'Resolvers with most errors in mapping templates',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           stats count() as errorCount by resolverArn, logType |\n                           filter isRes and (logType = \"RequestMapping\" or logType = \"ResponseMapping\") and fieldInError |\n                           sort errorCount desc |\n                           limit 10`,\n      },\n      {\n        title: 'Field latency statistics',\n        expr: stripIndents`fields requestId, latency |\n                           filter logType = \"RequestSummary\" |\n                           sort latency desc |\n                           limit 10`,\n      },\n      {\n        title: 'Resolver latency statistics',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           filter isRes |\n                           filter logType = \"Tracing\" |\n                           stats min(duration), max(duration), avg(duration) as avgDur by resolverArn |\n                           sort avgDur desc |\n                           limit 10`,\n      },\n      {\n        title: 'Top 10 requests with maximum latency',\n        expr: stripIndents`fields requestId, latency |\n                           filter logType = \"RequestSummary\" |\n                           sort latency desc |\n                           limit 10`,\n      },\n    ],\n  },\n];\n\nfunction renderHighlightedMarkup(code: string, keyPrefix: string) {\n  const grammar = tokenizer;\n  const tokens = flattenTokens(Prism.tokenize(code, grammar));\n  const spans = tokens\n    .filter((token) => typeof token !== 'string')\n    .map((token, i) => {\n      return (\n        <span\n          className={`prism-token token ${token.types.join(' ')} ${token.aliases.join(' ')}`}\n          key={`${keyPrefix}-token-${i}`}\n        >\n          {token.content}\n        </span>\n      );\n    });\n\n  return <div className=\"slate-query-field\">{spans}</div>;\n}\n\nconst exampleCategory = css`\n  margin-top: 5px;\n`;\n\nexport default class LogsCheatSheet extends PureComponent<\n  QueryEditorHelpProps<CloudWatchQuery>,\n  { userExamples: string[] }\n> {\n  onClickExample(query: CloudWatchQuery) {\n    this.props.onClickExample(query);\n  }\n  renderExpression(expr: string, keyPrefix: string) {\n    return (\n      <button\n        type=\"button\"\n        className=\"cheat-sheet-item__example\"\n        key={expr}\n        onClick={() =>\n          this.onClickExample({\n            refId: this.props.query.refId ?? 'A',\n            expression: expr,\n            queryMode: 'Logs',\n            region: this.props.query.region,\n            id: this.props.query.refId ?? 'A',\n            logGroupNames: 'logGroupNames' in this.props.query ? this.props.query.logGroupNames : [],\n            logGroups: 'logGroups' in this.props.query ? this.props.query.logGroups : [],\n          })\n        }\n      >\n        <pre>{renderHighlightedMarkup(expr, keyPrefix)}</pre>\n      </button>\n    );\n  }\n\n  renderLogsCheatSheet() {\n    return (\n      <div>\n        <h2>CloudWatch Logs Cheat Sheet</h2>\n        {CLIQ_EXAMPLES.map((cat, i) => (\n          <div key={`${cat.category}-${i}`}>\n            <div className={`cheat-sheet-item__title ${cx(exampleCategory)}`}>{cat.category}</div>\n            {cat.examples.map((item, j) => (\n              <div className=\"cheat-sheet-item\" key={`item-${j}`}>\n                <h4>{item.title}</h4>\n                {this.renderExpression(item.expr, `item-${j}`)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>CloudWatch Logs cheat sheet</h3>\n        {CLIQ_EXAMPLES.map((cat, i) => (\n          <div key={`cat-${i}`}>\n            <div className={`cheat-sheet-item__title ${cx(exampleCategory)}`}>{cat.category}</div>\n            {cat.examples.map((item, j) => (\n              <div className=\"cheat-sheet-item\" key={`item-${j}`}>\n                <h4>{item.title}</h4>\n                {this.renderExpression(item.expr, `item-${j}`)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import { groupBy } from 'lodash';\nimport React, { useMemo } from 'react';\n\nimport { MetadataInspectorProps } from '@grafana/data';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchQuery, CloudWatchJsonData } from '../types';\n\nexport type Props = MetadataInspectorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>;\n\nexport function MetaInspector({ data = [] }: Props) {\n  const rows = useMemo(() => groupBy(data, 'refId'), [data]);\n\n  return (\n    <>\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>RefId</th>\n            <th>Metric Data Query ID</th>\n            <th>Metric Data Query Expression</th>\n            <th>Period</th>\n            <th />\n          </tr>\n        </thead>\n        {Object.entries(rows).map(([refId, frames], idx) => {\n          if (!frames.length) {\n            return null;\n          }\n\n          const frame = frames[0];\n          const custom = frame.meta?.custom;\n          if (!custom) {\n            return null;\n          }\n\n          return (\n            <tbody key={idx}>\n              <tr>\n                <td>{refId}</td>\n                <td>{custom.id}</td>\n                <td>{frame.meta?.executedQueryString}</td>\n                <td>{custom.period}</td>\n              </tr>\n            </tbody>\n          );\n        })}\n      </table>\n    </>\n  );\n}\n","import { DashboardLoadedEvent } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\n\nimport { isCloudWatchLogsQuery, isCloudWatchMetricsQuery } from './guards';\nimport { migrateMetricQuery } from './migrations/metricQueryMigrations';\nimport pluginJson from './plugin.json';\nimport {\n  CloudWatchLogsQuery,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n  MetricEditorMode,\n  MetricQueryType,\n} from './types';\nimport { filterMetricsQuery } from './utils/utils';\n\ntype CloudWatchOnDashboardLoadedTrackingEvent = {\n  grafana_version?: string;\n  dashboard_id?: string;\n  org_id?: number;\n\n  /* The number of CloudWatch logs queries present in the dashboard*/\n  logs_queries_count: number;\n\n  /* The number of CloudWatch metrics queries present in the dashboard*/\n  metrics_queries_count: number;\n\n  /* The number of queries using the \"Search\" mode. \n  Should be measured in relation to metrics_queries_count, e.g metrics_search_count + metrics_query_count = metrics_queries_count */\n  metrics_search_count: number;\n\n  /* The number of search queries that are using the builder mode. \n  Should be measured in relation to metrics_search_count, e.g metrics_search_builder_count + metrics_search_code_count = metrics_search_count */\n  metrics_search_builder_count: number;\n\n  /* The number of search queries that are using the code mode. \n  Should be measured in relation to metrics_search_count, e.g metrics_search_builder_count + metrics_search_code_count = metrics_search_count */\n  metrics_search_code_count: number;\n\n  /* The number of search queries that have enabled the `match exact` toggle in the builder mode. \n  Should be measured in relation to metrics_search_builder_count. \n  E.g 'Out of 5 metric seach queries (metrics_search_builder_count), 2 had match exact toggle (metrics_search_match_exact_count) enabled */\n  metrics_search_match_exact_count: number;\n\n  /* The number of queries using the \"Query\" mode (AKA Metric Insights). \n  Should be measured in relation to metrics_queries_count, e.g metrics_search_count + metrics_query_count = metrics_queries_count */\n  metrics_query_count: number;\n\n  /* The number of \"Insights\" queries that are using the builder mode. \n  Should be measured in relation to metrics_query_count, e.g metrics_query_builder_count + metrics_query_code_count = metrics_query_count */\n  metrics_query_builder_count: number;\n\n  /* The number of \"Insights\" queries that are using the code mode. \n  Should be measured in relation to metrics_query_count, e.g metrics_query_builder_count + metrics_query_code_count = metrics_query_count */\n  metrics_query_code_count: number;\n\n  /* The number of CloudWatch metrics queries that have specified an account in its cross account metric stat query */\n  metrics_queries_with_account_count: number;\n};\n\nexport const onDashboardLoadedHandler = ({\n  payload: { dashboardId, orgId, grafanaVersion, queries },\n}: DashboardLoadedEvent<CloudWatchQuery>) => {\n  try {\n    const cloudWatchQueries = queries[pluginJson.id];\n\n    if (!cloudWatchQueries?.length) {\n      return;\n    }\n\n    let logsQueries: CloudWatchLogsQuery[] = [];\n    let metricsQueries: CloudWatchMetricsQuery[] = [];\n\n    for (const query of cloudWatchQueries) {\n      if (query.hide) {\n        continue;\n      }\n\n      if (isCloudWatchLogsQuery(query)) {\n        query.logGroupNames?.length && logsQueries.push(query);\n      } else if (isCloudWatchMetricsQuery(query)) {\n        const migratedQuery = migrateMetricQuery(query);\n        filterMetricsQuery(migratedQuery) && metricsQueries.push(query);\n      }\n    }\n\n    const e: CloudWatchOnDashboardLoadedTrackingEvent = {\n      grafana_version: grafanaVersion,\n      dashboard_id: dashboardId,\n      org_id: orgId,\n      logs_queries_count: logsQueries?.length,\n      metrics_queries_count: metricsQueries?.length,\n      metrics_search_count: 0,\n      metrics_search_builder_count: 0,\n      metrics_search_code_count: 0,\n      metrics_search_match_exact_count: 0,\n      metrics_query_count: 0,\n      metrics_query_builder_count: 0,\n      metrics_query_code_count: 0,\n      metrics_queries_with_account_count: 0,\n    };\n\n    for (const q of metricsQueries) {\n      e.metrics_search_count += +Boolean(q.metricQueryType === MetricQueryType.Search);\n      e.metrics_search_builder_count += +isMetricSearchBuilder(q);\n      e.metrics_search_code_count += +Boolean(\n        q.metricQueryType === MetricQueryType.Search && q.metricEditorMode === MetricEditorMode.Code\n      );\n      e.metrics_search_match_exact_count += +Boolean(isMetricSearchBuilder(q) && q.matchExact);\n      e.metrics_query_count += +Boolean(q.metricQueryType === MetricQueryType.Query);\n      e.metrics_query_builder_count += +Boolean(\n        q.metricQueryType === MetricQueryType.Query && q.metricEditorMode === MetricEditorMode.Builder\n      );\n      e.metrics_query_code_count += +Boolean(\n        q.metricQueryType === MetricQueryType.Query && q.metricEditorMode === MetricEditorMode.Code\n      );\n      e.metrics_queries_with_account_count += +Boolean(\n        config.featureToggles.cloudWatchCrossAccountQuerying && isMetricSearchBuilder(q) && q.accountId\n      );\n    }\n\n    reportInteraction('grafana_ds_cloudwatch_dashboard_loaded', e);\n  } catch (error) {\n    console.error('error in cloudwatch tracking handler', error);\n  }\n};\n\nconst isMetricSearchBuilder = (q: CloudWatchMetricsQuery) =>\n  Boolean(q.metricQueryType === MetricQueryType.Search && q.metricEditorMode === MetricEditorMode.Builder);\n","import { DashboardLoadedEvent, DataSourcePlugin } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\n\nimport { ConfigEditor } from './components/ConfigEditor';\nimport LogsCheatSheet from './components/LogsCheatSheet';\nimport { MetaInspector } from './components/MetaInspector';\nimport { QueryEditor } from './components/QueryEditor';\nimport { CloudWatchDatasource } from './datasource';\nimport { onDashboardLoadedHandler } from './tracking';\nimport { CloudWatchJsonData, CloudWatchQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>(\n  CloudWatchDatasource\n)\n  .setQueryEditorHelp(LogsCheatSheet)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setMetadataInspector(MetaInspector);\n\n// Subscribe to on dashboard loaded event so that we can track plugin adoption\ngetAppEvents().subscribe<DashboardLoadedEvent<CloudWatchQuery>>(DashboardLoadedEvent, onDashboardLoadedHandler);\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n","import isDeepEqualReact from 'fast-deep-equal/react';\nexport default isDeepEqualReact;\n","import useCustomCompareEffect from './useCustomCompareEffect';\nimport isDeepEqual from './misc/isDeepEqual';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useDeepCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useDeepCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useDeepCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, isDeepEqual);\n};\nexport default useDeepCompareEffect;\n","Object.defineProperty(exports,\"__esModule\",{value:!0});var e,t=require(\"react\"),a=(e=t)&&\"object\"==typeof e&&\"default\"in e?e.default:e,n=require(\"@grafana/ui\"),l=require(\"@grafana/data\"),s=require(\"lodash\");const o=[\"af-south-1\",\"ap-east-1\",\"ap-northeast-1\",\"ap-northeast-2\",\"ap-northeast-3\",\"ap-south-1\",\"ap-southeast-1\",\"ap-southeast-2\",\"ca-central-1\",\"cn-north-1\",\"cn-northwest-1\",\"eu-central-1\",\"eu-north-1\",\"eu-west-1\",\"eu-west-2\",\"eu-west-3\",\"me-south-1\",\"sa-east-1\",\"us-east-1\",\"us-east-2\",\"us-gov-east-1\",\"us-gov-west-1\",\"us-iso-east-1\",\"us-isob-east-1\",\"us-west-1\",\"us-west-2\"];var i;(i=exports.AwsAuthType||(exports.AwsAuthType={})).Keys=\"keys\",i.Credentials=\"credentials\",i.Default=\"default\",i.EC2IAMRole=\"ec2_iam_role\",i.ARN=\"arn\";const u=[{label:\"Workspace IAM Role\",value:exports.AwsAuthType.EC2IAMRole},{label:\"AWS SDK Default\",value:exports.AwsAuthType.Default},{label:\"Access & secret key\",value:exports.AwsAuthType.Keys},{label:\"Credentials file\",value:exports.AwsAuthType.Credentials}],r=e=>({value:e,label:e}),c=e=>{var s,i,c,d,p,h,g,v;const[m,f]=t.useState((e.standardRegions||o).map(r)),{loadRegions:b,onOptionsChange:y,skipHeader:D=!1,skipEndpoint:E=!1}=e,{labelWidth:O=28,options:j}=e;let w=j.jsonData.profile;void 0===w&&(w=j.database);const A=window.grafanaBootData.settings,C=t.useMemo(()=>{var e;return null!==(e=A.awsAllowedAuthProviders)&&void 0!==e?e:[exports.AwsAuthType.Default,exports.AwsAuthType.Keys,exports.AwsAuthType.Credentials]},[A.awsAllowedAuthProviders]),S=null===(s=A.awsAssumeRoleEnabled)||void 0===s||s,V=u.find(e=>e.value===j.jsonData.authType);return t.useEffect(()=>{!V&&C.length&&y(Object.assign(Object.assign({},j),{jsonData:Object.assign(Object.assign({},j.jsonData),{authType:C[0]})}))},[V,j,y,C]),t.useEffect(()=>{b&&b().then(e=>f(e.map(r)))},[b]),a.createElement(n.FieldSet,{label:D?\"\":\"Connection Details\",\"data-testid\":\"connection-config\"},a.createElement(n.InlineField,{label:\"Authentication Provider\",labelWidth:O,tooltip:\"Specify which AWS credentials chain to use.\"},a.createElement(n.Select,{\"aria-label\":\"Authentication Provider\",className:\"width-30\",value:V,options:u.filter(e=>C.includes(e.value)),defaultValue:j.jsonData.authType,onChange:t=>{l.onUpdateDatasourceJsonDataOptionSelect(e,\"authType\")(t)},menuShouldPortal:!0})),\"credentials\"===j.jsonData.authType&&a.createElement(n.InlineField,{label:\"Credentials Profile Name\",labelWidth:O,tooltip:\"Credentials profile name, as specified in ~/.aws/credentials, leave blank for default.\"},a.createElement(n.Input,{\"aria-label\":\"Credentials Profile Name\",className:\"width-30\",placeholder:\"default\",value:w,onChange:l.onUpdateDatasourceJsonDataOption(e,\"profile\")})),\"keys\"===j.jsonData.authType&&a.createElement(a.Fragment,null,a.createElement(n.InlineField,{label:\"Access Key ID\",labelWidth:O},(null===(i=e.options.secureJsonFields)||void 0===i?void 0:i.accessKey)?a.createElement(n.ButtonGroup,{className:\"width-30\"},a.createElement(n.Input,{disabled:!0,placeholder:\"Configured\"}),a.createElement(n.ToolbarButton,{icon:\"edit\",tooltip:\"Edit Access Key ID\",type:\"button\",onClick:l.onUpdateDatasourceResetOption(e,\"accessKey\")})):a.createElement(n.Input,{\"aria-label\":\"Access Key ID\",className:\"width-30\",value:null!==(d=null===(c=j.secureJsonData)||void 0===c?void 0:c.accessKey)&&void 0!==d?d:\"\",onChange:l.onUpdateDatasourceSecureJsonDataOption(e,\"accessKey\")})),a.createElement(n.InlineField,{label:\"Secret Access Key\",labelWidth:O},(null===(p=e.options.secureJsonFields)||void 0===p?void 0:p.secretKey)?a.createElement(n.ButtonGroup,{className:\"width-30\"},a.createElement(n.Input,{disabled:!0,placeholder:\"Configured\"}),a.createElement(n.ToolbarButton,{icon:\"edit\",type:\"button\",tooltip:\"Edit Secret Access Key\",onClick:l.onUpdateDatasourceResetOption(e,\"secretKey\")})):a.createElement(n.Input,{\"aria-label\":\"Secret Access Key\",className:\"width-30\",value:null!==(g=null===(h=j.secureJsonData)||void 0===h?void 0:h.secretKey)&&void 0!==g?g:\"\",onChange:l.onUpdateDatasourceSecureJsonDataOption(e,\"secretKey\")}))),S&&a.createElement(a.Fragment,null,a.createElement(n.InlineField,{label:\"Assume Role ARN\",labelWidth:O,tooltip:\"Optionally, specify the ARN of a role to assume. Specifying a role here will ensure that the selected authentication provider is used to assume the specified role rather than using the credentials directly. Leave blank if you don't need to assume a role at all\"},a.createElement(n.Input,{\"aria-label\":\"Assume Role ARN\",className:\"width-30\",placeholder:\"arn:aws:iam:*\",value:j.jsonData.assumeRoleArn||\"\",onChange:l.onUpdateDatasourceJsonDataOption(e,\"assumeRoleArn\")})),a.createElement(n.InlineField,{label:\"External ID\",labelWidth:O,tooltip:\"If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.\"},a.createElement(n.Input,{\"aria-label\":\"External ID\",className:\"width-30\",placeholder:\"External ID\",value:j.jsonData.externalId||\"\",onChange:l.onUpdateDatasourceJsonDataOption(e,\"externalId\")}))),!E&&a.createElement(n.InlineField,{label:\"Endpoint\",labelWidth:O,tooltip:\"Optionally, specify a custom endpoint for the service\"},a.createElement(n.Input,{\"aria-label\":\"Endpoint\",className:\"width-30\",placeholder:null!==(v=e.defaultEndpoint)&&void 0!==v?v:\"https://{service}.{region}.amazonaws.com\",value:j.jsonData.endpoint||\"\",onChange:l.onUpdateDatasourceJsonDataOption(e,\"endpoint\")})),a.createElement(n.InlineField,{label:\"Default Region\",labelWidth:O,tooltip:\"Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.\"},a.createElement(n.Select,{\"aria-label\":\"Default Region\",className:\"width-30\",value:m.find(e=>e.value===j.jsonData.defaultRegion),options:m,defaultValue:j.jsonData.defaultRegion,allowCustomValue:!0,onChange:l.onUpdateDatasourceJsonDataOptionSelect(e,\"defaultRegion\"),formatCreateLabel:e=>\"Use region: \"+e,menuShouldPortal:!0})),e.children)};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\nfunction d(e,t,a,n){return new(a||(a=Promise))((function(l,s){function o(e){try{u(n.next(e))}catch(e){s(e)}}function i(e){try{u(n.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?l(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(o,i)}u((n=n.apply(e,t||[])).next())}))}function p(e){const[l,o]=t.useState(e.value||e.default||null),[i,u]=t.useState(l?[l]:[]),[r,c]=t.useState(e.dependencies),[p,h]=t.useState(!1),[g,v]=t.useState(!1),m=t.useMemo(()=>{const t=[{label:`default (${e.default})`,value:\"__default\",description:\"Default value set in the data source\"}];return e.value&&\"__default\"!==e.value&&t.push({label:e.value,value:e.value}),t},[e.default,e.value]),[f,b]=t.useState(e.default?m:[]);t.useEffect(()=>{void 0!==e.resources&&u(e.resources)},[e.resources]),t.useEffect(()=>{const t=e.default?m:[];i.length?(i.forEach(e=>{const a=\"string\"==typeof e?e:e.value;t.find(e=>e.value===a)||(\"string\"==typeof e?t.push({label:e,value:e}):t.push(e))}),b(t)):b([])},[i,m,e.default]),t.useEffect(()=>{s.isEqual(e.dependencies,r)||(v(!1),o(null),e.onChange(null),c(e.dependencies))},[e,r]);const y=()=>d(this,void 0,void 0,(function*(){if(!g){e.saveOptions&&(yield e.saveOptions());try{const t=yield e.fetch();u(t)}finally{v(!0)}}})),D=()=>d(this,void 0,void 0,(function*(){h(!0);try{yield y()}finally{h(!1)}}));return a.createElement(n.InlineField,{label:e.label,labelWidth:e.labelWidth,tooltip:e.tooltip,hidden:e.hidden},a.createElement(\"div\",{\"data-testid\":e[\"data-testid\"],title:e.title},a.createElement(n.Select,Object.assign({},e,{\"aria-label\":e.label,options:f,onChange:t=>{e.onChange(t),t.value&&o(t.value)},isLoading:p,className:e.className||\"min-width-6\",onOpenMenu:()=>e.fetch&&D(),menuShouldPortal:!0}))))}var h;(h=exports.FillValueOptions||(exports.FillValueOptions={}))[h.Previous=0]=\"Previous\",h[h.Null=1]=\"Null\",h[h.Value=2]=\"Value\";const g=[{label:\"Previous Value\",value:exports.FillValueOptions.Previous},{label:\"NULL\",value:exports.FillValueOptions.Null},{label:\"Value\",value:exports.FillValueOptions.Value}];function v(e){if(\"string\"==typeof e)return e;return e.map(e=>function(e){return\"'\"+String(e).replace(/'/g,\"''\")+\"'\"}(e)).join(\",\")}exports.ConfigSelect=function(e){var t,n,l;const{jsonData:s}=e.options,o={title:s.defaultRegion?\"\":\"select a default region\",labelWidth:null!==(t=e.labelWidth)&&void 0!==t?t:28,className:\"width-30\"},i=[e.options.jsonData.assumeRoleArn,e.options.jsonData.authType,e.options.jsonData.defaultRegion,e.options.jsonData.endpoint,e.options.jsonData.externalId,e.options.jsonData.profile,null===(n=e.options.secureJsonData)||void 0===n?void 0:n.accessKey,null===(l=e.options.secureJsonData)||void 0===l?void 0:l.secretKey].concat(e.dependencies);return a.createElement(p,Object.assign({label:e.label,\"data-testid\":e[\"data-testid\"],onChange:e.onChange,fetch:e.fetch,value:e.value,saveOptions:e.saveOptions,dependencies:i,hidden:e.hidden,disabled:e.disabled||!s.defaultRegion,allowCustomValue:e.allowCustomValue,autoFocus:e.autoFocus,backspaceRemovesValue:e.backspaceRemovesValue,className:e.className,invalid:e.invalid,isClearable:e.isClearable,isMulti:e.isMulti,inputId:e.inputId,showAllSelectedWhenOpen:e.showAllSelectedWhenOpen,maxMenuHeight:e.maxMenuHeight,minMenuHeight:e.minMenuHeight,maxVisibleValues:e.maxVisibleValues,menuPlacement:e.menuPlacement,menuPosition:e.menuPosition,noOptionsMessage:e.noOptionsMessage,onBlur:e.onBlur,onCreateOption:e.onCreateOption,onInputChange:e.onInputChange,placeholder:e.placeholder,width:e.width,isOptionDisabled:e.isOptionDisabled},o))},exports.ConnectionConfig=c,exports.FillValueSelect=function(e){var t,l,s;return a.createElement(a.Fragment,null,a.createElement(n.InlineField,{label:\"Fill value\",tooltip:\"value to fill missing points\"},a.createElement(n.Select,{\"aria-label\":\"Fill value\",options:g,value:null!==(l=null===(t=e.query.fillMode)||void 0===t?void 0:t.mode)&&void 0!==l?l:exports.FillValueOptions.Previous,onChange:({value:t})=>{var a;e.onChange(Object.assign(Object.assign({},e.query),{fillMode:Object.assign(Object.assign({},e.query.fillMode),{mode:t})})),null===(a=e.onRunQuery)||void 0===a||a.call(e)},className:\"width-12\",menuShouldPortal:!0})),(null===(s=e.query.fillMode)||void 0===s?void 0:s.mode)===exports.FillValueOptions.Value&&a.createElement(n.InlineField,{label:\"Value\",labelWidth:11},a.createElement(n.Input,{type:\"number\",\"aria-label\":\"Value\",value:e.query.fillMode.value,onChange:({currentTarget:t})=>e.onChange(Object.assign(Object.assign({},e.query),{fillMode:{mode:exports.FillValueOptions.Value,value:t.valueAsNumber}})),onBlur:()=>{var t;return null===(t=e.onRunQuery)||void 0===t?void 0:t.call(e)}})))},exports.FormatSelect=function(e){return a.createElement(n.InlineField,{label:\"Format as\",labelWidth:11},a.createElement(n.Select,{\"aria-label\":\"Format as\",options:e.options,value:e.query.format,onChange:t=>{var a;e.onChange(Object.assign(Object.assign({},e.query),{format:t.value||0})),null===(a=e.onRunQuery)||void 0===a||a.call(e)},className:\"width-12\",menuShouldPortal:!0}))},exports.InlineInput=function(e){var t;return a.createElement(n.InlineField,{label:e.label,labelWidth:null!==(t=e.labelWidth)&&void 0!==t?t:28,tooltip:e.tooltip,hidden:e.hidden,disabled:e.disabled},a.createElement(n.Input,{\"data-testid\":e[\"data-testid\"],className:\"width-30\",value:e.value,onChange:e.onChange,placeholder:e.placeholder,disabled:e.disabled}))},exports.QueryCodeEditor=function(e){const{getSuggestions:l,query:o}=e,{rawSQL:i}=s.defaults(e.query,{rawSQL:\"\"}),u=t.useRef([]);return t.useEffect(()=>{u.current=l(o)},[l,o]),a.createElement(n.CodeEditor,Object.assign({language:e.language,value:i,onBlur:t=>{const a=Object.assign(Object.assign({},e.query),{rawSQL:t});e.onChange(a),e.onRunQuery()},showMiniMap:!1,showLineNumbers:!0,getSuggestions:()=>u.current,height:\"240px\"},e.editorProps))},exports.ResourceSelector=p,exports.SIGV4ConnectionConfig=e=>{var t,n,l,s;const{onOptionsChange:o,options:i}=e,u={onOptionsChange:e=>{var t,a,n,l;const s=Object.assign(Object.assign({},i),{jsonData:Object.assign(Object.assign({},i.jsonData),{sigV4AuthType:e.jsonData.authType,sigV4Profile:e.jsonData.profile,sigV4AssumeRoleArn:e.jsonData.assumeRoleArn,sigV4ExternalId:e.jsonData.externalId,sigV4Region:e.jsonData.defaultRegion,sigV4Endpoint:e.jsonData.endpoint}),secureJsonFields:{sigV4AccessKey:null===(t=e.secureJsonFields)||void 0===t?void 0:t.accessKey,sigV4SecretKey:null===(a=e.secureJsonFields)||void 0===a?void 0:a.secretKey},secureJsonData:{sigV4AccessKey:null===(n=e.secureJsonData)||void 0===n?void 0:n.accessKey,sigV4SecretKey:null===(l=e.secureJsonData)||void 0===l?void 0:l.secretKey}});o(s)},options:Object.assign(Object.assign({},i),{jsonData:Object.assign(Object.assign({},i.jsonData),{authType:i.jsonData.sigV4AuthType,profile:i.jsonData.sigV4Profile,assumeRoleArn:i.jsonData.sigV4AssumeRoleArn,externalId:i.jsonData.sigV4ExternalId,defaultRegion:i.jsonData.sigV4Region,endpoint:i.jsonData.sigV4Endpoint}),secureJsonFields:{accessKey:null===(t=i.secureJsonFields)||void 0===t?void 0:t.sigV4AccessKey,secretKey:null===(n=i.secureJsonFields)||void 0===n?void 0:n.sigV4SecretKey},secureJsonData:{accessKey:null===(l=i.secureJsonData)||void 0===l?void 0:l.sigV4AccessKey,secretKey:null===(s=i.secureJsonData)||void 0===s?void 0:s.sigV4SecretKey}})};return a.createElement(a.Fragment,null,a.createElement(\"div\",{className:\"gf-form\"},a.createElement(\"h6\",null,\"SigV4 Auth Details\")),a.createElement(c,Object.assign({},u,{skipHeader:!0,skipEndpoint:!0})))},exports.appendTemplateVariablesAsSuggestions=(e,t)=>{const a=e(),l=[];return a.getVariables().forEach(e=>{const t=\"$\"+e.name;let s=a.replace(t);s===t&&(s=\"\"),l.push({label:t,kind:n.CodeEditorSuggestionItemKind.Text,detail:\"(Template Variable) \"+s})}),t.concat(l)},exports.applySQLTemplateVariables=function(e,t,a){const n=a();return Object.assign(Object.assign({},e),{rawSQL:n.replace(e.rawSQL,t,v)})},exports.awsAuthProviderOptions=u,exports.filterSQLQuery=function(e){return!!e.rawSQL},exports.standardRegions=o;\n//# sourceMappingURL=index.production.js.map\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/index.production.js');\n} else {\n  module.exports = require('./dist/index.development.js');\n}\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (key === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        continue;\n      }\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","module.exports = require('./lib/jsurl');","/**\n * Copyright (c) 2011 Bruno Jouhier <bruno.jouhier@sage.com>\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n//\n(function(exports) {\n\t\"use strict\";\n\texports.stringify = function stringify(v) {\n\t\tfunction encode(s) {\n\t\t\treturn !/[^\\w-.]/.test(s) ? s : s.replace(/[^\\w-.]/g, function(ch) {\n\t\t\t\tif (ch === '$') return '!';\n\t\t\t\tch = ch.charCodeAt(0);\n\t\t\t\t// thanks to Douglas Crockford for the negative slice trick\n\t\t\t\treturn ch < 0x100 ? '*' + ('00' + ch.toString(16)).slice(-2) : '**' + ('0000' + ch.toString(16)).slice(-4);\n\t\t\t});\n\t\t}\n\n\t\tvar tmpAry;\n\n\t\tswitch (typeof v) {\n\t\t\tcase 'number':\n\t\t\t\treturn isFinite(v) ? '~' + v : '~null';\n\t\t\tcase 'boolean':\n\t\t\t\treturn '~' + v;\n\t\t\tcase 'string':\n\t\t\t\treturn \"~'\" + encode(v);\n\t\t\tcase 'object':\n\t\t\t\tif (!v) return '~null';\n\n\t\t\t\ttmpAry = [];\n\n\t\t\t\tif (Array.isArray(v)) {\n\t\t\t\t\tfor (var i = 0; i < v.length; i++) {\n\t\t\t\t\t\ttmpAry[i] = stringify(v[i]) || '~null';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn '~(' + (tmpAry.join('') || '~') + ')';\n\t\t\t\t} else {\n\t\t\t\t\tfor (var key in v) {\n\t\t\t\t\t\tif (v.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tvar val = stringify(v[key]);\n\n\t\t\t\t\t\t\t// skip undefined and functions\n\t\t\t\t\t\t\tif (val) {\n\t\t\t\t\t\t\t\ttmpAry.push(encode(key) + val);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn '~(' + tmpAry.join('~') + ')';\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\t// function, undefined\n\t\t\t\treturn;\n\t\t}\n\t};\n\n\tvar reserved = {\n\t\t\"true\": true,\n\t\t\"false\": false,\n\t\t\"null\": null\n\t};\n\n\texports.parse = function(s) {\n\t\tif (!s) return s;\n\t\ts = s.replace(/%(25)*27/g, \"'\");\n\t\tvar i = 0,\n\t\t\tlen = s.length;\n\n\t\tfunction eat(expected) {\n\t\t\tif (s.charAt(i) !== expected) throw new Error(\"bad JSURL syntax: expected \" + expected + \", got \" + (s && s.charAt(i)));\n\t\t\ti++;\n\t\t}\n\n\t\tfunction decode() {\n\t\t\tvar beg = i,\n\t\t\t\tch, r = \"\";\n\t\t\twhile (i < len && (ch = s.charAt(i)) !== '~' && ch !== ')') {\n\t\t\t\tswitch (ch) {\n\t\t\t\t\tcase '*':\n\t\t\t\t\t\tif (beg < i) r += s.substring(beg, i);\n\t\t\t\t\t\tif (s.charAt(i + 1) === '*') r += String.fromCharCode(parseInt(s.substring(i + 2, i + 6), 16)), beg = (i += 6);\n\t\t\t\t\t\telse r += String.fromCharCode(parseInt(s.substring(i + 1, i + 3), 16)), beg = (i += 3);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '!':\n\t\t\t\t\t\tif (beg < i) r += s.substring(beg, i);\n\t\t\t\t\t\tr += '$', beg = ++i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn r + s.substring(beg, i);\n\t\t}\n\n\t\treturn (function parseOne() {\n\t\t\tvar result, ch, beg;\n\t\t\teat('~');\n\t\t\tswitch (ch = s.charAt(i)) {\n\t\t\t\tcase '(':\n\t\t\t\t\ti++;\n\t\t\t\t\tif (s.charAt(i) === '~') {\n\t\t\t\t\t\tresult = [];\n\t\t\t\t\t\tif (s.charAt(i + 1) === ')') i++;\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tresult.push(parseOne());\n\t\t\t\t\t\t\t} while (s.charAt(i) === '~');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t\tif (s.charAt(i) !== ')') {\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tvar key = decode();\n\t\t\t\t\t\t\t\tresult[key] = parseOne();\n\t\t\t\t\t\t\t} while (s.charAt(i) === '~' && ++i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\teat(')');\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"'\":\n\t\t\t\t\ti++;\n\t\t\t\t\tresult = decode();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbeg = i++;\n\t\t\t\t\twhile (i < len && /[^)~]/.test(s.charAt(i)))\n\t\t\t\t\ti++;\n\t\t\t\t\tvar sub = s.substring(beg, i);\n\t\t\t\t\tif (/[\\d\\-]/.test(ch)) {\n\t\t\t\t\t\tresult = parseFloat(sub);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = reserved[sub];\n\t\t\t\t\t\tif (typeof result === \"undefined\") throw new Error(\"bad value keyword: \" + sub);\n\t\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t})();\n\t}\n\n\texports.tryParse = function(s, def) {\n\t\ttry {\n\t\t\treturn exports.parse(s);\n\t\t} catch (ex) {\n\t\t\treturn def;\n\t\t}\n\t}\n\n})(typeof exports !== 'undefined' ? exports : (window.JSURL = window.JSURL || {}));\n"],"names":["SELECT","FROM","WHERE","GROUP","ORDER","BY","DESC","ASC","LIMIT","WITH","SCHEMA","KEYWORDS","STATISTICS","AND","LOGICAL_OPERATORS","EQUALS","NOT_EQUALS","COMPARISON_OPERATORS","language","conf","DYNAMIC_LABEL_PATTERNS","escapeRegExp","string","METRIC_MATH_FNS","METRIC_MATH_STATISTIC_KEYWORD_STRINGS","METRIC_MATH_KEYWORDS","METRIC_MATH_OPERATORS","METRIC_MATH_PERIODS","isCloudWatchLogsQuery","cloudwatchQuery","isCloudWatchMetricsQuery","isCloudWatchAnnotationQuery","isCloudWatchAnnotation","query","toOption","value","appendTemplateVariables","datasource","values","filterMetricsQuery","region","metricQueryType","metricEditorMode","expression","metricName","namespace","sqlExpression","statistic","useRegions","regionsIsLoading","setRegionsIsLoading","regions","setRegions","variableOptionGroup","useNamespaces","namespaces","setNamespaces","useMetrics","accountId","metrics","setMetrics","result","useDimensionKeys","dimensionFilters","dimensionKeys","setDimensionKeys","useDeepCompareEffect","useIsMonitoringAccount","resources","isMonitoringAccount","setIsMonitoringAccount","config","useAccountOptions","fetchAccountOptions","accounts","options","a","state","doFetch","useAsyncFn","wildcardOption","excludeCurrentKey","dimensions","currentKey","acc","key","FilterItem","filter","disableExpressions","onChange","onDelete","dimensionsExcludingCurrentKey","loadDimensionValues","o","loadOptions","theme","styles","getOperatorStyles","Select","change","stylesFactory","dimensionsToFilterConditions","v","filterConditionsToDimensions","filters","Dimensions","metricStat","items","setItems","onDimensionsChange","newItems","newDimensions","makeRenderFilter","renderFilter","item","QueryField","label","tooltip","children","QueryInlineField","props","JSURL","encodeUrl","obj","CloudWatchLink","panelData","href","setHref","prevPanelData","usePrevious","arns","group","logGroupNames","sources","range","start","urlProps","Icon","QUERY_COMMANDS","ARITHMETIC_OPERATORS","NUMERIC_OPERATORS","GENERAL_FUNCTIONS","STRING_FUNCTIONS","DATETIME_FUNCTIONS","IP_FUNCTIONS","BOOLEAN_FUNCTIONS","AGGREGATION_FUNCTIONS_STATS","NON_AGGREGATION_FUNCS_STATS","STATS_FUNCS","FIELD_AND_FILTER_FUNCTIONS","FUNCTIONS","command","f","byRE","groupsRE","getStatsGroups","groups","b","g","interpolateStringArrayUsingSingleOrMultiValuedVariable","templateSrv","strings","scopedVars","format","variableName","valueVar","name","isVariableOption","rawValue","separator","isTemplateVariable","current","searchFn","searchPhrase","searchFilter","setSearchFilter","debouncedSearch","Input","event","ALL_ACCOUNTS_OPTION","Account","accountOptions","selectedAccountExistsInOptions","tempVar","LogGroupsSelector","variables","fetchLogGroups","onBeforeOpen","isModalOpen","setIsModalOpen","selectableLogGroups","setSelectableLogGroups","selectedLogGroups","setSelectedLogGroups","setSearchPhrase","searchAccountId","setSearchAccountId","isLoading","setIsLoading","selectedLogGroupsCounter","lg","variableOptions","selectedVariable","currentVariableOption","toggleModal","accountNameById","idsToNames","searchTerm","possibleLogGroups","handleSelectCheckbox","row","isChecked","handleApply","handleCancel","Modal","phrase","Label","LoadingPlaceholder","Checkbox","ev","option","newValues","Button","MAX_NO_OF_VISIBLE_LOG_GROUPS","SelectedLogGroups","maxNoOfVisibleLogGroups","showConfirm","setShowConfirm","visibleSelectecLogGroups","setVisibleSelectecLogGroups","slg","ConfirmModal","rowGap","LogGroupsField","legacyLogGroupNames","logGroups","accountState","loadingLogGroupsStarted","setLoadingLogGroupsStarted","lgn","legacyLogGroupNameValues","results","r","err","params","plugins","node","prism","syntax","CloudWatchLogsQueryField","ExtraFieldElement","data","showError","cleanText","onChangeQuery","nextQuery","onTypeahead","typeahead","history","absoluteRange","prefix","text","wrapperClasses","labelKey","editor","labelClass","exploreId","absolute","migrateMetricQuery","migratedQuery","migrateAliasPatterns","aliasPatterns","newQuery","regex","_","migratedQUery","LinkedToken","type","previous","next","tokenTypes","isType","curr","ignoreTypes","tokens","t","linkedTokenBuilder","monaco","model","position","tokensPerLine","lineIndex","token","columnIndex","endColumn","newToken","StatementPosition","SuggestionKind","CompletionItemPriority","DynamicLabelsCompletionItemProvider","languageDefinition","currentToken","toCompletionItem","rest","suggestions","val","TRIGGER_SUGGEST","registerLanguage","completionItemProvider","id","loader","l","monarch","dynamicLabelsCompletionItemProvider","DynamicLabelsField","width","containerRef","onEditorMount","containerDiv","CodeEditor","SQLCodeEditor","sql","Alias","alias","setAlias","propagateOnChange","e","metricEditorModes","editorModes","MetricsQueryEditor","extraHeaderElementLeft","extraHeaderElementRight","sqlCodeEditorIsDirty","setSQLCodeEditorIsDirty","onEditorModeChange","newMetricEditorMode","RadioButtonGroup","MetricStatEditor","MathExpressionQueryField","SQLBuilderEditor","DEFAULT_METRICS_QUERY","DEFAULT_LOGS_QUERY_STRING","getDefaultLogsQuery","defaultLogGroups","legacyDefaultLogGroups","DEFAULT_VARIABLE_QUERY","apiModes","dataIsStale","onRunQuery","queryMode","regionIsLoading","emptyLogsExpression","onQueryModeChange","onRegionChange","shouldDisplayMonitoringBadge","Badge","QueryEditor","setDataIsStale","setExtraHeaderElementLeft","setExtraHeaderElementRight","onChangeInternal","LogsQueryEditor","QueryEditorPropertyType","QueryEditorExpressionType","SQLGenerator","select","from","where","groupBy","orderBy","orderByDirection","limit","parts","isTopLevelExpression","topLevelExpressionsCount","hasChildExpressions","andParts","exp","andCombined","wrapInParentheses","orParts","orCombined","groupByParts","property","operator","p","specialCharacters","interpolated","getMetricNameFromExpression","selectExpression","getNamespaceFromExpression","fromExpression","getSchemaLabelKeys","isUsingWithSchema","sanitizeOperator","flattenOperatorExpressions","expressions","getFlattenedFilters","flattenGroupByExpressions","getFlattenedGroupBys","stringArrayToDimensions","arr","setSql","setNamespace","namespaceParam","labelKeys","setSchemaLabels","schemaLabels","parameters","setMetricName","param","removeMetricName","queryWithNoParams","setAggregation","aggregation","setOrderBy","setWithSchema","withSchema","setOperatorExpressionProperty","setOperatorExpressionName","setOperatorExpressionValue","setGroupByField","field","AGGREGATIONS","onQueryChange","withSchemaEnabled","namespaceOptions","metricOptions","existingFilters","unusedDimensionKeys","onNamespaceChange","validatedQuery","validateMetricName","metric","OPERATORS","SQLFilter","filtersFromQuery","setFilters","cleaned","validExpressions","operatorExpression","validated","SQLGroupBy","groupBysFromQuery","baseOptions","completeExpressions","makeRenderItem","renderItem","GroupByItem","fieldName","orderByDirections","sqlString","fullQuery","sqlPreview","setSQLPreview","updateElementHeight","pixelHeight","pixelWidth","standardStatistics","refId","s","CloudWatchAnnotationSupport","anno","prefixMatching","actionPrefix","alarmNamePrefix","validPrefixMatchingQuery","validMetricStatQuery","Alert","CloudWatchLogsLanguageProvider","initialValues","url","lastValueFrom","interpolatedLogGroups","logGroupName","fields","context","suggs","functionSuggestions","commandToken","curToken","queryCommand","prevToken","prevNonWhitespaceToken","currentTokenIsFirstArg","currentTokenIsAfterCommandAndEmpty","isTokenType","currentTokenIsAfterCommand","nextNonWhitespaceToken","currentTokenIsComma","currentTokenIsCommaOrAfterComma","typeaheadOutput","sugg","boolFuncs","fieldsSuggestions","comparisonSuggestions","grammar","input","isFirstToken","isInsideFunctionParenthesis","isAfterKeyword","previousCommandToken","isFirstArgument","startToken","thisToken","funcsWithFieldArgs","funcName","parenthesisToken","maybeFunctionToken","keyword","maybeKeyword","getPreviousTokenExcluding","prev","content","exclude","main","CompletionItemProvider","suggestionKinds","statementPosition","SQLTokenTypes","getStatementPosition","previousNonWhiteSpace","previousKeyword","previousIsSlash","getSuggestionKinds","getSelectToken","getSelectStatisticToken","assumedStatisticToken","getMetricNameToken","assumedMetricNameToken","getFromKeywordToken","getNamespaceToken","nextNonWhiteSpace","assumedNamespaceToken","SQLCompletionItemProvider","addSuggestion","suggestion","namespaceToken","m","metricNameToken","n","labelKeyTokens","variable","MetricMathTokenTypes","currentFunction","isAfterComma","isWithinSearch","allTokensAfterStartOfSearch","lastComma","MetricMathCompletionItemProvider","idx","func","wait","mem","args","CloudWatchRequest","instanceSettings","memoizedDebounce","displayCustomError","headers","map","multiFilters","interpolatedKey","initialVal","vals","target","displayErrorIfIsMultiTemplateVariable","title","message","store","CloudWatchAnnotationQueryRunner","queries","addDataLinksToLogsResponse","response","request","replaceFn","getVariableValueFn","getRegion","tracingDatasourceUid","replace","getVariableValue","dataFrame","curTarget","interpolatedRegion","xrayLink","createInternalXrayLink","createAwsConsoleLink","datasourceUid","ds","interpolatedExpression","interpolatedGroups","runWithRetry","queryFun","targets","timeoutFunc","startTime","retries","timerID","subscription","collected","retryWaitFunction","retry","Observable","observer","run","currentQueryParams","frames","collectedPreviously","error","errorData","splitErrorData","dataResponse","q","increasingInterval","startPeriod","endPeriod","step","scheduler","subscriber","dispatch","counter","period","newPeriod","LOG_IDENTIFIER_INTERNAL","LOGSTREAM_IDENTIFIER_INTERNAL","CloudWatchLogsQueryRunner","timeSrv","logQueries","startQueryRequests","interpolatedLogGroupArns","interpolatedLogGroupNames","arn","mergeMap","dataQueryResponse","direction","logStreamField","logField","requestParams","parseLogGroupName","queryParams","dataFrames","concatMap","repeat","share","initialValue","consecutiveFailedAttempts","scan","failures","prevRecordsMatched","frame","recordsMatched","stat","queryResponse","zip","tap","failedAttempts","takeWhile","withTeardown","logQuery","finalize","subtype","resultsToDataFrames","catchError","hasMissingLegacyLogGroupNames","hasMissingLogGroups","hasMissingQueryString","observable","onUnsubscribe","innerSub","logIdentifier","colonIndex","ThrottlingErrorMessage","displayAlert","datasourceName","CloudWatchMetricsQueryRunner","metricQueries","timezoneUTCOffset","validMetricsQueries","migratedAndIterpolatedQuery","of","to","res","dataframes","lastError","throwError","firstErrorResult","failedRedIds","actualRegion","ResourcesAPI","path","account","dimensionKey","instanceId","attributeName","resourceType","tags","jsonVariable","isVariableQuery","rawQuery","migrateMultiFilters","oldFilters","tempFilters","parsedFilters","newFilters","migrateVariableQuery","metricNameQuery","dimensionKeysQuery","dimensionValuesQuery","ebsVolumeIdsQuery","ec2InstanceAttributeQuery","resourceARNsQuery","MultiFilterItem","keyPlaceholder","localKey","setLocalKey","localValue","setLocalValue","multiFiltersToFilterConditions","filterConditionsToMultiFilters","MultiFilter","onFiltersChange","newMultifilters","LABEL_WIDTH","VariableQueryField","allowCustomValue","inputId","InlineField","VariableTextField","interactive","onBlur","placeholder","queryTypes","VariableQueryEditor","parsedQuery","keysForDimensionFilter","sanitizeQuery","hasRegionField","hasNamespaceField","CloudWatchVariableSupport","queryObj","logGroupPrefix","interpolatedPrefix","selectableValueToMetricFindOption","keys","instanceID","ids","ec2Filters","metricFindOptions","CloudWatchDatasource","DataSourceWithBackend","metricsQueries","annotationQueries","dataQueryResponses","merge","logGroup","k","xRayDsId","XrayLinkConfig","hasXrayDatasource","DataSourcePicker","ConfigEditor","onOptionsChange","logsTimeout","defaultRegion","useDatasource","useAuthenticationWarning","logsTimeoutError","useTimoutValidation","saved","useDataSourceSavedState","logGroupFieldState","setLogGroupFieldState","updatedLogGroups","uid","jsonData","addWarning","setDatasource","setErr","useDebounce","setSaved","_createClass","defineProperties","i","descriptor","Constructor","protoProps","staticProps","_templateObject","_taggedTemplateLiteral","raw","_classCallCheck","instance","TemplateTag","_this","_len","transformers","_key","_len2","_key2","transformer","previousTag","template","_len3","substitutions","_key3","resultSoFar","remainingPart","substitution","str","cb","transform","endResult","defaults","inlineArrayTransformer","opts","arrayLength","conjunction","serial","indent","separatorIndex","_toConsumableArray","arr2","stripIndentTransformer","match","el","regexp","trimResultTransformer","side","commaLists","commaListsAnd","commaListsOr","splitStringTransformer","splitBy","isValidValue","x","removeNonPrintingValuesTransformer","html","replaceSubstitutionTransformer","replaceWhat","replaceWith","safeHtml","replaceResultTransformer","oneLine","oneLineTrim","oneLineCommaLists","oneLineCommaListsOr","oneLineCommaListsAnd","inlineLists","oneLineInlineLists","stripIndent","stripIndents","CLIQ_EXAMPLES","renderHighlightedMarkup","code","keyPrefix","spans","exampleCategory","LogsCheatSheet","expr","cat","j","MetaInspector","rows","custom","onDashboardLoadedHandler","dashboardId","orgId","grafanaVersion","cloudWatchQueries","logsQueries","isMetricSearchBuilder","isPrimitive","useCustomCompareEffect","effect","deps","depsEqual","ref","isDeepEqual","exports","u","c","d","h","y","D","E","O","w","A","C","S","V","module","equal","length","stringify","encode","ch","tmpAry","reserved","len","eat","expected","decode","beg","parseOne","sub","def"],"sourceRoot":""}